<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>本地安装faceswap与一键使用google的colab搭建faceswap两种方式</title>
    <url>/2020/09/23/faceswap%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="0-摘要"><a href="#0-摘要" class="headerlink" title="0. 摘要"></a>0. 摘要</h1><ul>
<li><p>因为本机安装过anaconda，python，tensorflow等环境，所以直接按照版本安装部分依赖即可。</p>
</li>
<li><p>后来发现谷歌的colab有免费的gpu可以白嫖，并且colab内置了tensorflow和图形计算框架，所以省去了搭建环境的烦恼。可以直接使用，也很方便。弊端就是不氪金每天能分配的gpu资源不定并且容易断联，session断开需要重新配置，不过图一乐还是可以的。</p>
</li>
</ul>
<h1 id="1-本地手动安装"><a href="#1-本地手动安装" class="headerlink" title="1. 本地手动安装"></a>1. 本地手动安装</h1><p>全程安装按照官方指南，见 <a href="https://github.com/deepfakes/faceswap/blob/master/INSTALL.md%E3%80%82">https://github.com/deepfakes/faceswap/blob/master/INSTALL.md。</a></p>
<h1 id="2-问题记录"><a href="#2-问题记录" class="headerlink" title="2. 问题记录"></a>2. 问题记录</h1><h2 id="2-1-问题1"><a href="#2-1-问题1" class="headerlink" title="2.1 问题1"></a>2.1 问题1</h2><ul>
<li><p>问题：import win32console  # pylint: disable=import-errorImportError: DLL load failed while importing win32console: 找不到指定的模块</p>
</li>
<li><p>解决：进入“Anaconda3\Scripts”下找到“pywin32_postinstall.py”文件，并执行“python3 pywin32_postinstall.py -install”</p>
</li>
</ul>
<h2 id="2-2-问题2"><a href="#2-2-问题2" class="headerlink" title="2.2 问题2"></a>2.2 问题2</h2><ul>
<li>问题：在使用pip一键安装requirements_base.txt及requirements_nvidia.txt中的依赖的时候速度慢，并且切换到anaconda的新建虚拟环境中windows下无法执行其中的git命令</li>
<li>解决：速度慢修改anaconda的镜像。git无法访问：手动下载git包并将“requirements_base”中的git相关命令注释掉（git慢的话修改git的代理端口）</li>
</ul>
<h2 id="2-3-问题3"><a href="#2-3-问题3" class="headerlink" title="2.3 问题3"></a>2.3 问题3</h2><ul>
<li>问题：File “D:\faceswap\lib\gui\menu.py”, line 302, in _get_branchesretcode, stdout.decode(‘utf-8’).strip().replace(“\n”, “ - “)) UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xb2 in position 6: invalid start byte</li>
<li>解决： 查看源码发现该句只是写入日志的内容，直接注掉，成功运行</li>
</ul>
<h2 id="2-4-问题4"><a href="#2-4-问题4" class="headerlink" title="2.4 问题4"></a>2.4 问题4</h2><ul>
<li><p>问题：一直无法启动gpu进行运算，猜想是缺少插件CUDA toolkit（英伟达计算架构框架）和cudnn（英伟达架构算法）</p>
</li>
<li><p>证明猜想：</p>
<pre><code class="hljs livecodeserver"><span class="hljs-comment">#测试tfGPU是否能够使用：</span>
import tensorflow <span class="hljs-keyword">as</span> tf
import os
os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span> 
print(<span class="hljs-string">&#x27;GPU&#x27;</span>, tf.test.is_gpu_available())
<span class="hljs-keyword">a</span> = tf.<span class="hljs-built_in">constant</span>(<span class="hljs-number">2.0</span>)
b = tf.<span class="hljs-built_in">constant</span>(<span class="hljs-number">4.0</span>)
print(<span class="hljs-keyword">a</span> + b)

<span class="hljs-comment">#结果为如下表示可以使用gpu</span>
GPU True
tf.Tensor(<span class="hljs-number">6.0</span>, shape=(), dtype=float32)

<span class="hljs-comment">#但是报错</span>
“Could <span class="hljs-keyword">not</span> <span class="hljs-built_in">load</span> dynamic library <span class="hljs-string">&#x27;cusparse64_10.dll&#x27;</span>; dlerror: cusparse64_10.dll <span class="hljs-keyword">not</span> found”等dll文件不存在

<span class="hljs-comment">#需要安装CUDA和cudnn</span>
CUDA：<span class="hljs-keyword">https</span>://developer.nvidia.com/cuda-downloads 
CUDNN: <span class="hljs-keyword">https</span>://developer.nvidia.com/cudnn</code></pre>


</li>
</ul>
<h3 id="2-4-1-安装cuda和cudnn后查看gpu是否启动报错"><a href="#2-4-1-安装cuda和cudnn后查看gpu是否启动报错" class="headerlink" title="2.4.1 安装cuda和cudnn后查看gpu是否启动报错"></a>2.4.1 安装cuda和cudnn后查看gpu是否启动报错</h3><pre><code class="hljs latex">问题：Could not load dynamic library &#x27;cudnn64_7.dll&#x27;; dlerror: cudnn64_7.dll not found

解决方法：Copy &lt;installpath&gt;<span class="hljs-tag">\<span class="hljs-name">cuda</span></span><span class="hljs-tag">\<span class="hljs-name">bin</span></span><span class="hljs-tag">\<span class="hljs-name">cudnn</span></span>64_7.dll to C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files<span class="hljs-tag">\<span class="hljs-name">NVIDIA</span></span> GPU Computing Toolkit<span class="hljs-tag">\<span class="hljs-name">CUDA</span></span><span class="hljs-tag">\<span class="hljs-name">v</span></span>9.0<span class="hljs-tag">\<span class="hljs-name">bin</span></span>.
Copy &lt;installpath&gt;<span class="hljs-tag">\<span class="hljs-name">cuda</span></span><span class="hljs-tag">\<span class="hljs-name"> </span></span>include<span class="hljs-tag">\<span class="hljs-name">cudnn</span></span>.h to C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files<span class="hljs-tag">\<span class="hljs-name">NVIDIA</span></span> GPU Computing Toolkit<span class="hljs-tag">\<span class="hljs-name">CUDA</span></span><span class="hljs-tag">\<span class="hljs-name">v</span></span>9.0<span class="hljs-tag">\<span class="hljs-name">include</span></span>.
Copy &lt;installpath&gt;<span class="hljs-tag">\<span class="hljs-name">cuda</span></span><span class="hljs-tag">\<span class="hljs-name">lib</span></span><span class="hljs-tag">\<span class="hljs-name">x</span></span>64<span class="hljs-tag">\<span class="hljs-name">cudnn</span></span>.lib to C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files<span class="hljs-tag">\<span class="hljs-name">NVIDIA</span></span> GPU Computing Toolkit<span class="hljs-tag">\<span class="hljs-name">CUDA</span></span><span class="hljs-tag">\<span class="hljs-name">v</span></span>9.0<span class="hljs-tag">\<span class="hljs-name">lib</span></span><span class="hljs-tag">\<span class="hljs-name">x</span></span>64</code></pre>

<h1 id="3-colab安装"><a href="#3-colab安装" class="headerlink" title="3. colab安装"></a>3. colab安装</h1><p>参考：<code>https://github.com/RakaMaru/Faceswap_Google_Colab_Master/blob/master/Faceswap_Google_Colab_Master.ipynb</code>，因为colab的python版本问题又不想修改python版本，进行了部分修改。以下均在colab的笔记本中按顺序执行(前置需要配置一些文件的目录参考上述链接)</p>
<pre><code class="hljs gradle">#@title Use <span class="hljs-keyword">this</span> to check the assigned GPU
!cat <span class="hljs-regexp">/etc/</span>os-release

<span class="hljs-keyword">def</span> install_dependencies():
  !ln -sf <span class="hljs-regexp">/opt/</span>bin<span class="hljs-regexp">/nvidia-smi /u</span>sr<span class="hljs-regexp">/bin/</span>nvidia-smi;
  !pip install gputil;
  !pip install psutil;
  !pip install humanize;%%capture

<span class="hljs-keyword">def</span> printm():
 GPUs = GPU.getGPUs()

 <span class="hljs-keyword">if</span> len(GPUs) == <span class="hljs-number">0</span>:
  <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;No GPU available.&quot;</span>)
  <span class="hljs-keyword">return</span>

 gpu = GPUs[<span class="hljs-number">0</span>]
 process = psutil.Process(os.getpid())
 <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Gen RAM Free: &quot;</span> + humanize.naturalsize( psutil.virtual_memory().available ), <span class="hljs-string">&quot; | Proc size: &quot;</span> + humanize.naturalsize( process.memory_info().rss))
 <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;GPU RAM Free: &#123;0:.0f&#125;MB | Used: &#123;1:.0f&#125;MB | Util &#123;2:3.0f&#125;% | Total &#123;3:.0f&#125;MB&quot;</span>.format(gpu.memoryFree, gpu.memoryUsed, gpu.memoryUtil*<span class="hljs-number">100</span>, gpu.memoryTotal))

<span class="hljs-keyword">from</span> IPython.utils <span class="hljs-keyword">import</span> io
<span class="hljs-keyword">from</span> google.colab <span class="hljs-keyword">import</span> drive
<span class="hljs-keyword">import</span> psutil
<span class="hljs-keyword">import</span> humanize
<span class="hljs-keyword">import</span> os
 
with io.capture_output() as captured:
  install_dependencies()
<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Dependencies installed.&quot;</span>)

<span class="hljs-keyword">import</span> GPUtil as GPU
printm()</code></pre>

<pre><code class="hljs \">#@title Set Time Zone
!rm &#x2F;etc&#x2F;localtime
!ln -s &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;HST &#x2F;etc&#x2F;localtime
!date

#above is for HST, you can find yours in
#&#x2F;usr&#x2F;share&#x2F;zoneinfo</code></pre>

<pre><code class="hljs diff"><span class="hljs-addition">! rm -rf ./drive</span></code></pre>

<pre><code class="hljs routeros"><span class="hljs-comment">#@title Mount Google Drive</span>

<span class="hljs-keyword">from</span> google.colab import drive
drive.mount(<span class="hljs-string">&#x27;/content/drive&#x27;</span>, <span class="hljs-attribute">force_remount</span>=<span class="hljs-literal">True</span>)</code></pre>

<pre><code class="hljs llvm">#<span class="hljs-title">@title</span> Cleanup folders if needed

<span class="hljs-title">!rm</span> -r face_a
<span class="hljs-title">!rm</span> -r face_b</code></pre>

<pre><code class="hljs llvm">#<span class="hljs-title">@title</span> Download training data
<span class="hljs-title">!cp</span> <span class="hljs-string">&quot;/content/drive/My Drive/colab_files/faceswap/faces/face_a.zip&quot;</span> .
<span class="hljs-title">!cp</span> <span class="hljs-string">&quot;/content/drive/My Drive/colab_files/faceswap/faces/face_b.zip&quot;</span> .

<span class="hljs-title">!unzip</span> face_a.zip -d face_a
<span class="hljs-title">!unzip</span> face_b.zip -d face_b

<span class="hljs-title">!rm</span> face_a.zip
<span class="hljs-title">!rm</span> face_b.zip</code></pre>

<pre><code class="hljs awk"><span class="hljs-comment">#@title Grab the latest Faceswap</span>
!git clone --single-branch --branch r1.<span class="hljs-number">0</span> https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/deepfakes/</span>faceswap.git</code></pre>

<pre><code class="hljs awk"><span class="hljs-comment">#@title Copy configuration files</span>
!cp <span class="hljs-string">&quot;/content/drive/My Drive/colab_files/faceswap/config/train.ini&quot;</span> faceswap<span class="hljs-regexp">/config/</span>
!ls -lA faceswap<span class="hljs-regexp">/config/</span>
!cat faceswap<span class="hljs-regexp">/config/</span>train.ini</code></pre>

<pre><code class="hljs angelscript">#@title 删除自带的tensorflow2<span class="hljs-number">.3</span>安装<span class="hljs-number">1.15</span><span class="hljs-number">.0</span>
! pip install tensorflow==<span class="hljs-number">1.15</span><span class="hljs-number">.0</span>
! pip install gast==<span class="hljs-number">0.2</span><span class="hljs-number">.2</span></code></pre>

<pre><code class="hljs angelscript">#@title Install Tensorflow
!pip install -r faceswap/requirements_nvidia.txt
#@ 这里会报错“ERROR: albumentations <span class="hljs-number">0.1</span><span class="hljs-number">.12</span> has requirement imgaug&lt;<span class="hljs-number">0.2</span><span class="hljs-number">.7</span>,&gt;=<span class="hljs-number">0.2</span><span class="hljs-number">.5</span>, but you<span class="hljs-string">&#x27;ll have imgaug 0.2.9 which is incompatible.”  但没关系</span></code></pre>

<pre><code class="hljs livescript"><span class="hljs-comment">#@title 开始训练，参数根据需要修改</span>
num_iterations = <span class="hljs-string">&quot;100000&quot;</span>
save_every = <span class="hljs-string">&quot;360&quot;</span>
save_model_every = <span class="hljs-string">&quot;25000&quot;</span>
batch_num = <span class="hljs-string">&quot;8&quot;</span>
num_gpus = <span class="hljs-string">&quot;1&quot;</span>

trainer_type = <span class="hljs-string">&quot;dlight&quot;</span>

model_dir = <span class="hljs-string">&quot;/content/drive/My Drive/colab_files/faceswap/models/model&quot;</span>
alignments_file_a = <span class="hljs-string">&quot;face_a/alignments.fsa&quot;</span>
alignments_file_b = <span class="hljs-string">&quot;face_b/alignments.fsa&quot;</span>
timelapse_dir = <span class="hljs-string">&quot;/content/drive/My Drive/colab_files/faceswap/output/timelapse&quot;</span>
<span class="hljs-comment">#@title set variables end</span>

!python3 faceswap/faceswap.py train <span class="hljs-string">\</span>
  -A <span class="hljs-string">&#x27;./face_a/faceA&#x27;</span> -ala <span class="hljs-string">&#x27;&#123;alignments_file_a&#125;&#x27;</span> <span class="hljs-string">\</span>
  -B <span class="hljs-string">&#x27;./face_b/faceB&#x27;</span> -alb <span class="hljs-string">&#x27;&#123;alignments_file_b&#125;&#x27;</span> <span class="hljs-string">\</span>
  -m <span class="hljs-string">&#x27;&#123;model_dir&#125;&#x27;</span> <span class="hljs-string">\</span>
  -t <span class="hljs-string">&#x27;&#123;trainer_type&#125;&#x27;</span> <span class="hljs-string">\</span>
  -bs <span class="hljs-string">&#x27;&#123;batch_num&#125;&#x27;</span> <span class="hljs-string">\</span>
  -<span class="hljs-literal">it</span> <span class="hljs-string">&#x27;&#123;num_iterations&#125;&#x27;</span> <span class="hljs-string">\</span>
  -g <span class="hljs-string">&#x27;&#123;num_gpus&#125;&#x27;</span> <span class="hljs-string">\</span>
  -s <span class="hljs-string">&#x27;&#123;save_every&#125;&#x27;</span> <span class="hljs-string">\</span>
  -ss <span class="hljs-string">&#x27;&#123;save_model_every&#125;&#x27;</span> <span class="hljs-string">\</span></code></pre>

<pre><code class="hljs angelscript">#@title 查看结果：
Setting Faceswap backend to NVIDIA
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">02</span> INFO     Log level <span class="hljs-keyword">set</span> to: INFO
Using TensorFlow backend.
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">04</span> INFO     Model A Directory: /content/face_a/faceA
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">04</span> INFO     Model B Directory: /content/face_b/faceB
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">04</span> INFO     Training data directory: /content/drive/My Drive/colab_files/faceswap/models/model
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">04</span> INFO     ===================================================
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">04</span> INFO       Starting
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">04</span> INFO       Press <span class="hljs-string">&#x27;ENTER&#x27;</span> to save <span class="hljs-keyword">and</span> quit
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">04</span> INFO       Press <span class="hljs-string">&#x27;S&#x27;</span> to save model weights immediately
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">04</span> INFO     ===================================================
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">05</span> INFO     Loading data, <span class="hljs-keyword">this</span> may take a <span class="hljs-keyword">while</span>...
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">05</span> INFO     Loading Model <span class="hljs-keyword">from</span> Dlight plugin...
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">05</span> INFO     Using configuration saved <span class="hljs-keyword">in</span> state file
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">10</span> INFO     Loaded model <span class="hljs-keyword">from</span> disk: <span class="hljs-string">&#x27;/content/drive/My Drive/colab_files/faceswap/models/model&#x27;</span>
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">10</span> INFO     Loading Trainer <span class="hljs-keyword">from</span> Original plugin...
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">12</span> INFO     Enabled TensorBoard Logging
[<span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">27</span>] [#<span class="hljs-number">04386</span>] Loss A: <span class="hljs-number">0.05719</span>, Loss B: <span class="hljs-number">0.05088</span>
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span> INFO     [Saved models] - Average since last save: face_loss_A: <span class="hljs-number">0.05719</span>, face_loss_B: <span class="hljs-number">0.05088</span>
[<span class="hljs-number">16</span>:<span class="hljs-number">19</span>:<span class="hljs-number">42</span>] [#<span class="hljs-number">04746</span>] Loss A: <span class="hljs-number">0.04279</span>, Loss B: <span class="hljs-number">0.03795</span>
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">19</span>:<span class="hljs-number">46</span> INFO     [Saved models] - Average since last save: face_loss_A: <span class="hljs-number">0.04535</span>, face_loss_B: <span class="hljs-number">0.04580</span>
[<span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">01</span>] [#<span class="hljs-number">05106</span>] Loss A: <span class="hljs-number">0.04427</span>, Loss B: <span class="hljs-number">0.04492</span>
<span class="hljs-number">09</span>/<span class="hljs-number">26</span>/<span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">06</span> INFO     [Saved models] - Average since last save: face_loss_A: <span class="hljs-number">0.04406</span>, face_loss_B: <span class="hljs-number">0.04483</span>
[<span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">19</span>] [#<span class="hljs-number">05120</span>] Loss A: <span class="hljs-number">0.04438</span>, Loss B: <span class="hljs-number">0.03987</span>
</code></pre>

<h2 id="3-1-总结"><a href="#3-1-总结" class="headerlink" title="3.1 总结"></a>3.1 总结</h2><p>根据官方指导上面的损失函数lossA和lossB分别训练到0.02和0.01就基本差不多了，最后把训练的模型下载到本地上，然后跑一下就行了。虽然是在云端训练的，但是本地似乎还是需要安装相关的环境，因为模型下载下来了本地使用还是需要环境。</p>
<p>云端的好处就是不用占用本机的内存什么的，还有gpu用方便很多速度也蛮快的。</p>
]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>娱乐</tag>
      </tags>
  </entry>
  <entry>
    <title>HBase基础</title>
    <url>/2020/05/11/HBase%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-HBase的存储形式"><a href="#1-HBase的存储形式" class="headerlink" title="1. HBase的存储形式"></a>1. HBase的存储形式</h1><p>hbase的内部使用KeyValue的形式存储，其key是rowKey：family：column：logTime，value是其存储的内容。</p>
<p>其在region内大多以升序的形式排列，唯一的时logTime是以降序的形式进行排列。</p>
<p>所以，rowKey里越靠近左边的信息越容易被检索到。其设计时，要考虑把重要的信息放左边，不重要的信息放到右边。这样可以提高查询数据的速度。最重要的提高索引速度的就是设计合适的rowKey。</p>
<p>在做RowKey设计时，请先考虑业务是读比写多，还是读比写少，HBase本身是为写优化的，即便是这样，也可能会出现热点问题，而如果我们读比较多的话，除了考虑以上RowKey设计原则外，还可以考虑HBase的Coprocessor甚至elasticSearch结合的方法，无论哪种方式，都建议做实际业务场景下数据的压力测试以得到最优结果。</p>
<h2 id="1-1-Hbase的存储结构"><a href="#1-1-Hbase的存储结构" class="headerlink" title="1.1 Hbase的存储结构"></a>1.1 Hbase的存储结构</h2><h3 id="1-1-1-逻辑存储结构"><a href="#1-1-1-逻辑存储结构" class="headerlink" title="1.1.1 逻辑存储结构"></a>1.1.1 逻辑存储结构</h3><table>
<thead>
<tr>
<th>-</th>
<th>-</th>
<th>列族：info</th>
<th>列族：area</th>
</tr>
</thead>
<tbody><tr>
<td>行键</td>
<td>时间戳</td>
<td>name /  age</td>
<td>country / city</td>
</tr>
<tr>
<td>Row1</td>
<td>t1</td>
<td>张三 / 11</td>
<td>中国 / 上海</td>
</tr>
<tr>
<td>Row2</td>
<td>t2</td>
<td>王二 / 20</td>
<td></td>
</tr>
</tbody></table>
<p>在本图中，列簇（Column Family）对应的值就是 info 和 area ，列（ Column 或者称为 Qualifier ）对应的就是 name 、 age 、 country 和 city ，Row key 对应的就是 Row 1 和 Row 2，Cell 对应的就是具体的值。</p>
<ul>
<li>Row key ：表的主键，按照字典序排序。</li>
<li>列簇：在 HBase 中，列簇将表进行横向切割。</li>
<li>列：属于某一个列簇，在 HBase 中可以进行动态的添加。</li>
<li>Cell : 是指具体的 Value 。</li>
<li>Version ：在这张图里面没有显示出来，这个是指版本号，用时间戳（TimeStamp ）来表示。</li>
</ul>
<p>在 HBase 中的 KEY 组成是这样的：</p>
<table>
<thead>
<tr>
<th>Row key</th>
<th>CF（列簇）</th>
<th>cloumn</th>
<th>TimeStamp</th>
<th>value</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>row 1</td>
<td>info</td>
<td>name</td>
<td>t1</td>
<td>张三</td>
<td></td>
</tr>
</tbody></table>
<p>KEY 的组成是以 Row key 、CF(Column Family) 、Column 和 TimeStamp 组成的。</p>
<p>TimeStamp 在 HBase 中充当的作用就是版本号，因为在 HBase 中有着数据多版本的特性，所以同一个 KEY 可以有多个版本的 Value 值（可以通过配置来设置多少个版本）。查询的话是默认取回最新版本的那条数据，但是也可以进行查询多个版本号的数据</p>
<h3 id="1-1-2-Region-Server-和-Region-的关系"><a href="#1-1-2-Region-Server-和-Region-的关系" class="headerlink" title="1.1.2 Region Server 和 Region 的关系"></a>1.1.2 Region Server 和 Region 的关系</h3><table>
<thead>
<tr>
<th>Region Server</th>
<th>Region Server</th>
<th>Region Server</th>
<th>Region Server</th>
</tr>
</thead>
<tbody><tr>
<td><strong>RegionA</strong></td>
<td><strong>RegionA</strong></td>
<td><strong>RegionB</strong></td>
<td><strong>RegionB</strong></td>
</tr>
<tr>
<td>CFA</td>
<td>CFB</td>
<td>CFC</td>
<td>CFD</td>
</tr>
</tbody></table>
<ul>
<li>一个 Region Server 就是一个机器节点(服务器)</li>
<li>一个 Region Server 包含着多个 Region</li>
<li>一个 Region 包含着多个列簇 (CF)</li>
<li>一个 Region Server 中可以有多张 Table，一张 Table 可以有多个 Region<h3 id="1-1-3-Hbase读取数据的过程"><a href="#1-1-3-Hbase读取数据的过程" class="headerlink" title="1.1.3 Hbase读取数据的过程"></a>1.1.3 Hbase读取数据的过程</h3></li>
</ul>
<p>Client 请求读取数据时，先转发到 ZK 集群，在 ZK 集群中寻找到相对应的 Region Server，再找到对应的 Region，先是查 MemStore，如果在 MemStore 中获取到数据，那么就会直接返回，否则就是再由 Region 找到对应的 Store File，从而查到具体的数据。</p>
<p>在整个架构中，HMaster 和 HRegion Server 可以是同一个节点上，可以有多个 HMaster 存在，但是只有一个 HMaster 在活跃。</p>
<p>在 Client 端会进行 rowkey-&gt; HRegion 映射关系的缓存，降低下次寻址的压力。</p>
<h2 id="1-2-HBase的存储机制"><a href="#1-2-HBase的存储机制" class="headerlink" title="1.2 HBase的存储机制"></a>1.2 HBase的存储机制</h2><p>HBase是一个面向列的数据库，在表中它由行排序。表模式定义只能列族，也就是键值对。一个表有多个列族以及每一个列族可以有任意数量的列。后续列的值连续存储在磁盘上。表中的每个单元格值都具有时间戳。总之，在一个HBase：</p>
<ul>
<li>表是行的集合。</li>
<li>行是列族的集合。</li>
<li>列族是列的集合。</li>
<li>列是键值对的集合。</li>
</ul>
<p>这里的列式存储或者说面向列，其实说的是列族存储，HBase是根据列族来存储数据的。列族下面可以有非常多的列，列族在创建表的时候就必须指定。</p>
<h1 id="2-HBase中建立分区（表）"><a href="#2-HBase中建立分区（表）" class="headerlink" title="2.HBase中建立分区（表）"></a>2.HBase中建立分区（表）</h1><h2 id="2-1-为什么要建立分区表-分区表存在的意义是什么"><a href="#2-1-为什么要建立分区表-分区表存在的意义是什么" class="headerlink" title="2.1 为什么要建立分区表/分区表存在的意义是什么:"></a>2.1 为什么要建立分区表/分区表存在的意义是什么:</h2><ul>
<li>将大数据表的增加由无序变为有序<h2 id="2-2-原理"><a href="#2-2-原理" class="headerlink" title="2.2 原理"></a>2.2 原理</h2><blockquote>
<p>在HBase中，每个表默认时都由一个Region存储原数据，但是若当数据慢慢增加时，就会将一个Region分裂成其他若干个不同的region。但是这种无序的分裂，会让后期的表扫描，表过滤操作很不方便（特别耗时）。正是着眼于未来表的改变，才有了为表创建分区的操作。<br>提前创建分区表为有序</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>neo4j集群安装步骤</title>
    <url>/2020/08/13/neo4j%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-neo4j集群安装"><a href="#1-neo4j集群安装" class="headerlink" title="1. neo4j集群安装"></a>1. neo4j集群安装</h1><ol start="0">
<li>文件说明：</li>
</ol>
<ul>
<li>neo4j-enterprise-3.4.18-unix.tar.gz为软件压缩包</li>
<li>如下其余的都是第三方包，后面只需要移动到后面指定的文件夹中即可<pre><code class="hljs apache"><span class="hljs-attribute">apoc</span>-<span class="hljs-number">3.4.0.4</span>-<span class="hljs-literal">all</span>.jar                hive-service-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-cdh<span class="hljs-number">5</span>.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>.jar
<span class="hljs-attribute">graph</span>-algorithms-algo-<span class="hljs-number">3.4.12.7</span>.jar  httpclient-<span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.jar
<span class="hljs-attribute">hive</span>-exec-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-cdh<span class="hljs-number">5</span>.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>.jar       httpcore-<span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.jar
<span class="hljs-attribute">hive</span>-jdbc-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-cdh<span class="hljs-number">5</span>.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>.jar       libfb<span class="hljs-number">303</span>-<span class="hljs-number">0</span>.<span class="hljs-number">9</span>.<span class="hljs-number">3</span>.jar
<span class="hljs-attribute">hive</span>-metastore-<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-cdh<span class="hljs-number">5</span>.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>.jar  libthrift-<span class="hljs-number">0</span>.<span class="hljs-number">9</span>.<span class="hljs-number">3</span>.jar</code></pre></li>
</ul>
<ol>
<li>说明<blockquote>
<p>安装目录这里假设为根目录下面的opt文件夹<code>/opt</code>,具体视现场情况而定。配置集群方式可以通过先修改一份配置文件，然后将整个文件包发送到另外两个节点上。最后再修改neo4j的id即可。以下为此种安装方式的步骤</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>测试主机配置ip分别为：</p>
</blockquote>
<blockquote>
<p>172.16.221.100/172.16.221.102/172.16.221.9，</p>
</blockquote>
<blockquote>
<p>对应的hostname分别为master/slave01/slave02，</p>
</blockquote>
<blockquote>
<p>对应的neo4j集群id分别为1/2/3<br>（具体视现场情况而定,neo4j集群id只是一个标识）</p>
</blockquote>
<ol start="2">
<li>获取软件包之后然后在安装目录下直接解压缩，命令如下<pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -vxf neo<span class="hljs-number">4</span>j-enterprise-<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">18</span>-unix.tar.gz</code></pre></li>
<li>开启http页面服务外部访问</li>
</ol>
<ul>
<li>修改neo4j-enterprise-3.4.18/conf/neo4j.conf文件</li>
</ul>
<p>删除</p>
<pre><code class="hljs angelscript"># dbms.connectors.default_listen_address=<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span></code></pre>
<p>行前面的井号</p>
<pre><code class="hljs vala"><span class="hljs-meta"># vim中打开文件然后输入“/+字符串”然后回车可以进行字符串搜索，使用n键调整上下匹配</span></code></pre>
<ol start="4">
<li>配置ip地址及页面缓存大小</li>
</ol>
<ul>
<li>修改neo4j-enterprise-3.4.18/conf/neo4j.conf文件<pre><code class="hljs ini"><span class="hljs-comment"># 修改文件中的不带井号行的数据为如下值</span>

<span class="hljs-comment"># Unique server id for this Neo4j instance</span>
<span class="hljs-comment"># can not be negative id and must be unique</span>
<span class="hljs-attr">ha.server_id</span>=<span class="hljs-number">1</span> 
<span class="hljs-comment"># List of other known instances in this cluster</span>
<span class="hljs-comment"># Alternatively, use IP addresses:</span>
<span class="hljs-attr">ha.initial_hosts</span>=<span class="hljs-number">172.16</span>.<span class="hljs-number">221.100</span>:<span class="hljs-number">5001</span>,<span class="hljs-number">172.16</span>.<span class="hljs-number">221.102</span>:<span class="hljs-number">5001</span>,<span class="hljs-number">172.16</span>.<span class="hljs-number">221.9</span>:<span class="hljs-number">5001</span>(这里根据实际id进行修改，端口默认不变)
<span class="hljs-comment"># HA - High Availability</span>
<span class="hljs-comment"># SINGLE - Single mode, default.</span>
<span class="hljs-attr">dbms.mode</span>=HA
<span class="hljs-comment"># HTTP Connector</span>
<span class="hljs-attr">dbms.connector.http.enabled</span>=<span class="hljs-literal">true</span>
<span class="hljs-attr">dbms.connector.http.listen_address</span>=:<span class="hljs-number">7474</span>
<span class="hljs-comment"># 设置堆内存和页面缓存大小</span>
<span class="hljs-attr">dbms.memory.heap.initial_size</span>=<span class="hljs-number">10</span>g
<span class="hljs-attr">dbms.memory.heap.max_size</span>=<span class="hljs-number">10</span>g
<span class="hljs-attr">dbms.memory.pagecache.size</span>=<span class="hljs-number">10</span>g</code></pre>
</li>
</ul>
<ol start="5">
<li><p>将第0步里面所述的所有第三方包放到<code>/opt/neo4j-enterprise-3.4.18/plugins</code>目录下</p>
</li>
<li><p>将整个neo4j文件夹<code>opt/neo4j-enterprise-3.4.18</code>复制到要安装的从节点对应的目录下</p>
<pre><code class="hljs angelscript">scp -r ./opt/neo4j-enterprise<span class="hljs-number">-3.4</span><span class="hljs-number">.18</span>/ <span class="hljs-symbol">root@</span><span class="hljs-number">172.16</span><span class="hljs-number">.221</span><span class="hljs-number">.102</span>:/opt/
scp -r ./opt/neo4j-enterprise<span class="hljs-number">-3.4</span><span class="hljs-number">.18</span>/ <span class="hljs-symbol">root@</span><span class="hljs-number">172.16</span><span class="hljs-number">.221</span><span class="hljs-number">.9</span>:/opt/</code></pre></li>
<li><p>修改从节点的neo4jID</p>
</li>
</ol>
<ul>
<li>修改从节点的neo4j-enterprise-3.4.18/conf/neo4j.conf文件</li>
<li>找到neo4j.conf文件中的如下部分，将两个从节点中的ha.server_id分别修改为2和3<pre><code class="hljs ini"><span class="hljs-comment"># Unique server id for this Neo4j instance</span>
<span class="hljs-comment"># can not be negative id and must be unique</span>
<span class="hljs-attr">ha.server_id</span>=<span class="hljs-number">1</span></code></pre></li>
</ul>
<ol start="8">
<li>然后分别<strong>启动三个集群</strong>，主从节点启动顺序不定，<strong>集群配置必须三个节点都启动服务才能启动成功。单独启动一个节点是无法启动成功的</strong>。</li>
</ol>
<p>在<code>/opt/neo4j-enterprise-3.4.18/bin</code>目录下分别输入</p>
<pre><div class="caption"><span>start``` ，并等待数秒即可</span></div><code class="hljs ./neo4j">
&gt; 重启和关闭的命令将上面的start改成restart或者stop即可


9. web客户端查看是否启动成功

客户端页面为“http:&#x2F;&#x2F;172.16.221.100:7474&#x2F;browser&#x2F;”,
第一次登陆的时候会强制修改密码,
默认账号密码为:neo4j&#x2F;neo4j。
点击页面上的System information框内的monitor键如下显示表示成功启动。
（id为1，2，3的节点状态都是alive）</code></pre>
<p>Cluster<br>Id    Alive    Available    Is Master<br>1    true    true    yes<br>2    true    true    -<br>3    true    true</p>
<pre><code class="hljs">

# 2.启动可能遇到问题:

## 2.1  ERROR Failed to start Neo4j
&gt;  ERROR Failed to start Neo4j: Starting Neo4j failed: Component &#x27;org.neo4j.server.database.LifecycleManagingDatabase@1e141e42&#x27; was successfully initialized, but failed to start. Please see the attached cause exception &quot;Conversation-response mapping:
&gt;  &#123;1/13#=ResponseFuture&#123;conversationId=&#x27;1/13#&#x27;, initiatedByMessageType=join, response=null&#125;&#125;&quot;. Starting Neo4j failed: Component 

如上错误说明三台机器之间访问出现了问题，不能相互感知，不能加入集群，还需要增加下面配置</code></pre>
<h1 id="在neo4j-node1-neo4j-conf中添加"><a href="#在neo4j-node1-neo4j-conf中添加" class="headerlink" title="在neo4j-node1 neo4j.conf中添加"></a>在neo4j-node1 neo4j.conf中添加</h1><p>dbms.connectors.default_listen_address=172.16.221.100<br>dbms.connector.bolt.enabled=true<br>dbms.connector.bolt.listen_address=:7687</p>
<h1 id="在neo4j-node2-neo4j-conf中添加"><a href="#在neo4j-node2-neo4j-conf中添加" class="headerlink" title="在neo4j-node2 neo4j.conf中添加"></a>在neo4j-node2 neo4j.conf中添加</h1><p>dbms.connectors.default_listen_address=172.16.221.102<br>dbms.connector.bolt.enabled=true<br>dbms.connector.bolt.listen_address=:7687</p>
<h1 id="在neo4j-node3-neo4j-conf中添加"><a href="#在neo4j-node3-neo4j-conf中添加" class="headerlink" title="在neo4j-node3 neo4j.conf中添加"></a>在neo4j-node3 neo4j.conf中添加</h1><p>dbms.connectors.default_listen_address=172.16.221.9<br>dbms.connector.bolt.enabled=true<br>dbms.connector.bolt.listen_address=:7687</p>
<pre><code class="hljs angelscript">然后三台集群分别启动即可，无启动顺序。等待启动完成查看neo4j状态或者看日志都可以看到启动已经成功。

## <span class="hljs-number">2.2</span> Neo4j-shell 报错Connection <span class="hljs-built_in">ref</span>used</code></pre>
<p>cd /etc/neo4j<br>vim neo4j.conf<br>去掉 #dbms.shell.enabled=true 前面的#</p>
<pre><code class="hljs awk">更改后重启neo4j即可

<span class="hljs-comment"># 3. 部分需要脚本</span>
**下面脚本都需要在文件解压后在“<span class="hljs-regexp">/opt/</span>neo4j-enterprise-<span class="hljs-number">3.4</span>.<span class="hljs-number">18</span>/bin”（解压文件的bin目录下）目录下手动建立相关的文件**


<span class="hljs-comment">## 3.1 清空库脚本</span>
- 路径：
&gt; <span class="hljs-regexp">/opt/</span>neo4j-enterprise-<span class="hljs-number">3.4</span>.<span class="hljs-number">18</span><span class="hljs-regexp">/bin/</span>dropDataBase.sh

- 内容：</code></pre>
<p>#!/bin/bash</p>
<h1 id="Neo4j删除边和顶点的脚本"><a href="#Neo4j删除边和顶点的脚本" class="headerlink" title="Neo4j删除边和顶点的脚本"></a>Neo4j删除边和顶点的脚本</h1><h1 id="删除边"><a href="#删除边" class="headerlink" title="删除边"></a>删除边</h1><p>/opt/neo4j-enterprise-3.4.18/bin/cypher-shell  “call apoc.periodic.iterate(‘match ()-[r]-() return r’,’delete r’,{batchsize:’100000’,iterateList:true,paraller:true,concurrency:8})”</p>
<h1 id="删除点"><a href="#删除点" class="headerlink" title="删除点"></a>删除点</h1><p>/opt/neo4j-enterprise-3.4.18/bin/cypher-shell  “call apoc.periodic.iterate(‘match (n) return n’,’delete n’,{batchsize:’100000’,iterateList:true,paraller:true,concurrency:8})”</p>
<pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 说明：
<span class="hljs-quote">&gt; 该脚本为删库脚本，需要删库的时候<span class="hljs-strong">**先执行删除边**</span>脚本<span class="hljs-strong">**再执行删除点**</span>脚本</span>

<span class="hljs-section">## 3.2 服务崩溃自动启动脚本</span>
<span class="hljs-bullet">-</span> 路径：
<span class="hljs-quote">&gt; /opt/neo4j-enterprise-3.4.18/bin/selfStartUp.sh</span>

<span class="hljs-bullet">-</span> 内容：</code></pre>
<p>check_point(){<br>    echo “端口检测”<br>    netstat -tlpn grep “\b$1\b”<br>}<br>while true<br>do<br>if check_point 7474<br>then<br>    echo “已存在”<br>else<br>    echo “不在”<br>    ./neo4j start<br>fi<br>  sleep 10m<br>done</p>
<p>```</p>
<ul>
<li>说明：</li>
</ul>
<blockquote>
<p>该脚本需要在<strong>集群的三台机器上</strong>常驻执行，neo4j安装后执行<code>nohup  selfStartUp.sh  &amp; </code>启动</p>
</blockquote>
]]></content>
      <categories>
        <category>图数据库</category>
      </categories>
      <tags>
        <tag>neo4j</tag>
        <tag>图数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/2019/12/19/linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h2><h3 id="1-1-基础命令"><a href="#1-1-基础命令" class="headerlink" title="1.1 基础命令"></a>1.1 基础命令</h3><ul>
<li>程序挂到后台运行<pre><code class="hljs awk">nohup python3 scala.py &amp;    <span class="hljs-regexp">//</span>不指定日志输出文件，程序后台运行，并且日志默认输出到nohup.out中
nohup python3 scala.py &gt; log.file <span class="hljs-number">2</span> &gt;&amp;<span class="hljs-number">1</span> &amp; <span class="hljs-regexp">//</span>指定日志输出文件，程序后台运行，并且日志重定向到log.file中
nohup python3 scala.py &gt; <span class="hljs-regexp">/dev/</span>null <span class="hljs-number">2</span> &gt;&amp;<span class="hljs-number">1</span> &amp; 
<span class="hljs-regexp">//</span>不生成日志文件（<span class="hljs-regexp">/dev/</span>null相当于黑洞），程序后台运行</code></pre></li>
<li>进程查询<pre><code class="hljs awk">ps ux     <span class="hljs-regexp">//</span>查看所有进程 
ps -a     <span class="hljs-regexp">//</span>任务管理器
ps ux grep | <span class="hljs-string">&#x27;python3&#x27;</span>   <span class="hljs-regexp">//</span>进程筛选，返回包含python3字符的进程</code></pre></li>
<li>在命令行中将一个命令的结果传给另一个命令当参数使用‘$(command)’方法<pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">spark</span></span>-submit .......... arg[<span class="hljs-number">0</span>]  arg[<span class="hljs-number">1</span>] <span class="hljs-comment">//原命令语句</span>
<span class="hljs-comment">//现在需要获取当前日期传给以上命令当参数</span>
<span class="hljs-function"><span class="hljs-title">spark</span></span>-submit .......... <span class="hljs-symbol">$</span>(date +%F)  <span class="hljs-symbol">$</span>(date +%F)或者
<span class="hljs-function"><span class="hljs-title">spark</span></span>-submit .......... `date +%F`  `date +%F`

<span class="hljs-comment">//date +%F:获取当前时间命令，使用$(command)就可以把date方法的结果传入上述语句中</span></code></pre>
<h3 id="1-2-进程管理（pgrep，systemd，nohup-amp-，screen的区别）"><a href="#1-2-进程管理（pgrep，systemd，nohup-amp-，screen的区别）" class="headerlink" title="1.2 进程管理（pgrep，systemd，nohup+&amp;，screen的区别）"></a>1.2 进程管理（pgrep，systemd，nohup+&amp;，screen的区别）</h3></li>
</ul>
<p><strong>1. pgrep</strong></p>
<blockquote>
<p>pgrep是首字母缩略词，代表“Process-ID Global Regular Expressions Print”。<br>pgrep查看当前正在运行的进程，并将与选择条件匹配的进程ID列出到stdout（屏幕）。当你想要某个进程的PID时，pgrep很方便。<br>例如，如果我只想知道我的nginx进程的进程ID，使用pgrep nginx将返回进程ID 值,如：</p>
</blockquote>
<pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>vm1 ~]# pgrep nginx
<span class="hljs-number">71982</span>
<span class="hljs-number">71984</span>
[<span class="hljs-symbol">root@</span>vm1 ~]#</code></pre>
<ol start="2">
<li>systemd<blockquote>
<p>systemd即为system daemon,是linux下的一种init软件,由Lennart Poettering带头开发,并在LGPL2.1及其后续版本许可证下开源发布,开发目标是<strong>提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低Shell的系统开销的效果</strong>，最终代替常用的System V与BSD风格init程序。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>与多数发行版使用的System V风格init相比，systemd采用了以下新技术： (1) 采用Socket激活式与总线激活式服务，以提高相互依赖的各服务的并行运行性能； (2) 用Cgroups代替PID来追踪进程，以此即使是两次fork之后生成的守护进程也不会脱离systemd的控制。</p>
</blockquote>
<ol start="3">
<li>nohup+&amp;<blockquote>
<p>&amp;是指在后台运行一般在执行命令后，都会显式的在前台执行，当Ctrl+C后进程回宕掉，但是 在命令后加&amp;,即使Ctrl+C，程序还在进行，但是，当关闭Xshell后，程序就会宕掉。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>nohup是指忽略SiGHUP信号，当关掉Xshell后，程序会一直存在，但是当执行Ctrl+C后程序还是会宕掉。</p>
</blockquote>
<ol start="4">
<li>screen<blockquote>
<p>Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。</p>
</blockquote>
<blockquote>
<p><strong>只要Screen本身没有终止，在其内部运行的会话都可以恢复</strong>。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令 行会话的控制。只要再次登录到主机上执行screen  -r就可以恢复会话的运行</p>
</blockquote>
<ol start="5">
<li>其他：grep<blockquote>
<p>grep是“Global Regular Expressions Print”的首字母缩写词，意为全局正则表达式打印。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>grep是一个逐行扫描指定文件或文件的程序，返回包含模式的行。模式是一种表达式，它通过将字符解释为元字符来指定一组字符串。例如，星号元字符（*）被解释为“前面元素的零个或多个”。这使用户能够在grep命令中键入一系列短字符和元字符，以使计算机向我们显示哪些文件匹配的行。<br>一些常见的标志如下：</p>
</blockquote>
<pre><code class="hljs diff"><span class="hljs-deletion">-c 用于计算成功匹配的数量而不打印实际匹配</span>
<span class="hljs-deletion">-i 以使搜索大小写不敏感</span>
<span class="hljs-deletion">-n 在每个匹配打印输出之前打印行号</span>
<span class="hljs-deletion">-v 以获取正则表达式的补码（即返回行不匹配）</span>
<span class="hljs-deletion">-l 打印带有与表达式匹配的行的文件的文件名</span></code></pre>]]></content>
      <categories>
        <category>编程语言特性相关</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习</title>
    <url>/2019/11/14/git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1-如何将本地代码更新到github上面"><a href="#1-如何将本地代码更新到github上面" class="headerlink" title="1. 如何将本地代码更新到github上面"></a>1. 如何将本地代码更新到github上面</h2><ol>
<li>在github上面手动创建仓库</li>
<li>到本地文件夹初始化本地仓库<pre><code class="hljs csharp">git <span class="hljs-keyword">init</span>
git remote <span class="hljs-keyword">add</span> origin XXX.git(github仓库地址)</code></pre></li>
<li>将代码添加到仓库里面<pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .</span></code></pre>
此时可以用 git status 查看仓库状态</li>
<li>提交代码<pre><code class="hljs maxima">git commit -m <span class="hljs-string">&quot;提交说明&quot;</span>：提交代码到仓库
git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master：提交到github上的<span class="hljs-built_in">origin</span>节点下</code></pre>


</li>
</ol>
<h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h2><ul>
<li>git reset <blockquote>
<p>分支回退，只在本地回退，不影响远程分支</p>
</blockquote>
</li>
<li>git revert<blockquote>
<p>分支回退，影响远程分支</p>
</blockquote>
</li>
<li>git cherry-pick c1<blockquote>
<p>将分支复制到另外分支地方</p>
</blockquote>
</li>
<li>git merge c1<blockquote>
<p>将默认分支合并到c1</p>
</blockquote>
</li>
<li>git rebase <blockquote>
<p>分支移动</p>
</blockquote>
</li>
<li>git commit <blockquote>
<p>提交记录</p>
</blockquote>
</li>
<li>git branch newName<blockquote>
<p>创建新分支</p>
</blockquote>
</li>
</ul>
<h1 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h1><p>配置 Git 的相关参数。</p>
<ul>
<li><p>查看配置信息</p>
</li>
<li><p>–local：仓库级，–global：全局级，–system：系统级</p>
<blockquote>
<p>git config &lt;–local | –global | –system&gt; -l</p>
</blockquote>
</li>
<li><p>查看当前生效的配置信息</p>
<blockquote>
<p>git config -l</p>
</blockquote>
</li>
<li><p>编辑配置文件</p>
</li>
<li><p>–local：仓库级，–global：全局级，–system：系统级</p>
<blockquote>
<p>git config &lt;–local | –global | –system&gt; -e</p>
</blockquote>
</li>
<li><p>添加配置项</p>
</li>
<li><p>–local：仓库级，–global：全局级，–system：系统级</p>
<blockquote>
<p>git config &lt;–local | –global | –system&gt; –add <name> <value></p>
</blockquote>
</li>
<li><p>获取配置项</p>
<blockquote>
<p>git config &lt;–local | –global | –system&gt; –get <name></p>
</blockquote>
</li>
<li><p>删除配置项</p>
<blockquote>
<p>git config &lt;–local | –global | –system&gt; –unset <name></p>
</blockquote>
</li>
<li><p>配置提交记录中的用户信息</p>
<blockquote>
<p>git config –global user.name &lt;用户名&gt;<br>git config –global user.email &lt;邮箱地址&gt;</p>
</blockquote>
</li>
<li><p>更改Git缓存区的大小,如果提交的内容较大，默认缓存较小，提交会失败,缓存大小单位：B，例如：524288000（500MB）</p>
<blockquote>
<p>git config –global http.postBuffer &lt;缓存大小&gt;</p>
</blockquote>
</li>
<li><p>调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</p>
<blockquote>
<p>git config –global color.ui true</p>
</blockquote>
</li>
<li><p>配置可以缓存密码，默认缓存时间15分钟</p>
<blockquote>
<p>git config –global credential.helper cache</p>
</blockquote>
</li>
<li><p>配置密码的缓存时间,缓存时间单位：秒</p>
<blockquote>
<p>git config –global credential.helper ‘cache –timeout=&lt;缓存时间&gt;’</p>
</blockquote>
</li>
<li><p>配置长期存储密码</p>
<blockquote>
<p>git config –global credential.helper store</p>
</blockquote>
</li>
</ul>
<h1 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h1><p>从远程仓库克隆一个版本库到本地。</p>
<p>git clone<br>从远程仓库克隆一个版本库到本地。</p>
<ul>
<li><p>默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</p>
<blockquote>
<p>git clone &lt;远程仓库的网址&gt;</p>
</blockquote>
</li>
<li><p>指定本地仓库的目录</p>
<blockquote>
<p>git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt;</p>
</blockquote>
</li>
<li><p>-b 指定要克隆的分支，默认是master分支</p>
<blockquote>
<p>git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h1><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p>
<ul>
<li>初始化本地仓库，在当前目录下生成 .git 文件夹<blockquote>
<p>git init</p>
</blockquote>
</li>
</ul>
<h1 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h1><p>查看本地仓库的状态。</p>
<ul>
<li><p>查看本地仓库的状态</p>
<blockquote>
<p>git status</p>
</blockquote>
</li>
<li><p>以简短模式查看本地仓库的状态</p>
</li>
<li><p>会显示两列，第一列是文件的状态，第二列是对应的文件</p>
</li>
<li><p>文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</p>
<blockquote>
<p>git status -s</p>
</blockquote>
</li>
</ul>
<h1 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h1><p>操作远程库。</p>
<ul>
<li><p>列出已经存在的远程仓库</p>
<blockquote>
<p>git remote</p>
</blockquote>
</li>
<li><p>列出远程仓库的详细信息，在别名后面列出URL地址</p>
<blockquote>
<p>git remote -v<br>git remote –verbose</p>
</blockquote>
</li>
<li><p>添加远程仓库</p>
<blockquote>
<p>git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;</p>
</blockquote>
</li>
<li><p>修改远程仓库的别名</p>
<blockquote>
<p>git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</p>
</blockquote>
</li>
<li><p>删除指定名称的远程仓库</p>
<blockquote>
<p>git remote remove &lt;远程仓库的别名&gt;</p>
</blockquote>
</li>
<li><p>修改远程仓库的 URL 地址</p>
<blockquote>
<p>git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h1><p>操作 Git 的分支命令。</p>
<ul>
<li><p>列出本地的所有分支，当前所在分支以 “*” 标出</p>
<blockquote>
<p>git branch</p>
</blockquote>
</li>
<li><p>列出本地的所有分支并显示最后一次提交，当前所在分支以 “*” 标出</p>
<blockquote>
<p>git branch -v</p>
</blockquote>
</li>
<li><p>创建新分支，新的分支基于上一次提交建立</p>
<blockquote>
<p>git branch &lt;分支名&gt;</p>
</blockquote>
</li>
<li><p>修改分支名称</p>
</li>
<li><p>如果不指定原分支名称则为当前所在分支</p>
<blockquote>
<p>git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</p>
</blockquote>
</li>
<li><p>强制修改分支名称</p>
<blockquote>
<p>git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</p>
</blockquote>
</li>
<li><p>删除指定的本地分支</p>
<blockquote>
<p>git branch -d &lt;分支名称&gt;</p>
</blockquote>
</li>
<li><p>强制删除指定的本地分支</p>
<blockquote>
<p>git branch -D &lt;分支名称&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h1><p>检出命令，用于创建、切换分支等。</p>
<ul>
<li><p>切换到已存在的指定分支</p>
<blockquote>
<p>git checkout &lt;分支名称&gt;</p>
</blockquote>
</li>
<li><p>创建并切换到指定的分支，保留所有的提交记录</p>
</li>
<li><p>等同于 “git branch” 和 “git checkout” 两个命令合并</p>
<blockquote>
<p>git checkout -b &lt;分支名称&gt;</p>
</blockquote>
</li>
<li><p>创建并切换到指定的分支，删除所有的提交记录</p>
<blockquote>
<p>git checkout –orphan &lt;分支名称&gt;</p>
</blockquote>
</li>
<li><p>替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</p>
<blockquote>
<p>git checkout &lt;文件路径&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h1><p>把已经提交的记录合并到当前分支。</p>
<ul>
<li>把已经提交的记录合并到当前分支<blockquote>
<p>git cherry-pick <commit ID></p>
</blockquote>
</li>
</ul>
<h1 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h1><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。</p>
<ul>
<li><p>把指定的文件添加到暂存区中</p>
<blockquote>
<p>git add &lt;文件路径&gt;</p>
</blockquote>
</li>
<li><p>添加所有修改、已删除的文件到暂存区中</p>
<blockquote>
<p>git add -u [&lt;文件路径&gt;]<br>git add –update [&lt;文件路径&gt;]</p>
</blockquote>
</li>
<li><p>添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</p>
<blockquote>
<p>git add -A [&lt;文件路径&gt;]<br>git add –all [&lt;文件路径&gt;]</p>
</blockquote>
</li>
<li><p>查看所有修改、已删除但没有提交的文件，进入一个子命令系统</p>
<blockquote>
<p>git add -i [&lt;文件路径&gt;]<br>git add –interactive [&lt;文件路径&gt;]</p>
</blockquote>
</li>
</ul>
<h1 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h1><p>将暂存区中的文件提交到本地仓库中。</p>
<ul>
<li><p>把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</p>
<blockquote>
<p>git commit</p>
</blockquote>
</li>
<li><p>把暂存区中的文件提交到本地仓库中并添加描述信息</p>
<blockquote>
<p>git commit -m “&lt;提交的描述信息&gt;”</p>
</blockquote>
</li>
<li><p>把所有修改、已删除的文件提交到本地仓库中</p>
</li>
<li><p>不包括未被版本库跟踪的文件，等同于先调用了 “git add -u”</p>
<blockquote>
<p>git commit -a -m “&lt;提交的描述信息&gt;”</p>
</blockquote>
</li>
<li><p>修改上次提交的描述信息</p>
<blockquote>
<p>git commit –amend</p>
</blockquote>
</li>
</ul>
<h1 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h1><p>从远程仓库获取最新的版本到本地的 tmp 分支上。</p>
<ul>
<li><p>将远程仓库所有分支的最新版本全部取回到本地</p>
<blockquote>
<p>git fetch &lt;远程仓库的别名&gt;</p>
</blockquote>
</li>
<li><p>将远程仓库指定分支的最新版本取回到本地</p>
<blockquote>
<p>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h1><p>合并分支。</p>
<ul>
<li>把指定的分支合并到当前所在的分支下<blockquote>
<p>git merge &lt;分支名称&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h1><p>比较版本之间的差异。</p>
<ul>
<li><p>比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</p>
<blockquote>
<p>git diff</p>
</blockquote>
</li>
<li><p>比较暂存区中的文件和上次提交时的差异</p>
<blockquote>
<p>git diff –cached<br>git diff –staged</p>
</blockquote>
</li>
<li><p>比较当前文件和上次提交时的差异</p>
<blockquote>
<p>git diff HEAD</p>
</blockquote>
</li>
<li><p>查看从指定的版本之后改动的内容</p>
<blockquote>
<p>git diff <commit ID></p>
</blockquote>
</li>
<li><p>比较两个分支之间的差异</p>
<blockquote>
<p>git diff &lt;分支名称&gt; &lt;分支名称&gt;</p>
</blockquote>
</li>
<li><p>查看两个分支分开后各自的改动内容</p>
<blockquote>
<p>git diff &lt;分支名称&gt;…&lt;分支名称&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h1><p>从远程仓库获取最新版本并合并到本地。<br>首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。</p>
<ul>
<li>从远程仓库获取最新版本。<blockquote>
<p>git pull</p>
</blockquote>
</li>
</ul>
<h1 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h1><p>把本地仓库的提交推送到远程仓库。</p>
<ul>
<li><p>把本地仓库的分支推送到远程仓库的指定分支</p>
<blockquote>
<p>git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p>
</blockquote>
</li>
<li><p>删除指定的远程仓库的分支</p>
<blockquote>
<p>git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;<br>git push &lt;远程仓库的别名&gt; –delete &lt;远程分支名&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h1><p>显示提交的记录。</p>
<ul>
<li><p>打印所有的提交记录</p>
<blockquote>
<p>git log</p>
</blockquote>
</li>
<li><p>打印从第一次提交到指定的提交的记录</p>
<blockquote>
<p>git log <commit ID></p>
</blockquote>
</li>
<li><p>打印指定数量的最新提交的记录</p>
<blockquote>
<p>git log -&lt;指定的数量&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h1><p>还原提交记录。</p>
<ul>
<li><p>重置暂存区，但文件不受影响</p>
</li>
<li><p>相当于将用 “git add” 命令更新到暂存区的内容撤出暂存区，可以指定文件</p>
</li>
<li><p>没有指定 commit ID 则默认为当前 HEAD</p>
<blockquote>
<p>git reset [&lt;文件路径&gt;]<br>git reset –mixed [&lt;文件路径&gt;]</p>
</blockquote>
</li>
<li><p>将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</p>
<blockquote>
<p>git reset <commit ID><br>git reset –mixed <commit ID></p>
</blockquote>
</li>
<li><p>将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</p>
</li>
<li><p>相当于调用 “git reset –mixed” 命令后又做了一次 “git add”</p>
<blockquote>
<p>git reset –soft <commit ID></p>
</blockquote>
</li>
<li><p>将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</p>
<blockquote>
<p>git reset –hard <commit ID></p>
</blockquote>
</li>
</ul>
<h1 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h1><p>生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</p>
<ul>
<li>生成一个新的提交来撤销某次提交<blockquote>
<p>git revert <commit ID></p>
</blockquote>
</li>
</ul>
<h1 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h1><p>操作标签的命令。</p>
<ul>
<li><p>打印所有的标签</p>
<blockquote>
<p>git tag</p>
</blockquote>
</li>
<li><p>添加轻量标签，指向提交对象的引用，可以指定之前的提交记录</p>
<blockquote>
<p>git tag &lt;标签名称&gt; [<commit ID>]</p>
</blockquote>
</li>
<li><p>添加带有描述信息的附注标签，可以指定之前的提交记录</p>
<blockquote>
<p>git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [<commit ID>]</p>
</blockquote>
</li>
<li><p>切换到指定的标签</p>
<blockquote>
<p>git checkout &lt;标签名称&gt;</p>
</blockquote>
</li>
<li><p>查看标签的信息</p>
<blockquote>
<p>git show &lt;标签名称&gt;</p>
</blockquote>
</li>
<li><p>删除指定的标签</p>
<blockquote>
<p>git tag -d &lt;标签名称&gt;</p>
</blockquote>
</li>
<li><p>将指定的标签提交到远程仓库</p>
<blockquote>
<p>git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;</p>
</blockquote>
</li>
<li><p>将本地所有的标签全部提交到远程仓库</p>
<blockquote>
<p>git push &lt;远程仓库的别名&gt; –tags</p>
</blockquote>
</li>
</ul>
<h1 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h1><p>重命名文件或者文件夹。</p>
<ul>
<li>重命名指定的文件或者文件夹<blockquote>
<p>git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;</p>
</blockquote>
</li>
</ul>
<h1 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h1><p>删除文件或者文件夹。</p>
<ul>
<li><p>移除跟踪指定的文件，并从本地仓库的文件夹中删除</p>
<blockquote>
<p>git rm &lt;文件路径&gt;</p>
</blockquote>
</li>
<li><p>移除跟踪指定的文件夹，并从本地仓库的文件夹中删除</p>
<blockquote>
<p>git rm -r &lt;文件夹路径&gt;</p>
</blockquote>
</li>
<li><p>移除跟踪指定的文件，在本地仓库的文件夹中保留该文件</p>
<blockquote>
<p>git rm –cached</p>
</blockquote>
</li>
</ul>
<h1 id="Git操作场景示例"><a href="#Git操作场景示例" class="headerlink" title="Git操作场景示例"></a>Git操作场景示例</h1><ol>
<li>删除掉本地不存在的远程分支<br>多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 git branch –all 依然会显示该远程分支，可使用下列的命令进行删除：</li>
</ol>
<ul>
<li><p>使用 pull 命令，添加 -p 参数</p>
<blockquote>
<p>git pull -p</p>
</blockquote>
</li>
<li><p>等同于下面的命令</p>
<blockquote>
<p>git fetch -p<br>git fetch –prune origin</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言特性相关</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>redis相关</title>
    <url>/2019/12/19/redis%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="1-redis相关"><a href="#1-redis相关" class="headerlink" title="1. redis相关"></a>1. redis相关</h2><h3 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1 基础知识"></a>1.1 基础知识</h3><ol>
<li>为什么使用redis<blockquote>
<p>性能：<br>我们在碰到需要执行耗时特别久，且结果不频繁变动的SQL，就特别适合将运行结果放入缓存。这样，后面的请求就去缓存中读取，使得请求能够迅速响应。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>并发：<br>在大并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常。这个时候，就需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库。<br>2. 使用redis有什么缺点</p>
</blockquote>
<blockquote>
<p>缓存和数据库双写一致性问题</p>
</blockquote>
<blockquote>
<p>缓存雪崩问题</p>
</blockquote>
<blockquote>
<p>缓存击穿问题</p>
</blockquote>
<blockquote>
<p>缓存的并发竞争问题</p>
</blockquote>
<ol start="3">
<li>单线程的redis为什么这么快</li>
</ol>
<blockquote>
<p>纯内存操作</p>
</blockquote>
<blockquote>
<p>单线程操作，避免了频繁的上下文切换</p>
</blockquote>
<blockquote>
<p>采用了非阻塞I/O多路复用机制:<br>简单来说，就是。我们的redis-client在操作的时候，会产生具有不同事件类型的socket。在服务端，有一段I/0多路复用程序，将其置入队列之中。然后，文件事件分派器，依次去队列中取，转发到不同的事件处理器中。</p>
</blockquote>
<ol start="4">
<li>redis的数据类型，以及每种数据类型的使用场景</li>
</ol>
<blockquote>
<p>String</p>
</blockquote>
<p>这个其实没啥好说的，最常规的set/get操作，value可以是String也可以是数字。一般做一些复杂的计数功能的缓存。</p>
<blockquote>
<p>hash</p>
</blockquote>
<p>这里value存放的是结构化的对象，比较方便的就是操作其中的某个字段。博主在做单点登录的时候，就是用这种数据结构存储用户信息，以cookieId作为key，设置30分钟为缓存过期时间，能很好的模拟出类似session的效果。</p>
<blockquote>
<p>list</p>
</blockquote>
<p>使用List的数据结构，可以做简单的消息队列的功能。另外还有一个就是，可以利用lrange命令，做基于redis的分页功能，性能极佳，用户体验好。本人还用一个场景，很合适—取行情信息。就也是个生产者和消费者的场景。LIST可以很好的完成排队，先进先出的原则。</p>
<blockquote>
<p>set</p>
</blockquote>
<p>因为set堆放的是一堆不重复值的集合。所以可以做全局去重的功能。为什么不用JVM自带的Set进行去重？因为我们的系统一般都是集群部署，使用JVM自带的Set，比较麻烦，难道为了一个做一个全局去重，再起一个公共服务，太麻烦了。</p>
<p>另外，就是利用交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能。</p>
<blockquote>
<p>sorted set</p>
</blockquote>
<p>sorted set多了一个权重参数score,集合中的元素能够按score进行排列。可以做排行榜应用，取TOP N操作。</p>
<ol start="5">
<li>redis的过期策略以及内存淘汰机制</li>
</ol>
<blockquote>
<p>redis采用的是定期删除+惰性删除策略。</p>
</blockquote>
<p>为什么不用定时删除策略?</p>
<blockquote>
<p>定时删除,用一个定时器来负责监视key,过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</p>
</blockquote>
<p>定期删除+惰性删除是如何工作的呢?</p>
<blockquote>
<p>定期删除，redis默认每个100ms检查，是否有过期的key,有过期key则删除。需要说明的是，redis不是每个100ms将所有的key检查一次，而是随机抽取进行检查(如果每隔100ms,全部key进行检查，redis岂不是卡死)。因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</p>
</blockquote>
<blockquote>
<p>于是，惰性删除派上用场。也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</p>
</blockquote>
<p>采用定期删除+惰性删除就没其他问题了么?</p>
<blockquote>
<p>不是的，如果定期删除没删除key。然后你也没即时去请求key，也就是说惰性删除也没生效。这样，redis的内存会越来越高。那么就应该采用内存淘汰机制。</p>
</blockquote>
<p>在redis.conf中有一行配置</p>
<p><code># maxmemory-policy volatile-lru</code></p>
<p>该配置就是配内存淘汰策略的</p>
<p>1）noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。应该没人用吧。</p>
<p>2）allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。推荐使用，目前项目在用这种。</p>
<p>3）allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。应该也没人用吧，你不删最少使用Key,去随机删。</p>
<p>4）volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。这种情况一般是把redis既当缓存，又做持久化存储的时候才用。不推荐</p>
<p>5）volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。依然不推荐</p>
<p>6）volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。不推荐</p>
<p>ps：如果没有设置 expire 的key, 不满足先决条件(prerequisites); 那么 volatile-lru, volatile-random 和 volatile-ttl 策略的行为, 和 noeviction(不删除) 基本上一致。</p>
<ol start="6">
<li>redis和数据库双写一致性问题<blockquote>
<p>分析:一致性问题是分布式常见问题，还可以再分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。答这个问题，先明白一个前提。就是如果对数据有强一致性要求，不能放缓存。我们所做的一切，只能保证最终一致性。另外，我们所做的方案其实从根本上来说，只能说降低不一致发生的概率，无法完全避免。因此，有强一致性要求的数据，不能放缓存。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p>
</blockquote>
<ol start="7">
<li>如何应对缓存穿透和缓存雪崩问题</li>
</ol>
<blockquote>
<p>分析:这两个问题，说句实在话，一般中小型传统软件企业，很难碰到这个问题。如果有大并发的项目，流量有几百万左右。这两个问题一定要深刻考虑。</p>
</blockquote>
<p>回答:如下所示</p>
<p>缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。</p>
<p>解决方案:</p>
<p>(一)利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试</p>
<p>(二)采用异步更新策略，无论key是否取到值，都直接返回。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。</p>
<p>(三)提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的Key是否合法有效。如果不合法，则直接返回。</p>
<p>缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p>
<p>解决方案:</p>
<p>(一)给缓存的失效时间，加上一个随机值，避免集体失效。</p>
<p>(二)使用互斥锁，但是该方案吞吐量明显下降了。</p>
<p>(三)双缓存。我们有两个缓存，缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作。然后细分以下几个小点</p>
<p>I 从缓存A读数据库，有则直接返回</p>
<p>II A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程。</p>
<p>III 更新线程同时更新缓存A和缓存B。</p>
<ol start="8">
<li>如何解决redis的并发竞争key问题</li>
</ol>
<blockquote>
<p>分析:这个问题大致就是，同时有多个子系统去set一个key。这个时候要注意什么呢？大家思考过么。需要说明一下，博主提前百度了一下，发现答案基本都是推荐用redis事务机制。博主不推荐使用redis的事务机制。因为我们的生产环境，基本都是redis集群环境，做了数据分片操作。你一个事务中有涉及到多个key操作的时候，这多个key不一定都存储在同一个redis-server上。因此，redis的事务机制，十分鸡肋。</p>
</blockquote>
<p>回答:如下所示</p>
<p>(1)如果对这个key操作，不要求顺序</p>
<p>这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可，比较简单。</p>
<p>(2)如果对这个key操作，要求顺序</p>
<p>假设有一个key1,系统A需要将key1设置为valueA,系统B需要将key1设置为valueB,系统C需要将key1设置为valueC.</p>
<p>期望按照key1的value值按照 valueA–&gt;valueB–&gt;valueC的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。假设时间戳如下</p>
<p>系统A key 1 {valueA 3:00}</p>
<p>系统B key 1 {valueB 3:05}</p>
<p>系统C key 1 {valueC 3:10}</p>
<p>那么，假设这会系统B先抢到锁，将key1设置为{valueB 3:05}。接下来系统A抢到锁，发现自己的valueA的时间戳早于缓存中的时间戳，那就不做set操作了。以此类推。</p>
<p>其他方法，比如利用队列，将set方法变成串行访问也可以。总之，灵活变通。</p>
<ol start="9">
<li>Reids的特点</li>
</ol>
<p>Redis本质上是一个Key-Value类型的内存数据库，很像memcached，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。</p>
<p>Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像 memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能，比方说用他的List来做FIFO双向链表，实现一个轻量级的高性 能消息队列服务，用他的Set可以做高性能的tag系统等等。另外Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一 个功能加强版的memcached来用。</p>
<p>Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</p>
<ol start="10">
<li>使用redis有哪些好处？</li>
</ol>
<p>(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</p>
<p>(2) 支持丰富数据类型，支持string，list，set，sorted set，hash</p>
<p>(3) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</p>
<p>(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p>
<p>​    </p>
<h3 id="1-2-数据结构-跳跃表（跳跃链表）"><a href="#1-2-数据结构-跳跃表（跳跃链表）" class="headerlink" title="1.2 数据结构-跳跃表（跳跃链表）"></a>1.2 数据结构-跳跃表（跳跃链表）</h3><blockquote>
<p>跳跃表是一种简单，高效的快速查找结构，实现起来成本最小，并且速度也很快，只需要一个图就可以完美的解释跳跃表的样子，而且对于编程人员来说，要实现一个跳跃表看着图就能实现，以下就是跳跃表的结构图，没有什么难度。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>redies</tag>
      </tags>
  </entry>
  <entry>
    <title>从0开始学大数据笔记</title>
    <url>/2019/12/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1-感想"><a href="#1-感想" class="headerlink" title="1.感想"></a>1.感想</h1><p>融会贯通</p>
<h2 id="2-1-章节摘录"><a href="#2-1-章节摘录" class="headerlink" title="2.1 章节摘录"></a>2.1 章节摘录</h2><h3 id="2-1-1-07-为什么说MapReduce既是编程模型又是计算框架？"><a href="#2-1-1-07-为什么说MapReduce既是编程模型又是计算框架？" class="headerlink" title="2.1.1 07 | 为什么说MapReduce既是编程模型又是计算框架？"></a>2.1.1 07 | 为什么说MapReduce既是编程模型又是计算框架？</h3><blockquote>
<p>模型是人们对一类事物的概括与抽象，可以帮助我们更好地理解事物的本质，更方便地解决问题。比如，数学公式是我们对物理与数学规律的抽象，地图和沙盘是我们对地理空间的抽象，软件架构图是软件工程师对软件系统的抽象。</p>
</blockquote>
<blockquote>
<p>通过抽象，我们更容易把握事物的内在规律，而不是被纷繁复杂的事物表象所迷惑，更进一步深刻地认识这个世界。通过抽象，伽利略发现力是改变物体运动的原因，而不是使物体运动的原因，为全人类打开了现代科学的大门。</p>
</blockquote>
<blockquote>
<p>这些年，我自己认识了很多优秀的人，他们各有所长、各有特点，但是无一例外都有个共同的特征，就是对事物的洞察力。他们能够穿透事物的层层迷雾，直指问题的核心和要害，不会犹豫和迷茫，轻松出手就搞定了其他人看起来无比艰难的事情。有时候光是看他们做事就能感受到一种美感，让人意醉神迷。</p>
</blockquote>
<blockquote>
<p>这种洞察力就是来源于他们对事物的抽象能力，虽然我不知道这种能力缘何而来，但是见识了这种能力以后，我也非常渴望拥有对事物的抽象能力。所以在遇到问题的时候，我就会停下来思考：这个问题为什么会出现，它揭示出来背后的规律是什么，我应该如何做。甚至有时候会把这些优秀的人带入进思考：如果是戴老师、如果是潘大侠，他会如何看待、如何解决这个问题。通过这种不断地训练，虽然和那些最优秀的人相比还是有巨大的差距，但是仍然能够感受到自己的进步，这些小小的进步也会让自己产生大大的快乐，一种不荒废光阴、没有虚度此生的感觉。</p>
</blockquote>
<blockquote>
<p>我希望你也能够不断训练自己，遇到问题的时候，停下来思考一下：这些现象背后的规律是什么。有时候并不需要多么艰深的思考，仅仅就是停一下，就会让你察觉到以前不曾注意到的一些情况，进而发现事物的深层规律。这就是洞察力。</p>
</blockquote>
<h3 id="2-1-2-06-新技术层出不穷，HDFS依然是存储的王者"><a href="#2-1-2-06-新技术层出不穷，HDFS依然是存储的王者" class="headerlink" title="2.1.2 06 | 新技术层出不穷，HDFS依然是存储的王者"></a>2.1.2 06 | 新技术层出不穷，HDFS依然是存储的王者</h3><ul>
<li>1.如何设计分布式文件系统<blockquote>
<p>DataNode 负责文件数据的存储和读写操作，HDFS 将文件数据分割成若干数据块（Block），每个 DataNode 存储一部分数据块，这样文件就分布存储在整个 HDFS 服务器集群中.<br>NameNode 负责整个分布式文件系统的元数据（MetaData）管理，也就是文件路径名、数据块的 ID 以及存储位置等信息，相当于操作系统中文件分配表（FAT）的角色。 </p>
</blockquote>
</li>
</ul>
<blockquote>
<p>NameNode 负责整个分布式文件系统的元数据（MetaData）管理，也就是文件路径名、数据块的 ID 以及存储位置等信息，相当于操作系统中文件分配表（FAT）的角色</p>
</blockquote>
<ul>
<li>2.HDFS的高可用设计</li>
</ul>
<ol>
<li>数据存储故障容错<blockquote>
<p>磁盘介质在存储过程中受环境或者老化影响，其存储的数据可能会出现错乱。HDFS 的应对措施是，对于存储在 DataNode 上的数据块，计算并存储校验和（CheckSum）。在读取数据的时候，重新计算读取出来的数据的校验和，如果校验不正确就抛出异常，应用程序捕获异常后就到其他 DataNode 上读取备份数据。</p>
</blockquote>
</li>
<li>磁盘故障容错<blockquote>
<p>如果 DataNode 监测到本机的某块磁盘损坏，就将该块磁盘上存储的所有 BlockID 报告给 NameNode，NameNode 检查这些数据块还在哪些 DataNode 上有备份，通知相应的 DataNode 服务器将对应的数据块复制到其他服务器上，以保证数据块的备份数满足要求。</p>
</blockquote>
</li>
<li>DataNode 故障容错<blockquote>
<p>DataNode 会通过心跳和 NameNode 保持通信，如果 DataNode 超时未发送心跳，NameNode 就会认为这个 DataNode 已经宕机失效，立即查找这个 DataNode 上存储的数据块有哪些，以及这些数据块还存储在哪些服务器上，随后通知这些服务器再复制一份数据块到其他服务器上，保证 HDFS 存储的数据块备份数符合用户设置的数目，即使再出现服务器宕机，也不会丢失数据。</p>
</blockquote>
</li>
<li>NameNode 故障容错<blockquote>
<p>NameNode 是整个 HDFS 的核心，记录着 HDFS 文件分配表信息，所有的文件路径和数据块存储信息都保存在 NameNode，如果 NameNode 故障，整个 HDFS 系统集群都无法使用；如果 NameNode 上记录的数据丢失，整个集群所有 DataNode 存储的数据也就没用了。</p>
</blockquote>
</li>
</ol>
<h3 id="2-1-3-13-同样的本质，为何Spark可以更高效？"><a href="#2-1-3-13-同样的本质，为何Spark可以更高效？" class="headerlink" title="2.1.3 13 | 同样的本质，为何Spark可以更高效？"></a>2.1.3 13 | 同样的本质，为何Spark可以更高效？</h3><ol>
<li>spark的计算阶段<blockquote>
<p>MapReduce 一个应用一次只运行一个 map 和一个 reduce 不同，Spark 可以根据应用的复杂程度，分割成更多的计算阶段（stage），这些计算阶段组成一个有向无环图 DAG，Spark 任务调度器可以根据 DAG 的依赖关系执行计算阶段。</p>
</blockquote>
<h3 id="2-1-4-18-如何自己开发一个大数据SQL引擎？"><a href="#2-1-4-18-如何自己开发一个大数据SQL引擎？" class="headerlink" title="2.1.4 18 | 如何自己开发一个大数据SQL引擎？"></a>2.1.4 18 | 如何自己开发一个大数据SQL引擎？</h3><blockquote>
<p>如果只是作为学习者，被动接受总是困难的。但如果从开发者的视角看，很多东西就豁然开朗了，明白了原理，有时甚至不需要学习，顺着原理就可以推导出各种实现细节。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>各种知识从表象上看，总是杂乱无章的，如果只是学习这些繁杂的知识点，固然自己的知识面是有限的，并且遇到问题的应变能力也很难提高。所以有些高手看起来似乎无所不知，不论谈论起什么技术，都能头头是道，其实并不是他们学习、掌握了所有技术，而是他们是在谈到这个问题的时候，才开始进行推导，并迅速得出结论。</p>
</blockquote>
<blockquote>
<p>我在 Intel 的时候，面试过一个交大的实习生，她大概只学过一点 MapReduce 的基本知识，我问她如何用 MapReduce 实现数据库的 join 操作，可以明显看出她没学习过这部分知识。她说：我想一下，然后盯着桌子看了两三秒的时间，就开始回答，基本跟 Hive 的实现机制一样。从她的回答就能看出这个女生就是一个高手，高手不一定要很资深、经验丰富，把握住了技术的核心本质，掌握了快速分析推导的能力，能够迅速将自己的知识技能推进到陌生的领域，就是高手。</p>
</blockquote>
<h2 id="2-1-4-23-大数据基准测试可以带来什么好处？"><a href="#2-1-4-23-大数据基准测试可以带来什么好处？" class="headerlink" title="2.1.4 23 | 大数据基准测试可以带来什么好处？"></a>2.1.4 23 | 大数据基准测试可以带来什么好处？</h2><p>大数据测试工具：HiBeach<br>HiBench 内置了若干主要的大数据计算程序作为基准测试的负载（workload）。</p>
<h2 id="2-1-5-24-从大数据性能测试工具Dew看如何快速开发大数据系统"><a href="#2-1-5-24-从大数据性能测试工具Dew看如何快速开发大数据系统" class="headerlink" title="2.1.5 24 | 从大数据性能测试工具Dew看如何快速开发大数据系统"></a>2.1.5 24 | 从大数据性能测试工具Dew看如何快速开发大数据系统</h2><h3 id="1-Akka-原理与应用"><a href="#1-Akka-原理与应用" class="headerlink" title="1. Akka 原理与应用"></a>1. Akka 原理与应用</h3><blockquote>
<p>Akka 使用一种叫 Actor 的编程模型，Actor 编程模型是和面向对象编程模型平行的一种编程模型。面向对象认为一切都是对象，对象之间通过消息传递，也就是方法调用实现复杂的功能。</p>
</blockquote>
<blockquote>
<p>而 Actor 编程模型认为一切都是 Actor，Actor 之间也是通过消息传递实现复杂的功能，但是这里的消息是真正意义上的消息。不同于面向对象编程时，方法调用是同步阻塞的，也就是被调用者在处理完成之前，调用者必须阻塞等待；给 Actor 发送消息不需要等待 Actor 处理，消息发送完就不用管了，也就是说，消息是<strong>异步</strong>的。</p>
</blockquote>
<h3 id="2-主要原理"><a href="#2-主要原理" class="headerlink" title="2. 主要原理"></a>2. 主要原理</h3><blockquote>
<p>Akka 实现异步消息的主要原理是，Actor 之间的消息传输是通过一个收件箱 Mailbox 完成的，发送者 Actor 的消息发到接收者 Actor 的收件箱，接收者 Actor 一个接一个地串行从收件箱取消息调用自己的 receive 方法进行处理。如下图<br><a href="https://static001.geekbang.org/resource/image/26/13/269b28c63c69444dd9dcb0c3124e0713.png">https://static001.geekbang.org/resource/image/26/13/269b28c63c69444dd9dcb0c3124e0713.png</a></p>
</blockquote>
<blockquote>
<p>发送者通过调用一个 Actor 的引用 ActorRef 来发送消息，ActorRef 将消息放到 Actor 的 Mailbox 里就返回了，发送者不需要阻塞等待消息被处理，这是和传统的面向对象编程最大的不同，对象一定要等到被调用者返回结果才继续向下执行。</p>
</blockquote>
<blockquote>
<p>通过这种异步消息方式，Akka 也顺便实现了并发编程：消息同时异步发送给多个 Actor，这些 Actor 看起来就是在同时执行，即并发执行。</p>
</blockquote>
<h2 id="2-1-6-25-模块答疑：我能从大厂的大数据开发实践中学到什么？"><a href="#2-1-6-25-模块答疑：我能从大厂的大数据开发实践中学到什么？" class="headerlink" title="2.1.6 25 | 模块答疑：我能从大厂的大数据开发实践中学到什么？"></a>2.1.6 25 | 模块答疑：我能从大厂的大数据开发实践中学到什么？</h2><h3 id="1-学习方法"><a href="#1-学习方法" class="headerlink" title="1. 学习方法"></a>1. 学习方法</h3><p>学习一样新技术的时候，不会到处乱找资料，而是直接读原始论文。通过原始论文掌握核心设计原理以后，如果需要进一步学习，就去官网看官方文档；如果还需要再进一步参与开发，就去读源代码。</p>
<p>我刚开始读论文时感觉很费劲，但是后面习惯以后，发现读论文真的是最快的学习方法，因为最核心的东西就在其中，一旦看懂，就真的懂了，而且可以触类旁通，整个软件从使用到开发，很多细节通过脑补就可以猜个八九不离十。而且越是优秀的产品，越是厉害的作者，论文反而越是容易读懂，可能是因为这些作者是真的高手，自己理得越清楚，写出来的论文越是脉络清晰、结构合理、逻辑严谨。</p>
<h3 id="2-典型的互联网大数据平台的架构。"><a href="#2-典型的互联网大数据平台的架构。" class="headerlink" title="2. 典型的互联网大数据平台的架构。"></a>2. 典型的互联网大数据平台的架构。</h3><p>如图<br><a href="https://static001.geekbang.org/resource/image/5f/1f/5f0515ad5740575ff79ac8c68990071f.png">https://static001.geekbang.org/resource/image/5f/1f/5f0515ad5740575ff79ac8c68990071f.png</a></p>
<h2 id="2-1-7-35-如何利用大数据成为“增长黑客”？"><a href="#2-1-7-35-如何利用大数据成为“增长黑客”？" class="headerlink" title="2.1.7 35 | 如何利用大数据成为“增长黑客”？"></a>2.1.7 35 | 如何利用大数据成为“增长黑客”？</h2><h3 id="1-AARRR-用户增长模型"><a href="#1-AARRR-用户增长模型" class="headerlink" title="1. AARRR 用户增长模型"></a>1. AARRR 用户增长模型</h3><blockquote>
<p>关于用户增长有一个著名的 AARRR 模型，它描述了用户增长的 5 个关键环节，分别是：获取用户（Acquisition）、提高活跃度（Activation）、提高留存率（Retention）、获取收入（Revenue）和自传播（Refer）。<br>获取用户：通过各种推广手段，使产品触达用户并吸引用户，让用户访问我们的产品。</p>
</blockquote>
<blockquote>
<p><strong>提高活跃度</strong>：用户访问我们的产品后，如果发现没意思、体验差，就很难再次打开，产品的价值也就无法实现。因此需要结合产品内容、运营活动各种手段吸引用户，提升产品的活跃度。</p>
</blockquote>
<blockquote>
<p><strong>提高留存率</strong>：留住一个老用户的成本远低于获取一个新用户，而真正为产品带来营收利润的通常是老用户，因此需要提高留存率。提高留存率的常用手段有：针对老用户推出各种优惠和活动；建立会员等级体系，注册时间越长等级越高；对于一段时间没有访问的疑似流失用户进行消息短信推送以实现用户挽回等。</p>
</blockquote>
<blockquote>
<p><strong>获取收</strong>入：做企业不是做慈善，开发、运营互联网产品的最终目的还是为了赚钱，即获取收入。互联网产品收入主要有用户付费和广告收入，有些互联网产品看起来是用户付费，但其实主要营收是广告收入，比如淘宝。<br>自传播：让用户利用利用自己的社交网络进行产品推广就是自传播，几乎所有的互联网产品都有“分享到”这样一个功能按钮，促进用户社交传播。有些产品还会利用“帮我砍价”“帮我抢票”等产品功能推动用户进行分享，实现产品的裂变式传播、病毒式营销。</p>
</blockquote>
<h3 id="2-拼多多如何利用-AARRR-模型实现用户快速增长。"><a href="#2-拼多多如何利用-AARRR-模型实现用户快速增长。" class="headerlink" title="2. 拼多多如何利用 AARRR 模型实现用户快速增长。"></a>2. 拼多多如何利用 AARRR 模型实现用户快速增长。</h3><blockquote>
<p>拼多多是近几年互联网产品中将自传播发挥到极致的一个产品。拼多多用户群体主要为三四线以下城市人群，社交成本比较低，愿意为了砍几块钱发动自己的各种社交资源，因此拼多多就利用“帮好友砍价”这一功能实现产品的快速裂变传播。事实上，拼多多非常准确地抓住了这一群体的社交痛点：交往不多的朋友，与其尬聊维持友谊，不如帮我砍价来的更实惠更亲密。</p>
</blockquote>
<blockquote>
<p><strong>自传播</strong>也是拼多多主要获取用户的手段。比如帮好友砍价时，拼多多会提示“下载 App 可以帮好友砍更多价”，于是用户量呈指数级增长。<br>拼多多为了让新来的用户快速上手、增加活跃度，用户第一次使用拼多多的时候，并不需要注册登录，直接就可以挑选商品和购买，在后面订单环节再让用户注册，这时用户已经产生购买冲动，进行注册也更容易被接受。<br>拼多多通过各种消息推送促使用户打开 App（或者微信小程序），并在开屏页面的优惠信息给用户制造惊喜，达到留存用户的目的。</p>
</blockquote>
<blockquote>
<p>拼多多的主要交易模式为<strong>拼团</strong>，拼团属于冲动型购买，拼多多为了<strong>减少用户的思考时间、维持购买冲动，将购买路径设计得尽可能短，使用户可以尽快完成付费，企业获取收入。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>图数据库nebula-graph的安装与集群部署</title>
    <url>/2020/04/16/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93nebula-graph%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="1-nebula的安装"><a href="#1-nebula的安装" class="headerlink" title="1. nebula的安装"></a>1. nebula的安装</h1><h2 id="1-1-下载nebula的rpm包"><a href="#1-1-下载nebula的rpm包" class="headerlink" title="1.1 下载nebula的rpm包"></a>1.1 下载nebula的rpm包</h2><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> $ wget https://nebula-graph.oss-cn-hangzhou.aliyuncs.com/package/<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-rc<span class="hljs-number">2</span>/nebula-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-rc<span class="hljs-number">2</span>.el<span class="hljs-number">7</span>-<span class="hljs-number">5</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm

<span class="hljs-comment"># centos6的链接格式  </span>
<span class="hljs-comment"># package/$&#123;release_version&#125;/nebula-$&#123;release_version&#125;.el6-5.x86_64.rpm</span>
<span class="hljs-comment"># centos7的链接格式</span>
<span class="hljs-comment"># package/$&#123;release_version&#125;/nebula-$&#123;release_version&#125;.el7-5.x86_64.rpm</span>
</code></pre>
<h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h2><pre><code class="hljs angelscript">$ sudo rpm -ivh nebula<span class="hljs-number">-2019.12</span><span class="hljs-number">.23</span>-nightly.el6<span class="hljs-number">-5.</span>x86_64.rpm</code></pre>
<h2 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3 启动"></a>1.3 启动</h2><pre><code class="hljs awk">$ sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nebula/</span>scripts/nebula.service start all</code></pre>
<h2 id="1-4-查看-Nebula-Graph-服务"><a href="#1-4-查看-Nebula-Graph-服务" class="headerlink" title="1.4 查看 Nebula Graph 服务"></a>1.4 查看 Nebula Graph 服务</h2><pre><code class="hljs awk">$ sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nebula/</span>scripts/nebula.service status all</code></pre>
<h2 id="1-5-连接-Nebula-Graph-服务"><a href="#1-5-连接-Nebula-Graph-服务" class="headerlink" title="1.5 连接 Nebula Graph 服务"></a>1.5 连接 Nebula Graph 服务</h2><pre><code class="hljs routeros">$ sudo /usr/local/nebula/bin/nebula -u<span class="hljs-built_in"> user </span>-p password</code></pre>
<h2 id="1-6-停止-Nebula-Graph-服务"><a href="#1-6-停止-Nebula-Graph-服务" class="headerlink" title="1.6 停止 Nebula Graph 服务"></a>1.6 停止 Nebula Graph 服务</h2><pre><code class="hljs awk">$ sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nebula/</span>scripts/nebula.service stop all</code></pre>

<h1 id="2-集群部署"><a href="#2-集群部署" class="headerlink" title="2. 集群部署"></a>2. 集群部署</h1><h2 id="2-1集群部署ip需要修改的步骤如下："><a href="#2-1集群部署ip需要修改的步骤如下：" class="headerlink" title="2.1集群部署ip需要修改的步骤如下："></a>2.1集群部署ip需要修改的步骤如下：</h2><ol>
<li>“nebula/etc/”文件夹里面的配置文件“nebula-metad.conf”里面的相关ip地址</li>
<li>本地“etc/hosts”里面的hostsip地址</li>
<li>“nebula/etc/nebula-graphd.conf”里面的hostname<pre><code class="hljs elixir">etc/nebula-<span class="hljs-symbol">graphd.conf:</span><span class="hljs-number">26</span><span class="hljs-symbol">:--meta_server_addrs=ng1</span><span class="hljs-symbol">:</span><span class="hljs-number">45500</span>
etc/nebula-<span class="hljs-symbol">graphd.conf:</span><span class="hljs-number">28</span><span class="hljs-symbol">:--local_ip=ng1</span>
etc/nebula-<span class="hljs-symbol">graphd.conf:</span><span class="hljs-number">48</span><span class="hljs-symbol">:--ws_ip=ng1</span></code></pre></li>
<li>添加节点服务器地址<pre><code class="hljs angelscript"># 以下几个文件中的地址都要添加节点地址，用逗号隔开
etc/nebula-storaged.conf:<span class="hljs-number">19</span>:--meta_server_addrs=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">45500</span>
etc/nebula-metad.conf:<span class="hljs-number">20</span>:--meta_server_addrs=<span class="hljs-number">192.168</span><span class="hljs-number">.111</span><span class="hljs-number">.133</span>:<span class="hljs-number">45500</span>
etc/nebula-graphd.conf:<span class="hljs-number">26</span>:--meta_server_addrs=ng2:<span class="hljs-number">45500</span></code></pre></li>
<li>修改nebula的host文件<pre><code class="hljs autoit">[root<span class="hljs-symbol">@ng2</span> scripts]<span class="hljs-meta"># vi graph.hosts </span>
[root<span class="hljs-symbol">@ng2</span> scripts]<span class="hljs-meta"># vi meta.hosts </span>
[root<span class="hljs-symbol">@ng2</span> scripts]<span class="hljs-meta"># vi storage.hosts </span>
<span class="hljs-meta"># 添加如下：</span>
ng1
ng2</code></pre></li>
<li>这个时候应该已经可以登陆了，如下，但是登录从节点每次都需要输入密码。为了方便，下一步需要手动设置ssh免密登录<pre><code class="hljs routeros">[root@ng1 nebula]# ./jiqunRestart.sh 
Processing Meta<span class="hljs-built_in"> Service </span><span class="hljs-built_in">..</span>.
start ng1
The authenticity of host <span class="hljs-string">&#x27;ng1 (::1)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span>
<span class="hljs-string">ECDSA key fingerprint is SHA256:A1I43wcavqxvxEqTh2XYzqdYlXZZVbavUpmoQffE26Y.</span>
<span class="hljs-string">ECDSA key fingerprint is MD5:5d:9c:99:d7:70:51:5f:f0:e5:c7:cc:0d:54:e5:b6:f9.</span>
<span class="hljs-string">Are you sure you want to continue connecting (yes/no)? yes</span>
<span class="hljs-string">Warning: Permanently added &#x27;</span>ng1<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span>
<span class="hljs-string">root@ng1&#x27;</span>s password: 
start ng2
The authenticity of host <span class="hljs-string">&#x27;ng2 (192.168.111.133)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span>
<span class="hljs-string">ECDSA key fingerprint is SHA256:A1I43wcavqxvxEqTh2XYzqdYlXZZVbavUpmoQffE26Y.</span>
<span class="hljs-string">ECDSA key fingerprint is MD5:5d:9c:99:d7:70:51:5f:f0:e5:c7:cc:0d:54:e5:b6:f9.</span>
<span class="hljs-string">Are you sure you want to continue connecting (yes/no)? yes</span>
<span class="hljs-string">Warning: Permanently added &#x27;</span>ng2,192.168.111.133<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span>
<span class="hljs-string">root@ng2&#x27;</span>s password: 
Processing Storage<span class="hljs-built_in"> Service </span><span class="hljs-built_in">..</span>.
start ng1
root@ng1<span class="hljs-string">&#x27;s password: </span>
<span class="hljs-string">start ng2</span>
<span class="hljs-string">root@ng2&#x27;</span>s password: 
Processing Graph<span class="hljs-built_in"> Service </span><span class="hljs-built_in">..</span>.
start ng1
root@ng1<span class="hljs-string">&#x27;s password: </span>
<span class="hljs-string">start ng2</span>
<span class="hljs-string">root@ng2&#x27;</span>s password:</code></pre></li>
<li>配置免密登录</li>
</ol>
<ul>
<li>因为nebula自身是没有从属关系的，这里把ng1当作Master节点，ng2当作slave节点<pre><code class="hljs awk">首先生成 Master 节点的公匙，在Master 节点的终端中执行（因为改过主机名，所以还需要删掉原有的再重新生成一次）：
cd ~/.ssh               <span class="hljs-comment"># 如果没有该目录，先执行一次ssh localhost</span>
rm ./id_rsa*            <span class="hljs-comment"># 删除之前生成的公匙（如果有）</span>
ssh-keygen -t rsa       <span class="hljs-comment"># 一直按回车就可以</span>

让Master节点需能无密码SSH 本机，在 Master节点上执行： 
cat .<span class="hljs-regexp">/id_rsa.pub &gt;&gt; ./</span>authorized_keys

完成后可执行 ssh ng1 验证一下（可能需要输入 yes，成功后执行 <span class="hljs-keyword">exit</span> 返回原来的终端）。接着在 Master 节点将上公匙传输到 ng2 节点：
scp ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub leox@ng2:<span class="hljs-regexp">/home/</span>hadoop/

接着在 ng2 节点上，将 ssh 公匙加入授权：
mkdir ~/.ssh       <span class="hljs-comment"># 如果不存在该文件夹需先创建，若已存在则忽略</span>
cat ~<span class="hljs-regexp">/id_rsa.pub &gt;&gt; ~/</span>.ssh/authorized_keys
rm ~/id_rsa.pub    <span class="hljs-comment"># 用完就可以删掉了</span>

如果有其他 Slave 节点，也要执行将 Master公匙传输到 Slave节点、在 Slave 节点上加入授权这两步。
这样，在Master节点上就可以无密码 SSH 到各个 Slave节点了</code></pre></li>
<li>配置成功后再次启动结果如下<pre><code class="hljs routeros">[root@ng1 nebula]# ./jiqunRestart.sh 
Processing Meta<span class="hljs-built_in"> Service </span><span class="hljs-built_in">..</span>.
start ng1
start ng2
Processing Storage<span class="hljs-built_in"> Service </span><span class="hljs-built_in">..</span>.
start ng1
start ng2
Processing Graph<span class="hljs-built_in"> Service </span><span class="hljs-built_in">..</span>.
start ng1
start ng2
<span class="hljs-comment"># 进入命令行</span>
[root@ng1 nebula]# ./login.sh 
Welcome <span class="hljs-keyword">to</span> Nebula Graph (Version 1.0.0-rc4)
(user@127.0.0.1:3699) [(none)]&gt;</code></pre>

</li>
</ul>
<h1 id="3-可视化安装"><a href="#3-可视化安装" class="headerlink" title="3.可视化安装"></a>3.可视化安装</h1><h2 id="3-1-因为可视化组件需要使用docker安装，所以需要先安装docker"><a href="#3-1-因为可视化组件需要使用docker安装，所以需要先安装docker" class="headerlink" title="3.1 因为可视化组件需要使用docker安装，所以需要先安装docker"></a>3.1 因为可视化组件需要使用docker安装，所以需要先安装docker</h2><pre><code class="hljs awk"><span class="hljs-comment"># 见docker官方安装文档：</span>
https:<span class="hljs-regexp">//</span>docs.docker.com<span class="hljs-regexp">/engine/i</span>nstall<span class="hljs-regexp">/centos/</span><span class="hljs-comment">#install-using-the-repository</span></code></pre>
<h2 id="3-2-安装docker-compose"><a href="#3-2-安装docker-compose" class="headerlink" title="3.2 安装docker-compose"></a>3.2 安装docker-compose</h2><pre><code class="hljs awk">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose</code></pre>

<h2 id="3-3-安装并启动-Nebula-Graph-Studio"><a href="#3-3-安装并启动-Nebula-Graph-Studio" class="headerlink" title="3.3 安装并启动 Nebula Graph Studio"></a>3.3 安装并启动 Nebula Graph Studio</h2><ul>
<li><p>在命令行中输入以下命令，下载 Nebula Graph Studio 安装包。</p>
<pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/vesoft-inc/</span>nebula-web-docker</code></pre></li>
<li><p>在命令行中，进入到安装文件夹 nebula-web-docker(当前放在根目录下面)。</p>
</li>
<li><p>输入 systemctl start docker 启动docker</p>
</li>
<li><p>输入 docker-compose pull &amp;&amp; docker-compose up 启动 Nebula Graph Studio 服务。</p>
<pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">Creating</span></span> docker_importer_1 ... done
<span class="hljs-function"><span class="hljs-title">Creating</span></span> docker_client_1   ... done
<span class="hljs-function"><span class="hljs-title">Creating</span></span> docker_web_1      ... done
<span class="hljs-function"><span class="hljs-title">Creating</span></span> docker_nginx_1    ... done</code></pre>
<blockquote>
<p>这一步可能会出现“ERROR: Couldn’t connect to Docker daemon at http+docker://localhost - is it running?<br>If it’s at a non-standard location, specify the URL with the DOCKER_HOST environment variable.的问题”，是因为需要给用户登录，直接su给root权限启动就可以了</p>
</blockquote>
</li>
<li><p>启动成功，访问: <a href="http://0.0.0.0:7001（本机为192.168.111.135:7001）">http://0.0.0.0:7001（本机为192.168.111.135:7001）</a></p>
</li>
<li><p>配置数据库的相关信息</p>
<pre><code class="hljs angelscript">Host :<span class="hljs-number">192.168</span><span class="hljs-number">.111</span><span class="hljs-number">.135</span>:<span class="hljs-number">3699</span>
用户名:user
密码:password</code></pre>

</li>
</ul>
<h1 id="4-遇到问题及解决"><a href="#4-遇到问题及解决" class="headerlink" title="4. 遇到问题及解决"></a>4. 遇到问题及解决</h1><h2 id="0-1-某个服务无法启动，查看日志中发现”failed-to-set-SO-REUSEPORT-on-async-server-socket-Protocol-not-available”问题。"><a href="#0-1-某个服务无法启动，查看日志中发现”failed-to-set-SO-REUSEPORT-on-async-server-socket-Protocol-not-available”问题。" class="headerlink" title="0.1  某个服务无法启动，查看日志中发现”failed to set SO_REUSEPORT on async server socket Protocol not available”问题。"></a>0.1  某个服务无法启动，查看日志中发现”failed to set SO_REUSEPORT on async server socket Protocol not available”问题。</h2><ul>
<li>问题原因<blockquote>
<p> 使用的版本为centos6.5， 内核版本是小于3.9<br> SO_REUSEPORT 在linux 3.9 及以上才支持的</p>
</blockquote>
</li>
<li>解决方法</li>
</ul>
<blockquote>
<p>修改系统版本为centos7.5 内核版本为3.10即可解决</p>
</blockquote>
]]></content>
      <categories>
        <category>工作相关</category>
      </categories>
      <tags>
        <tag>图数据库</tag>
        <tag>nebula-graph</tag>
      </tags>
  </entry>
  <entry>
    <title>图解十大经典的机器学习算法（转自网络）</title>
    <url>/2018/11/29/%E5%9B%BE%E8%A7%A3%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li>决策树</li>
<li>随机森林</li>
<li>逻辑回归</li>
<li>SVM</li>
<li>bayes</li>
<li>Knn</li>
<li>k-means</li>
<li>Adaboost</li>
<li>神经网络</li>
<li>HMM</li>
</ul>
<a id="more"></a>

<p>下图是一部典型的智能手机上安装的一些常见应用程序，可能很多人都猜不到，人工智能技术已经是手机上很多应用程序的核心驱动力。</p>
<p><img src="https://p3.pstatp.com/large/43500001eb4471788557" alt="image"><br>    图1 智能手机上的相关应用</p>
<p>传统的机器学习算法包括决策树、聚类、贝叶斯分类、支持向量机、EM、Adaboost等等。这篇文章将对常用算法做常识性的介绍，没有代码，也没有复杂的理论推导，就是图解一下，知道这些算法是什么，它们是怎么应用的。</p>
<h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p>根据一些 feature（特征） 进行分类，每个节点提一个问题，通过判断，将数据分为两类，再继续提问。这些问题是根据已有数据学习出来的，再投入新数据的时候，就可以根据这棵树上的问题，将数据划分到合适的叶子上。</p>
<p><img src="https://p3.pstatp.com/large/435200006b668ea633bd" alt="image"><br>图2 决策树原理示意图</p>
<h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><p>在源数据中随机选取数据，组成几个子集：<br><img src="https://p1.pstatp.com/large/434f0001f5ed801daccf" alt="image"></p>
<p>图3-1 随机森林原理示意图</p>
<p>S矩阵是源数据，有1-N条数据，A、B、C 是feature，最后一列C是类别：</p>
<p><img src="https://p1.pstatp.com/large/435200006bcfcb4c5948" alt="image"></p>
<p>由S随机生成M个子矩阵：</p>
<p><img src="https://p1.pstatp.com/large/434f0001f6466bf0d67d" alt="image"></p>
<p>这M个子集得到 M 个决策树：将新数据投入到这M个树中，得到M个分类结果，计数看预测成哪一类的数目最多，就将此类别作为最后的预测结果。</p>
<p> <img src="https://p3.pstatp.com/large/434e00020cea24ad72ac" alt="image"></p>
<p>图3-2 随机森林效果展示图</p>
<h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>当预测目标是概率这样的，值域需要满足大于等于0，小于等于1的，这个时候单纯的线性模型是做不到的，因为在定义域不在某个范围之内时，值域也超出了规定区间。</p>
<p><img src="https://p1.pstatp.com/large/4352000088a0cca901dc" alt="image"></p>
<p>图4-1 线性模型图</p>
<p>所以此时需要这样的形状的模型会比较好：</p>
<p><img src="https://p9.pstatp.com/large/43500002088dadd37cd2" alt="image"></p>
<p>图4-2</p>
<p>那么怎么得到这样的模型呢？</p>
<p>这个模型需要满足两个条件 “大于等于0”，“小于等于1” 。大于等于0 的模型可以选择绝对值，平方值，这里用指数函数，一定大于0；小于等于1 用除法，分子是自己，分母是自身加上1，那一定是小于1的了。</p>
<p><img src="https://p1.pstatp.com/large/43520000890f09d83fe9" alt="image"><br>图4-3</p>
<p>再做一下变形，就得到了 logistic regressions 模型：</p>
<p><img src="https://p9.pstatp.com/large/4351000204be99bba336" alt="image"><br>图4-4</p>
<p>通过源数据计算可以得到相应的系数了：<br> <img src="https://p3.pstatp.com/large/4353000003f6ba0e0f8d" alt="image"><br>图4-5<br><img src="https://p1.pstatp.com/large/435100020586720b85a6" alt="image"><br>图4-6 LR模型曲线图</p>
<h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2><p>要将两类分开，想要得到一个超平面，最优的超平面是到两类的 margin 达到最大，margin就是超平面与离它最近一点的距离，如下图，Z2&gt;Z1，所以绿色的超平面比较好。</p>
<p>图解十大经典的机器学习算法<br><img src="https://p3.pstatp.com/large/435000020b04838dcf31" alt="image"><br>图5 分类问题示意图</p>
<p>将这个超平面表示成一个线性方程，在线上方的一类，都大于等于1，另一类小于等于－1：</p>
<p><img src="https://p1.pstatp.com/large/435000020b4ac6b506a0" alt="image"></p>
<p>点到面的距离根据图中的公式计算：</p>
<p><img src="https://p3.pstatp.com/large/435200008bc2bf7f5517" alt="image"></p>
<p>所以得到total margin的表达式如下，目标是最大化这个margin，就需要最小化分母，于是变成了一个优化问题：</p>
<p><img src="https://p3.pstatp.com/large/43530000059e39d73a18" alt="image"></p>
<p>举个例子，三个点，找到最优的超平面，定义了 weight vector＝（2，3）－（1，1）：</p>
<p><img src="https://p1.pstatp.com/large/4353000005c7816fdd59" alt="image"></p>
<p>得到weight vector为（a，2a），将两个点代入方程，代入（2，3）另其值＝1，代入（1，1）另其值＝-1，求解出 a 和 截矩 w0 的值，进而得到超平面的表达式。</p>
<p><img src="https://p9.pstatp.com/large/43510002070c383b6105" alt="image"></p>
<p>a求出来后，代入（a，2a）得到的就是support vector，a和w0代入超平面的方程就是support vector machine。</p>
<h2 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h2><p>举个在 NLP 的应用：给一段文字，返回情感分类，这段文字的态度是positive，还是negative：<br><img src="https://p3.pstatp.com/large/43530000063edd668c55" alt="image"><br>图6-1 问题案例</p>
<p>为了解决这个问题，可以只看其中的一些单词：<br><img src="https://p9.pstatp.com/large/435200008cd4629a6bc4" alt="image"><br>这段文字，将仅由一些单词和它们的计数代表：<br><img src="https://p1.pstatp.com/large/434e00022df729f719f3" alt="image"></p>
<p>原始问题是：给你一句话，它属于哪一类 ？通过bayes rules变成一个比较简单容易求得的问题：<br><img src="https://p3.pstatp.com/large/434d00022ba607261510" alt="image"></p>
<p>问题变成，这一类中这句话出现的概率是多少，当然，别忘了公式里的另外两个概率。例子：单词“love”在positive的情况下出现的概率是 0.1，在negative的情况下出现的概率是0.001。</p>
<p><img src="https://p3.pstatp.com/large/43510002080ef9b94c91" alt="image"><br>图6-2 NB算法结果展示图</p>
<h2 id="K近邻算法"><a href="#K近邻算法" class="headerlink" title="K近邻算法"></a>K近邻算法</h2><p>给一个新的数据时，离它最近的 k 个点中，哪个类别多，这个数据就属于哪一类。</p>
<p>例子：要区分“猫”和“狗”，通过“claws”和“sound”两个feature来判断的话，圆形和三角形是已知分类的了，那么这个“star”代表的是哪一类呢？<br><img src="https://p3.pstatp.com/large/434e00022edc52fa300b" alt="image"><br>图7-1 问题案例</p>
<p>k＝3时，这三条线链接的点就是最近的三个点，那么圆形多一些，所以这个star就是属于猫。<br><img src="https://p3.pstatp.com/large/4351000208a4639fb593" alt="image"><br>图7-2 算法步骤展示图</p>
<h2 id="K均值算法"><a href="#K均值算法" class="headerlink" title="K均值算法"></a>K均值算法</h2><p>先要将一组数据，分为三类，粉色数值大，黄色数值小 。最开始先初始化，这里面选了最简单的 3，2，1 作为各类的初始值 。剩下的数据里，每个都与三个初始值计算距离，然后归类到离它最近的初始值所在类别。<br><img src="https://p3.pstatp.com/large/43530000080920d7643e" alt="image"><br>图8-1 问题案例</p>
<p>分好类后，计算每一类的平均值，作为新一轮的中心点：<br><img src="https://p3.pstatp.com/large/435200008ec651b49844" alt="image"><br>图8-2</p>
<p>几轮之后，分组不再变化了，就可以停止了：<br><img src="https://p3.pstatp.com/large/434e0002300572baeba6" alt="image"><br><img src="https://p1.pstatp.com/large/434e00023018f6a2f245" alt="image"><br>图8-3 算法结果展示</p>
<h2 id="Adaboost"><a href="#Adaboost" class="headerlink" title="Adaboost"></a>Adaboost</h2><p>Adaboost 是 Boosting 的方法之一。Boosting就是把若干个分类效果并不好的分类器综合起来考虑，会得到一个效果比较好的分类器。</p>
<p>下图，左右两个决策树，单个看是效果不怎么好的，但是把同样的数据投入进去，把两个结果加起来考虑，就会增加可信度。<br><img src="https://p1.pstatp.com/large/435100020a32bbefadfd" alt="image"><br>图9-1 算法原理展示</p>
<p>Adaboost 的例子，手写识别中，在画板上可以抓取到很多features（特征），例如始点的方向，始点和终点的距离等等。<br><img src="https://p3.pstatp.com/large/434d00022e7cc9792c98" alt="image"><br>图9-2</p>
<p>training的时候，会得到每个feature的weight（权重），例如2和3的开头部分很像，这个feature对分类起到的作用很小，它的权重也就会较小。<br><img src="https://p1.pstatp.com/large/435000021041994467f7" alt="image"><br>图9-3</p>
<p>而这个alpha角就具有很强的识别性，这个feature的权重就会较大，最后的预测结果是综合考虑这些feature的结果。</p>
<p><img src="https://p1.pstatp.com/large/434e000231a8b19cc6a0" alt="image"><br>图9-4</p>
<h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>Neural Networks适合一个input可能落入至少两个类别里：NN由若干层神经元，和它们之间的联系组成。 第一层是input层，最后一层是output层。在hidden层和output层都有自己的classifier。<br><img src="https://p3.pstatp.com/large/435100020b63904aa0f0" alt="image"><br>图10-1 神经网络结构</p>
<p>input输入到网络中，被激活，计算的分数被传递到下一层，激活后面的神经层，最后output层的节点上的分数代表属于各类的分数，下图例子得到分类结果为class 1；同样的input被传输到不同的节点上，之所以会得到不同的结果是因为各自节点有不同的weights 和bias，这也就是forward propagation。<br><img src="https://p3.pstatp.com/large/434d00022fbafcfbfa77" alt="image"><br>图10-2 算法结果展示</p>
<h2 id="马尔科夫"><a href="#马尔科夫" class="headerlink" title="马尔科夫"></a>马尔科夫</h2><p>Markov Chains由state（状态）和transitions（转移）组成。例子，根据这一句话 ‘the quick brown fox jumps over the lazy dog’，要得到markov chains。</p>
<p>步骤，先给每一个单词设定成一个状态，然后计算状态间转换的概率。<br><img src="https://p3.pstatp.com/large/435200009180de2aa4a9" alt="image"><br>图11-1 马尔科夫原理图</p>
<p>这是一句话计算出来的概率，当你用大量文本去做统计的时候，会得到更大的状态转移矩阵，例如the后面可以连接的单词，及相应的概率。<br><img src="https://p3.pstatp.com/large/435300000b3f99003259" alt="image"><br>图11-2 算法结果展示</p>
<p>上述十大类机器学习算法是人工智能发展的践行者，即使在当下，依然在数据挖掘以及小样本的人工智能问题中被广泛使用。</p>
]]></content>
      <categories>
        <category>机器学习笔记</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>实习记录</title>
    <url>/2019/07/14/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="0-环境"><a href="#0-环境" class="headerlink" title="0.环境"></a>0.环境</h2><ul>
<li>spark 2.3</li>
<li>scala 2.11.8</li>
<li>hadoop 2.6.0-cdh5.15.1</li>
</ul>
<h2 id="1-任务要求"><a href="#1-任务要求" class="headerlink" title="1. 任务要求"></a>1. 任务要求</h2><ul>
<li>scala调用python程序</li>
<li>分布式运行</li>
<li>服务器上不具备环境（将python程序封装成restful服务，然后scala调用接口，直接用cmd调用python程序耦合度存在问题）</li>
</ul>
<h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><ul>
<li>找不到或无法加载主类<blockquote>
<p>maven依赖包冲突</p>
</blockquote>
</li>
<li>maven仓库中的LastUpdated文件生成原因及删除<blockquote>
<p>在maven在下载jar的时候中断了就会产生lastUpdate文件，批量删除Maven仓库未下载成功.lastupdate 的文件</p>
</blockquote>
</li>
<li>没有相关方法(noSuchMethodError)<blockquote>
<ol>
<li>maven没有下载相关的源码包(在仓库里面看有没有XXX.source.jar)</li>
<li>在集群上面跑程序是否每一台机器都需要导入相关的使用的包</li>
<li>httpclient4以上的版本不支持在spark多节点上使用</li>
<li>本地和集群的spark或scala版本不一致</li>
<li>查看源码</li>
</ol>
</blockquote>
</li>
<li>maven打包参数<blockquote>
<p>clean清除以往残留<br>package打包<br>assembly自定义打包参数</p>
</blockquote>
</li>
<li>spark单机跑程序命令<blockquote>
<p>spark-submit –class ScalaMain ./test/ScalaJarT.jar local</p>
</blockquote>
</li>
<li>spark为什么在后面会重新调用前面的dataframe操作代码<blockquote>
<p>Spark 2.1.0及以前的版本有一个很坑爹的问题，如果persist一个df1后unpersist 与df1相关的df0，那么df1也会被unpersist掉，导致后续用到df1的地方又需要重新算df1，降低性能。所以在后面需要用到df1的时候会重新调用df0</p>
</blockquote>
<h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h2>困扰了快一周左右的问题终于解决了，写好的程序在本地可以运行但是放在服务器上总是报noSuchMethodError的error<pre><code class="hljs css"><span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.NoSuchMethodError</span>: <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.DefaultHttpClient</span><span class="hljs-selector-class">.execute</span> <span class="hljs-selector-tag">at</span></code></pre>
或者NoSuchFieldError的error<pre><code class="hljs routeros">java.lang.NoSuchFieldError: INSTANCE
    at org.apache.http.impl.io.DefaultHttpRequestWriterFactory.&lt;init&gt;(DefaultHttpRequestWriterFactory.java:52)</code></pre>
查了很多资料甚至把jar包反编译回去看源码都没有解决，网上都说是htpclient的包和某个maven包相冲突等等问题。根据网上的能查到的国内外的各种资料总结了以下几种猜想并尝试一一解决问题，大致如下：<blockquote>
<ol>
<li>刚开始在查看报问题包的时候，想查看源码却发现公司内网的maven仓库没有自动把源码包下载下来，是否是因为没有下载源码包的问题所以打包后的程序无法找到相关方法？</li>
</ol>
</blockquote>
<pre><code class="hljs plain">解决方法：把相同版本的httpclient的源码包导入到工作机器上打包运行仍然出现这种问题。猜想失败</code></pre>
<blockquote>
<ol start="2">
<li>在集群上面跑程序是否每一台机器都需要导入该程序使用的包？</li>
</ol>
</blockquote>
<pre><code class="hljs makefile"><span class="hljs-section">解决方法:据自己过去的学习的知识来说，印象中好像是不需要的。但是之前对集群东西摸得比较少，仔细想了下，把程序放在spark上面分布式运行请求单独的接口，但是spark在分布给每一个worker任务的时候都是随机分配的，如果worker上面没有相关的依赖包那怎么请求呢。又让我产生了怀疑，然后通过查阅资料发现通过maven打包运行的程序是不需要每一台机器都要有依赖包的。</span></code></pre>
<blockquote>
<ol start="3">
<li>httpclient4以上的版本是否支持在spark多节点上使用？</li>
</ol>
</blockquote>
<pre><code class="hljs gcode">解决方法：查阅资料发现httpclie<span class="hljs-symbol">nt4</span>是支持在集群使用的</code></pre>
<blockquote>
<ol start="4">
<li>使用的httpclent版本是否和spark版本相冲突？</li>
</ol>
</blockquote>
<pre><code class="hljs angelscript">解决方法：之前一直觉得版本是不会出现问题的，忽略了最小的问题也是最严重的问题。查看了服务器集群的版本之后，服务器上面有spark1<span class="hljs-number">.6</span>和spark2<span class="hljs-number">.3</span>两个版本，我在运行程序的时候使用的sparksubmit命令是<span class="hljs-number">1.6</span>版本的命令。但是我本地电脑上面装的是spark2，所以之前的程序一直可以本地跑然后放服务器上就死掉了。然后把程序放服务器上面的spark2跑一下发现竟然还是死掉了，很奇怪。把原来的scala程序仔细翻翻发现竟然是spark1版本的，真是xuema坑爹。然后鼓捣鼓捣觉得绝对是是spark的和httpclient的版本冲突问题，把原来的httpclient4<span class="hljs-number">.5</span><span class="hljs-number">.5</span>改成了<span class="hljs-number">3.1</span>版本的，这里又有问题了，httpclient4和httpclient3两个版本的差别还是挺大的（主要是里面很多的类和参数都进行了修改在<span class="hljs-number">4</span>的版本中被弃用了，所以在运行的时候会报没有方法或者没有field的问题）。意思就是调用接口的代码要重写，其实并没有很多内容，但是问题难在httpclient4的网上可供参考的代码还挺多的但是httpclient3就太古老了，大家在用这个包的时候估计scala还没有被发明出来，所以找scala写的httpclient3基本没有。然后硬着头皮对着java版本的调用方式写了一套scala的，本地用的是spark2，可以运行（很多框架都是向下兼容的不假）。然后放集群上面跑一下，两个版本的spark都可以运行没问题。</code></pre></li>
<li>总结：<blockquote>
<p>鉴于框架向下兼容的特性用什么还是要用低版本的，当没有特殊需求的时候。<br>头铁的时候是可以把墙撞烂的，不要害怕墙的坚硬。。。。要勇于尝试</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>工作相关</category>
      </categories>
      <tags>
        <tag>实习记录</tag>
      </tags>
  </entry>
  <entry>
    <title>手写识别图片预处理</title>
    <url>/2018/11/21/%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E9%A2%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>大二的时候几个人一起搞的一个东西，上周运气好被一个同学投到了成都的一个比赛还进了决赛，然后思考了一下既然要比赛还是把这个系统的各个方面完善一下好了。我做的是图片预处理部分，把一张图片中的数字算式部分提取出来。</p>
<pre><code>之前的图片预处理分割字符是通过照片的像素点来分割的，
现在看来是十分的愚蠢。。。主要是那个时候自己也菜，
所以现在想了办法预处理部分重新做一下。</code></pre>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>图片预处理部分要实现的功能很简单，就是把一整张图片中的数字和运算符号切割成单独的一个一个小图像就好了。<br>大概步骤就是这样：</li>
</ul>
<pre><code class="hljs ada">graph LR
整张图片<span class="hljs-comment">--&gt;图片旋转闭操作等处理</span>
图片旋转闭操作等处理<span class="hljs-comment">--&gt;切割单个等式</span>
切割单个等式<span class="hljs-comment">--&gt;获取每一个数字与运算符</span></code></pre>
<ul>
<li><p>理想效果：<br>  原图⬇<br>  <img src="EF7E208AE0EE4C20923C8FCE1596E233" alt="0--test0"></p>
<p>  结果⬇<br>  <img src="E0D1665B6D024C95BAA35ED62B95FFD3" alt="1"></p>
</li>
<li><p>其中图片的拍摄过程中需要解决的问题及解决方法：</p>
<ol>
<li>图片倾斜 –&gt; 霍夫变换</li>
<li>不平整 –&gt; 闭操作透视变换</li>
<li>噪点与阴影 –&gt; 二值化处理</li>
<li>提取内容 –&gt; 算式框的边界检测</li>
</ol>
</li>
</ul>
<h2 id="模块具体实施步骤和结果"><a href="#模块具体实施步骤和结果" class="headerlink" title="模块具体实施步骤和结果"></a>模块具体实施步骤和结果</h2><ul>
<li><p>步骤零：获取图片<br>  <img src="BC4FFD9E762F41B884F1561145188A38" alt="image"></p>
</li>
<li><p>步骤一：霍夫变换</p>
<p>  这个地方因为拍摄的照片就比较正，所以霍夫变换的效果不是十分明显，仔细看是能看到这个图边缘黑边的地方就是进行旋转后的痕迹。结果如下：<br><img src="2CB054EC34C74753AC8B607F09C43EAB" alt="image"></p>
</li>
</ul>
<ul>
<li><p>步骤二：获取边界图片</p>
<p>  opencv的边界检测方法<br>  <img src="26767B1C17EF41419DBFAB8DFB1A3F97" alt="image"></p>
</li>
<li><p>步骤三：灰度化闭操作及透视变换</p>
<p>  闭操作：<br>  ‘’ 图片形态学操作中的一种，闭操作可使轮廓线更光滑，但与开操作相反的是，闭操作通常消弥狭窄的间断和长细的鸿沟，消除小的空洞，并填补轮廓线中的断裂。’’</p>
<p>  简单点说：图片细节增强</p>
<p>  透视变换：将原图投影到另一个平面上并通过点运算使图像更加平整。</p>
<p>  二值化处理方法：根据Otsu’s方法取最佳阈值对图片进行二值化处理</p>
<p>  结果如下：这里透明变换的效果并不是很好，目前还没有找到一个合适的参数使用，并且从分割的情况来看效果也还行，所以暂时就这样勉强用了。。。<br>  <img src="E3617599EB824E8299DABE0F092E2E2A" alt="image"></p>
</li>
<li><p>步骤四：分割单元格</p>
<p>  opencv对图片轮廓进行识别：<br>  <img src="BAD59EB81C624531B685A71658D40A6B" alt="image"></p>
<p>  使用opencv把边界画出来，效果简明易懂：</p>
<p>  <img src="334DE774AEC74DFF92342E47D4D5DE59" alt="image"></p>
<p>  单个单元格的提取：<br>  <img src="FBF03940D0494CCA8DA20F1EB9189084" alt="image"></p>
</li>
<li><p>步骤五：从单个单元格中提取数字及符号</p>
<p>  因为用了垂直投影方法切割字符，在使用之前去噪点的步骤没有检测效果如何，导致这里用垂直投影会出现将噪点也切割出来的情况。返回重新调整一下二值化的阈值就可以了。</p>
<p>  效果：<br>  <img src="8F285B11124A45CAB531F5BC452BA749" alt="1"></p>
</li>
</ul>
<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><ol>
<li>使用png格式图片的原因<br>png它是无损压缩格式，jpg是有损</li>
<li>写一个完整的系统代码一定要分方法分模块，否则到后面代码量增加起来之后对后续的维护很麻烦。</li>
<li>对opencv模块的强大有了更加的了解。。。</li>
<li>这里实名感谢”@ATP合成酶”大佬提供的相关处理思路，万分感谢</li>
<li>项目为了赶时间基本只写了两周还有很多不完整的细节处理地方，如果继续做下去的话也还是蛮有意思的</li>
<li>第一次感受到当程序员没日没夜的加班生活，想到以后还有很多次真的是很后悔如这一行了</li>
</ol>
]]></content>
      <categories>
        <category>学校</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>熵权法计算权重</title>
    <url>/2020/10/15/%E7%86%B5%E6%9D%83%E6%B3%95%E8%AE%A1%E7%AE%97%E6%9D%83%E9%87%8D/</url>
    <content><![CDATA[<h1 id="1-熵权法说明"><a href="#1-熵权法说明" class="headerlink" title="1.熵权法说明"></a>1.熵权法说明</h1><p>通过信息熵的大小判断某项数据在整体数据评测中所占的比重大小。</p>
<blockquote>
<p>一般来说，若某个指标的<strong>信息熵Ej越小</strong>，表明指标值得变异程度<strong>越大</strong>，提供的信息量越多，在综合评价中所能起到的作用也越大，其权重也就越大。相反，某个指标的<strong>信息熵越大</strong>，表明指标值得变异程度<strong>越小</strong>，提供的信息量也越少，在综合评价中所起到的作用也越小，其权重也就越小</p>
</blockquote>
<p>#2.计算步骤</p>
<h2 id="2-1-数据标准化"><a href="#2-1-数据标准化" class="headerlink" title="2.1 数据标准化"></a>2.1 数据标准化</h2><p>假设给定了<em>k</em>个指标（类别）$X_1$,$X_2$，……，$X_i$={$x_1$,$x_2$,……},</p>
<p>假设对各指标数据标准化后的值为 : $Y_1$,$Y_2$….$Y_k$</p>
<p>则$X_{ij}$表示第$i$个指标下的第$j$个值</p>
<p>那么标准化的$Y_{ij}$ =$\frac{X_{ij}-min(X_{ij})}{max(X_i) - min(X_i)}$</p>
<h2 id="2-2-计算各指标的信息熵"><a href="#2-2-计算各指标的信息熵" class="headerlink" title="2.2 计算各指标的信息熵"></a>2.2 计算各指标的信息熵</h2><p>信息熵   $E_j = -\frac{1}{lnn}∑^n_{i=1}p_{ij}lnp_{ij}$</p>
<p>其中   $p_{ij} = \frac{Y_{ij}}{\stackrel{n}{\stackrel{∑{Y_{ij}}}{i=1}}}$</p>
<p>如果： $p_{ij}=0$</p>
<p>则：$\stackrel{lim}{p_{ij-0}} p_{ij}lnp_{ij}=0$</p>
<h2 id="2-3-确定各指标权重"><a href="#2-3-确定各指标权重" class="headerlink" title="2.3 确定各指标权重"></a>2.3 确定各指标权重</h2><p>根据信息熵$E_j$的计算公式计算信息熵分别为$E_1,E_2,……E_k$</p>
<p>然后计算权重:</p>
<p>$W_i = \frac{1-E_i}{k-∑E_i}(i = 1,2,3….k)$</p>
<blockquote>
<p>这里的分母$k-∑E_i$通过上面计算出所有的信息熵E之后为一个固定的常数。</p>
</blockquote>
<h2 id="2-4-根据权重打分"><a href="#2-4-根据权重打分" class="headerlink" title="2.4 根据权重打分"></a>2.4 根据权重打分</h2><p>根据计算后：$X_1$,$X_2$，……，$X_i$={$x_1$,$x_2$,……}每一项指标分别对应的权重为$W_1,W_2,….W_i$</p>
<p>得到每个个体的得分计算为  </p>
<p>$R_1 = X_{11}W_1+X_{21}W_2+….+X_{i1}W_i$ </p>
]]></content>
      <categories>
        <category>工作相关</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>随机森林和梯度决策树（GBDT）</title>
    <url>/2020/03/27/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%92%8C%E6%A2%AF%E5%BA%A6%E5%86%B3%E7%AD%96%E6%A0%91%EF%BC%88GBDT%EF%BC%89/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>随机森林和GBDT部分对比</p>
<h2 id="一：随机森林-bagging思想"><a href="#一：随机森林-bagging思想" class="headerlink" title="一：随机森林(bagging思想)"></a>一：随机森林(bagging思想)</h2><ul>
<li>通过构建决策树然后进行分类，最后选择种类比较多的类别</li>
<li>随机：随机选取固定的样本和固定的特征</li>
<li>集成学习：投票选举（民主集中制）</li>
</ul>
<h2 id="二：GBDT-boosting思想"><a href="#二：GBDT-boosting思想" class="headerlink" title="二：GBDT(boosting思想)"></a>二：GBDT(boosting思想)</h2><ul>
<li>GBDT是回归树不是分类树</li>
<li>核心在于累加所有树的结果最为最终结果</li>
<li>利用损失函数的负梯度去模拟残差，使用残差构建决策树</li>
<li><strong>为什么使用梯度决策树而不是回归算法</strong><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 回归算法寻找参数和目标值之间存在的某种曲线关系，但是当某些特征与目标值之间无线性关系可使用梯度决策树。</span>
<span class="hljs-quote">&gt; 梯度决策树是讲特征拟化成数值分类回归最佳结果。</span></code></pre>

</li>
</ul>
<!-- more -->

<h3 id="2-1-参数说明"><a href="#2-1-参数说明" class="headerlink" title="2.1 参数说明"></a>2.1 参数说明</h3><p><code>class sklearn.ensemble.GradientBoostingRegressor(loss=&#39;ls&#39;, learning_rate=0.1, n_estimators=100, subsample=1.0, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_depth=3, init=None, random_state=None, max_features=None, alpha=0.9, verbose=0, max_leaf_nodes=None, warm_start=False, presort=&#39;auto&#39;)</code></p>
<ul>
<li><p><strong>n_estimators</strong>：指GBR使用的学习算法的数量。通常，如果你的设备性能更好，可以把n_estimators设置的更大，效果也会更好。</p>
</li>
<li><p><strong>max_depth</strong>：应该在优化其他参数之前先调整max_depth参数。因为每个学习算法都是一颗决策树，max_depth决定了树生成的节点数。选择合适的节点数量可以更好的拟合数据，而更多的节点数可能造成拟合过度。</p>
</li>
<li><p><strong>loss</strong>:loss参数决定损失函数，也直接影响误差。默认值为ls，表示最小二乘法（least squares）。还有最小绝对值差值，Huber损失和分位数损失（quantiles）等等。</p>
</li>
<li><p><strong>learning_rate</strong>:学习率</p>
</li>
</ul>
<h4 id="2-1-1-参数调整"><a href="#2-1-1-参数调整" class="headerlink" title="2.1.1 参数调整"></a>2.1.1 参数调整</h4><p><strong>Grid Search</strong>来选择性能表现最好的超参数</p>
<p><a href="https://zhuanlan.zhihu.com/p/55524425">https://zhuanlan.zhihu.com/p/55524425</a></p>
<p>在Gradient Boosting Regressor 模型中，有一些独立的参数最好是手动调整。</p>
<p>超参数主要使用了：</p>
<ul>
<li>n_estimators=2000,</li>
<li>learning_rate=0.01,</li>
<li>max_depth=15,</li>
<li>max_features=’sqrt’,</li>
<li>min_samples_leaf=10,</li>
<li>min_samples_split=10,</li>
<li>loss=’ls’,</li>
<li>random_state =42)<h3 id="2-2-负荷预测程序说明记录"><a href="#2-2-负荷预测程序说明记录" class="headerlink" title="2.2 负荷预测程序说明记录"></a>2.2 负荷预测程序说明记录</h3><h4 id="1-误差偏大的处理方法"><a href="#1-误差偏大的处理方法" class="headerlink" title="1. 误差偏大的处理方法"></a>1. 误差偏大的处理方法</h4><h5 id="误差偏大的原因：缺失值处理不当-0或空值设置为均值"><a href="#误差偏大的原因：缺失值处理不当-0或空值设置为均值" class="headerlink" title="误差偏大的原因：缺失值处理不当(0或空值设置为均值)"></a>误差偏大的原因：缺失值处理不当(0或空值设置为均值)</h5><blockquote>
<p>因为数据波动较大，设置为历史均值是否存在较大的参考价值。其次数据量教少直接删除也不太可取。尝试设置为近一年的均值进行测试。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>机器学习笔记</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习笔记</title>
    <url>/2020/05/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="0-概述"><a href="#0-概述" class="headerlink" title="0.概述"></a>0.概述</h1><p>部分摘录</p>
<h1 id="1-线性回归"><a href="#1-线性回归" class="headerlink" title="1. 线性回归"></a>1. 线性回归</h1><h2 id="1-1-特征缩放（归一化）"><a href="#1-1-特征缩放（归一化）" class="headerlink" title="1.1 特征缩放（归一化）"></a>1.1 特征缩放（归一化）</h2><h3 id="1-1-1-Standardization"><a href="#1-1-1-Standardization" class="headerlink" title="1.1.1 Standardization"></a>1.1.1 Standardization</h3><p>Standardization又称为 Z-score normalization，量化后的特征将服从标准正态分布：</p>
<p>z = （X<sub>i</sub>-μ）/δ</p>
<p>其中， μ ， δ  分别为对应特征  x<sub>i</sub>  的均值和标准差。量化后的特征将分布在  [−1,1]  区间</p>
<!-- more -->

<h3 id="1-1-2-Min-Max-Scaling"><a href="#1-1-2-Min-Max-Scaling" class="headerlink" title="1.1.2 Min-Max Scaling"></a>1.1.2 Min-Max Scaling</h3><p>Min-Max Scaling 又称为 normalization，特征量化的公式为：</p>
<p>z = x<sub>i</sub>−min(x<sub>i</sub>)  /  max(x<sub>i</sub>)−min(x<sub>i</sub>)</p>
<p>量化后的特征将分布在[0,1]区间。</p>
<p>大多数机器学习算法中，会选择 Standardization 来进行特征缩放，但是，Min-Max Scaling 也并非会被弃置一地。在数字图像处理中，像素强度通常就会被量化到[0,1] 区间，在一般的神经网络算法中，也会要求特征被量化到  [0,1]  区间。</p>
<h2 id="1-2-学习率的调节"><a href="#1-2-学习率的调节" class="headerlink" title="1.2 学习率的调节"></a>1.2 学习率的调节</h2><h3 id="1-2-1-梯度下降"><a href="#1-2-1-梯度下降" class="headerlink" title="1.2.1 梯度下降"></a>1.2.1 梯度下降</h3><ul>
<li>批量梯度下降</li>
<li>随机梯度下降<h3 id="1-2-2-正规方程"><a href="#1-2-2-正规方程" class="headerlink" title="1.2.2 正规方程"></a>1.2.2 正规方程</h3></li>
</ul>
<p>我们通过梯度下降法来求得J(θ)  的最小值，但是对于学习率α  的调节有时候使得我们非常恼火。为此，我们可通过正规方程来最小化  J(θ) ：</p>
<p>θ=(X^T^X)^−1^X^T^y</p>
<p>其中， X  为输入向量矩阵，第0  个特征表示偏置（x0=1）， y  为目标向量，仅从该表达式形式上看，我们也脱离了学习率α 的束缚。</p>
<h2 id="1-3-欠拟合与过拟合"><a href="#1-3-欠拟合与过拟合" class="headerlink" title="1.3 欠拟合与过拟合"></a>1.3 欠拟合与过拟合</h2><h3 id="1-3-1-局部加权线性回归（LWR）"><a href="#1-3-1-局部加权线性回归（LWR）" class="headerlink" title="1.3.1 局部加权线性回归（LWR）"></a>1.3.1 局部加权线性回归（LWR）</h3><p>为了解决欠拟合和过拟合问题，引入了<strong>局部加权线性回归。</strong></p>
<p>LWR 补充自机器学习实战一书，后续章节中我们知道，更一般地，我们使用<strong>正规化</strong>来解决过拟合问题。</p>
<h1 id="2-逻辑回归"><a href="#2-逻辑回归" class="headerlink" title="2. 逻辑回归"></a>2. 逻辑回归</h1><ul>
<li>逻辑回归就是解决分类问题，求决策边界<h2 id="2-1-0-1-分类问题"><a href="#2-1-0-1-分类问题" class="headerlink" title="2.1 0/1 分类问题"></a>2.1 0/1 分类问题</h2>简单的根据y值大小（类别）进行分类</li>
</ul>
<h2 id="2-2-逻辑回归"><a href="#2-2-逻辑回归" class="headerlink" title="2.2 逻辑回归"></a>2.2 逻辑回归</h2><p>上一节我们知道，使用线性回归来处理 0/1 分类问题总是困难重重的，因此，人们定义了逻辑回归来完成 0/1 分类问题，逻辑一词也代表了是（1）和非（0）。</p>
<h3 id="2-2-1-Sigmoid预测函数"><a href="#2-2-1-Sigmoid预测函数" class="headerlink" title="2.2.1 Sigmoid预测函数"></a>2.2.1 Sigmoid预测函数</h3><p>在逻辑回归中，定义预测函数为：<br>h<sub>θ</sub>(x)=g(z)</p>
<p>其中， z=θ^T^x  是<strong>分类边界</strong>（分类边界曲线/线），且g(z)=1 / 1+e^−z^</p>
<p>g(z)  称之为 Sigmoid Function，亦称 Logic Function</p>
<h2 id="2-3-决策边界"><a href="#2-3-决策边界" class="headerlink" title="2.3 决策边界"></a>2.3 决策边界</h2><p>决策边界，顾名思义，就是用来划清界限的边界，边界的形态可以不定，可以是点，可以是线，也可以是平面。Andrew Ng 在公开课中强调：“<strong>决策边界是预测函数  hθ(x) 的属性，而不是训练集属性</strong>”，这是因为能作出“划清”类间界限的只有h<sub>θ</sub>(x) ，而训练集只是用来训练和调节参数的。</p>
<h2 id="2-4-利用正规化解决过拟合问题"><a href="#2-4-利用正规化解决过拟合问题" class="headerlink" title="2.4 利用正规化解决过拟合问题"></a>2.4 利用正规化解决过拟合问题</h2><p>在之前的文章中，我们认识了过拟合问题,通常，我们有如下策略来解决过拟合问题：</p>
<p>减少特征数，显然这只是权宜之计，因为特征意味着信息，放弃特征也就等同于丢弃信息，要知道，特征的获取往往也是艰苦卓绝的。</p>
<p>不放弃特征，而是拉伸曲线使之更加平滑以解决过拟合问题，为了拉伸曲线，也就<strong>要弱化一些高阶项（曲线曲折的罪魁祸首</strong>）。由于高阶项中的特征 x 无法更改，因此特征是无法弱化的，我们能弱化的只有高阶项中的系数  θ<sub>i</sub> 。我们把这种弱化称之为是对参数  θ 的惩罚（penalize）。Regularization（正规化）正是完成这样一种惩罚的“侩子手”</p>
<h2 id="2-5-多分类问题"><a href="#2-5-多分类问题" class="headerlink" title="2.5 多分类问题"></a>2.5 多分类问题</h2><p>通常采用 <strong>One-vs-All</strong>，亦称 One-vs-the Rest 方法来实现多分类，其将多分类问题转化为了多次二分类问题。假定完成K个分类，One-vs-All 的执行过程如下：</p>
<ul>
<li>轮流选中某一类型i，将其视为正样本，即 “1” 分类，剩下样本都看做是负样本，即 “0” 分类。</li>
<li>训练逻辑回归模型得到参数  θ^(1)^,θ^(2)^,…,θ^(K)^ ，即总共获得了K−1个决策边界。</li>
</ul>
<p>给定输入x，为确定其分类，需要分别计算  h<sub>θ</sub>^(k)^(x),k=1,…,K , h<sub>θ</sub>^(k)^(x)越趋近于 1，x  越接近是第k类。</p>
<p><strong>总结</strong>：ABC三类，将A当作一类，BC当作一类，得到决策边界h<sub>1</sub>；然后将B当一类，AC当一类，得到决策边界h2，以此类推。然后将目标x<sub>θ</sub>代入h<sub>1</sub>,h<sub>2</sub>,h<sub>3</sub>中求解。哪个值越<strong>接近1</strong>，即为x<sub>0</sub>的类别。</p>
<p><strong>这里为什么条件是接近1</strong>：因为逻辑回归的归一化函数比如说上面的sigmod函数归一化的值区间为[0,1],如果h<sub>3</sub>(x0)值为0.8表示x<sub>0</sub>有0.8的概率为h3类别，并不是h<sub>3</sub>(x<sub>0</sub>)的值越大表示它的类别一定为h<sub>3</sub></p>
<h1 id="3-神经网络"><a href="#3-神经网络" class="headerlink" title="3. 神经网络"></a>3. 神经网络</h1><h2 id="3-1-再论-0-1-分类问题"><a href="#3-1-再论-0-1-分类问题" class="headerlink" title="3.1 再论 0/1 分类问题"></a>3.1 再论 0/1 分类问题</h2><p>在逻辑回归中，通过对特征进行多项式展开，可以让逻辑回归支持非线性的分类问题。<br>但是当数据的特征维度比较高的时候，多项式展开扩展后的特征个数是特别高的，对计算机的性能提出了很大的挑战。</p>
<p>比如说在计算机视觉（CV）领域，图像的特征往往都是高维的</p>
<p>因此，就需要考虑用新的机器学习模型来处理高维特征的非线性分类问题，<strong>神经网络是典型的不需要增加特征数目就能完成非线性分类问题的模型</strong>。</p>
<h2 id="3-2-神经网络概述"><a href="#3-2-神经网络概述" class="headerlink" title="3.2 神经网络概述"></a>3.2 神经网络概述</h2><h3 id="3-2-1-卷积层"><a href="#3-2-1-卷积层" class="headerlink" title="3.2.1 卷积层"></a>3.2.1 卷积层</h3><p>作用：提取图像特征</p>
<p>关于卷积核的选取</p>
<h3 id="3-2-2-池化层"><a href="#3-2-2-池化层" class="headerlink" title="3.2.2 池化层"></a>3.2.2 池化层</h3><p>特征降维</p>
<h3 id="3-2-3-全连接层"><a href="#3-2-3-全连接层" class="headerlink" title="3.2.3 全连接层"></a>3.2.3 全连接层</h3><p>全连接的核心操作就是矩阵向量乘积：y=Wx</p>
<p>本质就是由一个特征空间线性变换到另一个特征空间。目标空间的任一维——也就是隐层的一个 cell——都认为会受到源空间的每一维的影响。不考虑严谨，可以说，目标向量是源向量的加权和。</p>
<p>在 CNN 中，全连接常出现在最后几层，<strong>用于对前面设计的特征做加权和</strong>。比如 mnist，前面的卷积和池化相当于做特征工程，后面的全连接相当于做特征加权。（卷积相当于全连接的有意弱化，按照局部视野的启发，把局部之外的弱影响直接抹为零影响；还做了一点强制，不同的局部所使用的参数居然一致。弱化使参数变少，节省计算量，又专攻局部不贪多求全；强制进一步减少参数。少即是多）</p>
<p>在 RNN 中，全连接用来把 embedding 空间拉到隐层空间，把隐层空间转回 label 空间等</p>
<h1 id="4-算法分析与优化"><a href="#4-算法分析与优化" class="headerlink" title="4. 算法分析与优化"></a>4. 算法分析与优化</h1><h2 id="4-1-调优方法"><a href="#4-1-调优方法" class="headerlink" title="4.1 调优方法"></a>4.1 调优方法</h2><p>在线性回归中，我们使用了如下的代价函数来评估预测误差：<br>J(θ)=1 / 2m（costFunction + 正则化表达式）</p>
<p>想要降低预测误差，即提高预测精度，我们往往会采用这些手段：</p>
<table>
<thead>
<tr>
<th>手段</th>
<th>优/劣</th>
</tr>
</thead>
<tbody><tr>
<td>采集更多的样本</td>
<td>我们认为见多识广会让人变得聪明，但是也会让人变得优柔寡断，或者聪明反被聪明误。</td>
</tr>
<tr>
<td>降低特征维度</td>
<td>也许被降掉的维度会是非常有用的知识。</td>
</tr>
<tr>
<td>采集更多的特征</td>
<td>增加了计算负担，也可能导致过拟合。</td>
</tr>
<tr>
<td>进行高次多项式回归</td>
<td>可能造成过拟合。</td>
</tr>
<tr>
<td>调试正规化参数λ</td>
<td>这个调节策略缺乏指导，只能是猜测性调节。</td>
</tr>
</tbody></table>
<h2 id="4-2-数据集划分"><a href="#4-2-数据集划分" class="headerlink" title="4.2 数据集划分"></a>4.2 数据集划分</h2><p>训练集：70%<br>测试集：30%</p>
<p>在对数据集进行训练集和测试集的划分前，最好先对数据集进行乱序，防止类似样本聚到一起</p>
<h3 id="4-2-1-交叉验证集"><a href="#4-2-1-交叉验证集" class="headerlink" title="4.2.1  交叉验证集"></a>4.2.1  交叉验证集</h3><p>在多项式回归中,我们总是尝试不同的多项式次数（degree）,形成了不同的预测模型:</p>
<p>y1= θ<sub>0</sub>X</p>
<p>y2 = θ<sub>0</sub>X  + θ<sub>1</sub>X^2^ </p>
<p>y3 = θ<sub>0</sub>X + θ<sub>1</sub>X^2^ + θ<sub>2</sub>X^3^</p>
<p>假设y<sub>3</sub>的测试误差最小，我们选取y<sub>3</sub>中的θ作为模型的参数。<br>这时参数已经有了，如何<strong>评估模型的泛化能力</strong>呢？</p>
<p>这时就要使用交叉验证集对模型的泛化能力进行验证。通常情况下：</p>
<ul>
<li>训练集：60%，确定参数  θ </li>
<li>交叉验证集：20%，进行模型选择。</li>
<li>测试集：20%，评价模型预测能力。<pre><code class="hljs ada">graph LR
使用训练集得到参数θ<span class="hljs-comment">--&gt;使用交叉验证集对模型泛化能力进行验证可能会修改超参数θ的值</span>
使用交叉验证集对模型泛化能力进行验证可能会修改超参数θ的值<span class="hljs-comment">--&gt; 使用测试集评价模型预测能力</span></code></pre>
<h2 id="4-3偏差与方差"><a href="#4-3偏差与方差" class="headerlink" title="4.3偏差与方差"></a>4.3偏差与方差</h2></li>
</ul>
<p>在机器学习中，<strong>偏差</strong>（bias）反映了模型无法描述数据规律，而<strong>方差</strong>（variance）反映了模型对训练集过度敏感，而丢失了数据规律，高偏差和高方差都会造成新数据到来时，模型给出错误的预测。</p>
<p>通过诊断（Diagnose）模型是出现了高偏差问题还是高方差问题，我们能对症下药，采取不同的解决策略</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>采集更多的样本</td>
<td>高方差</td>
</tr>
<tr>
<td>降低特征维度</td>
<td>高方差</td>
</tr>
<tr>
<td>采集更多的特征</td>
<td>高偏差</td>
</tr>
<tr>
<td>进行高次多项式回归</td>
<td>高偏差</td>
</tr>
<tr>
<td>降低参数  λ</td>
<td>高方差</td>
</tr>
<tr>
<td>增大参数  λ</td>
<td>高偏差</td>
</tr>
</tbody></table>
<h2 id="4-4-问题分析方法"><a href="#4-4-问题分析方法" class="headerlink" title="4.4 问题分析方法"></a>4.4 问题分析方法</h2><p>对于机器学习问题，吴恩达给出了一些 tips：</p>
<ul>
<li>在一开始，尽量不要将问题复杂化（不要提前优化），先快速实现一个简单算法，然后通过交叉验证集评估模型。这就好比在软件工程中，不会做提前优化，而是先迭代功能。</li>
<li>通过绘制学习曲线（learning curve），确定面临的问题是高偏差还是高方差，来决定是添加更多训练样本，还是添加更多特征。</li>
<li>甚至可以手动检查交叉验证集中误差较大的样本，确定错误的来源和解决策略。</li>
<li><h3 id="4-4-1-举个例子"><a href="#4-4-1-举个例子" class="headerlink" title="4.4.1 举个例子"></a>4.4.1 举个例子</h3>假定交叉验证集有 500 个样本，即  mcv=500mcv=500 ，我们的模型错分了其中 100 个样本，那么我们会通过下述手段进行错误分析：</li>
<li>需要知道哪些邮件被错分了，是假冒伪劣的推销邮件？医药邮件？还是钓鱼邮件？</li>
<li>需要知道提供什么线索（特征）能帮助模型区分出这些邮件？</li>
</ul>
<p>例如，在这 100 个错分样本中，我们发现有 53 个样本是钓鱼邮件，因此，我们就需要考虑为模型注入识别的钓鱼邮件的能力。继续观察，我们发现，在这 53 封钓鱼邮件中，故意使用错误拼写的邮件有 5 封，来源可疑（发送人可疑）的邮件有 16 封，使用了大量煽动性标点符号的邮件有 32 封。因此，对于识别钓鱼邮件来说，我们更适合将煽动性标点符号添加为特征，而不用再考虑去识别错误拼写。</p>
<h1 id="5-SVM"><a href="#5-SVM" class="headerlink" title="5. SVM"></a>5. SVM</h1><p>常用来处理多维度不规则分类问题</p>
<h2 id="5-1-大间距分类器"><a href="#5-1-大间距分类器" class="headerlink" title="5.1 大间距分类器"></a>5.1 大间距分类器</h2><p>SVM 是典型的大间距分类器：寻找一个直线（面）将数据分类，而这个线（面）到所有点的<strong>距离之和最大</strong>。</p>
<h2 id="5-2-核函数"><a href="#5-2-核函数" class="headerlink" title="5.2 核函数"></a>5.2 核函数</h2><p>在逻辑回归中，我们会通过多项式扩展来处理非线性分类问题：<br>h<sub>0</sub>(x)=θ<sub>0</sub>+θ<sub>1</sub>x<sub>1</sub>+θ<sub>2</sub>x<sub>2</sub>+θ<sub>3</sub>x<sub>1</sub>x<sub>2</sub>+θ<sub>4</sub>x<sub>1</sub>^2^+θ<sub>5</sub>x<sub>2</sub>^2^+⋯</p>
<p>假设我们令：</p>
<p>f<sub>1</sub>=x<sub>1</sub>,</p>
<p>f<sub>2</sub>=x<sub>2</sub>,</p>
<p>f<sub>3</sub>=x<sub>1</sub>x<sub>2</sub>,</p>
<p>f<sub>4</sub>=x<sub>1</sub>^2^,</p>
<p>f<sub>5</sub>=x<sub>2</sub>^2^</p>
<p>则预测函数为：</p>
<p>h<sub>θ</sub>(x)=θ<sub>0</sub>+θ<sub>1</sub>f<sub>1</sub>+θ<sub>2</sub>f<sub>2</sub>+θ<sub>3</sub>f<sub>3</sub>+⋯</p>
<p>但多项式回归所带来的高阶项不一定作用明显，针对这一问题，SVM 不会引入高阶项来作为新的特征，而是会选择一些标记点（landmark），并将样本x与标记点l^(i)^的相似程度作为<strong>新的训练特征f<sub>i</sub>（将f<sub>i</sub>作为数据集的一个属性进行训练）</strong> ：</p>
<p>距离度量的方式就称之为核函数（Kernel），最常见的核函数是高斯核函数（Gaussian Kernel）</p>
<h2 id="5-3-svm的使用说明"><a href="#5-3-svm的使用说明" class="headerlink" title="5.3 svm的使用说明"></a>5.3 svm的使用说明</h2><h3 id="5-3-1-参数和核函数"><a href="#5-3-1-参数和核函数" class="headerlink" title="5.3.1 参数和核函数"></a>5.3.1 参数和核函数</h3><p>使用这些库时，我们通常需要声明 SVM 需要的两个关键部分：</p>
<ul>
<li><p>参数  C </p>
<blockquote>
<p>由于  C  可以看做与正规化参数  λ  作用相反，则对于  C  的调节：</p>
<p>低偏差，高方差，即遇到了过拟合时：减小  C  值。<br>高偏差，低方差，即遇到了欠拟合时：增大  C  值。</p>
</blockquote>
</li>
<li><p>核函数（Kernel）</p>
<blockquote>
<p>而对于核函数的选择有这么一些 tips：</p>
<p>当特征维度n较高，而样本规模m较小时，不宜使用核函数，否则容易引起过拟合。</p>
<p>当特征维度n较低，而样本规模m足够大时，考虑使用高斯核函数。不过在使用高斯核函数前，需要进行特征缩放（feature scaling）。另外，当核函数的参数δ较大时，特征f<sub>i</sub>  较为平缓，即各个样本的特征差异变小，此时会造成欠拟合（高偏差，低方差）：</p>
</blockquote>
</li>
</ul>
<h3 id="5-3-2-分类模型的选择"><a href="#5-3-2-分类模型的选择" class="headerlink" title="5.3.2 分类模型的选择"></a>5.3.2 分类模型的选择</h3><p>目前，我们学到的分类模型有：</p>
<blockquote>
<p>（1）逻辑回归<br>（2）神经网络；<br>（3）SVM。</p>
</blockquote>
<p>怎么选择在这三者中做出选择呢？我们考虑特征维度n及样本规模m ：</p>
<ul>
<li>如果n相对于m非常大，例如例如  n=10000,m∈(10,10000) :此时选用用逻辑回归或者无核的 SVM。</li>
<li>如果n较小，m适中，如 n∈(1,1000) ，而 m∈(10,10000) ：此时选用核函数为高斯核函数的 SVM。</li>
<li>如果n较小，m 较大，如 n∈(1,1000) ，而  m&gt;50000 ：此时，需要创建更多的特征（比如通过多项式扩展），再使用逻辑回归或者无核的 SVM。</li>
</ul>
<p>神经网络对于上述情形都有不错的适应性，但是计算性能上较慢。</p>
<h1 id="6-k-means"><a href="#6-k-means" class="headerlink" title="6. k-means"></a>6. k-means</h1><ul>
<li>聚类算法，其中的k为簇的种类数</li>
<li>簇中心的选取：遍历随机初始化选取</li>
<li>确定聚类数：肘部法则</li>
</ul>
<h2 id="6-1-二分k-means"><a href="#6-1-二分k-means" class="headerlink" title="6.1 二分k-means"></a>6.1 二分k-means</h2><ul>
<li>常规的 K-Means 算法的误差通常只能收敛到局部最小，在此，引入一种称为二分 K-Means（bisecting kmeans）的算法，相较于常规的 K-Means，二分 K-Means 不急于一来就随机K个聚类中心，而是首先把所有点归为一个簇，然后将该簇一分为二。计算各个所得簇的失真函数（即误差），选择误差最大的簇再进行划分（即最大程度地减少误差），重复该过程直至达到期望的簇数目</li>
<li>虽然二分 K-Means 能带来全局最优解，但是我们也可以看到，该算法是一个贪心算法，因此计算量不小。</li>
</ul>
<h1 id="7-特征降维"><a href="#7-特征降维" class="headerlink" title="7. 特征降维"></a>7. 特征降维</h1><ul>
<li>特征降维的一般手段就是将高维特征投影到低维空间</li>
</ul>
<h2 id="7-1-PCA（主成分分析）"><a href="#7-1-PCA（主成分分析）" class="headerlink" title="7.1 PCA（主成分分析）"></a>7.1 PCA（主成分分析）</h2><p>PCA，Principle Component Analysis，即主成分分析法，是<strong>特征降维</strong>的最常用手段。顾名思义，PCA 能从<strong>冗余特征中提取主要成分，在不太损失模型质量的情况下，提升了模型训练速度</strong></p>
<h1 id="8-异常检测"><a href="#8-异常检测" class="headerlink" title="8. 异常检测"></a>8. 异常检测</h1><h2 id="8-1-高斯分布模型"><a href="#8-1-高斯分布模型" class="headerlink" title="8.1 高斯分布模型"></a>8.1 高斯分布模型</h2><p>异常检测的核心就在于找到一个概率模型，帮助我们知道一个样本落入正常样本中的概率，从而帮助我们区分正常和异常样本。高斯分布（Gaussian Distribution）模型就是异常检测算法最常使用的概率分布模型。</p>
<h1 id="9-推荐系统"><a href="#9-推荐系统" class="headerlink" title="9. 推荐系统"></a>9. 推荐系统</h1><h2 id="9-1-协同过滤"><a href="#9-1-协同过滤" class="headerlink" title="9.1 协同过滤"></a>9.1 协同过滤</h2><ul>
<li><p>基于用户的协同过滤推荐(User-based Collaborative Filtering Recommendation)</p>
<blockquote>
<p>基于用户的协同过滤推荐算法先使用统计技术寻找与目标用户有相同喜好的邻居，然后根据目标用户的邻居的喜好产生向目标用户的推荐。基本原理就是利用用户访问行为的相似性来互相推荐用户可能感兴趣的资源</p>
</blockquote>
</li>
<li><p>基于项目的协同过滤推荐(Item-based Collaborative Filtering Recommendation)</p>
<blockquote>
<p>根据所有用户对物品或者信息的评价，发现物品和物品之间的相似度，然后根据用户的历史偏好信息将类似的物品推荐给该用户</p>
</blockquote>
</li>
<li><p>基于模型的协同过滤推荐(Model-based Collaborative Filtering Recommendation)</p>
</li>
</ul>
<blockquote>
<p>基模型的协同过滤推荐就是基于样本的用户喜好信息，训练一个推荐模型，然后根据实时的用户喜好的信息进行预测推荐</p>
</blockquote>
]]></content>
      <categories>
        <category>机器学习笔记</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>毕设记录</title>
    <url>/2019/04/19/%E6%AF%95%E8%AE%BE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="一-爬虫数据获取相关说明"><a href="#一-爬虫数据获取相关说明" class="headerlink" title="一. 爬虫数据获取相关说明"></a>一. 爬虫数据获取相关说明</h1><h3 id="1-数据来源："><a href="#1-数据来源：" class="headerlink" title="1. 数据来源："></a>1. 数据来源：</h3><p>拉勾网</p>
<h3 id="2-数据量："><a href="#2-数据量：" class="headerlink" title="2. 数据量："></a>2. 数据量：</h3><p>越大越好（初步测试用java大数据岗位搜索到了2500页的数据）</p>
<h3 id="3-数据爬取方式"><a href="#3-数据爬取方式" class="headerlink" title="3. 数据爬取方式"></a>3. 数据爬取方式</h3><p>由于网站上是通过ajax请求访问得到的数据，所以我们选择伪装请求进行访问</p>
<h3 id="4-初步页面显示数据结构："><a href="#4-初步页面显示数据结构：" class="headerlink" title="4. 初步页面显示数据结构："></a>4. 初步页面显示数据结构：</h3><ul>
<li>positionId = ‘’  #岗位id</li>
<li>positionName = ‘’  #岗位名称</li>
<li>salary = ‘’  # 薪水</li>
<li>education = ‘’  # 学历</li>
<li>positionAdvantage = ‘’  # 岗位优势</li>
<li>firstType = ‘’  # 岗位类型</li>
<li>skillLables = ‘’  #技能标签</li>
<li>jobNature = ‘’  # 是否全职</li>
<li>workYear = ‘’  # 工龄</li>
<li>companyFullName = ‘’  # 公司全称</li>
<li>city = ‘’  #公司城市</li>
<li>industryField = ‘’  # 领域</li>
<li>companyLabelList = ‘’  # 公司标签</li>
<li>companySize = ‘’  # 公司规模</li>
<li>financeStage = ‘’  # 公司资金状况，是否融资等<h3 id="5-工作地点具体信息数据结构"><a href="#5-工作地点具体信息数据结构" class="headerlink" title="5. 工作地点具体信息数据结构"></a>5. 工作地点具体信息数据结构</h3></li>
<li>advantage   职位优势</li>
<li>job-detail  工作职责/任职资格</li>
<li>job-address  工作地点</li>
<li>company-url  有意向联系我们</li>
</ul>
<h3 id="6-数据爬取过程中遇到的问题及解决方法（这里反爬虫技术可以写很多，比如伪ip，切换cookies，延时访问等方法）"><a href="#6-数据爬取过程中遇到的问题及解决方法（这里反爬虫技术可以写很多，比如伪ip，切换cookies，延时访问等方法）" class="headerlink" title=". 6.数据爬取过程中遇到的问题及解决方法（这里反爬虫技术可以写很多，比如伪ip，切换cookies，延时访问等方法）"></a>. 6.数据爬取过程中遇到的问题及解决方法（这里反爬虫技术可以写很多，比如伪ip，切换cookies，延时访问等方法）</h3><ol>
<li><p>通过requests.post请求访问网页数据的时候，伪装头文件传输过去的数据无法被识别到，导致多次请求到的数据都只是初始的头文件返回来的数据</p>
<blockquote>
<p>解决方法：直接将需要更新修改的数据添加在网页链接上传输到后台请求数据，多次尝试通过对网页重定向理解得到的解决方法。</p>
</blockquote>
</li>
<li><p>网页数据只显示30页的数据如何获取到更多</p>
<blockquote>
<p>解决方法：网页上虽然只显示了30页，但是通过在后台伪装头文件发现是可以获取到其数据库中未显示在网页上的数据的</p>
</blockquote>
</li>
<li><p>批量获取具体信息的时候访问多条后就程序自动停止，但是将停止的数据单独获取则没有问题</p>
<blockquote>
<p>问题原因：反爬虫机制，一次大量访问后封锁ip需要验证码登录</p>
<ul>
<li>解决方法：<br>中使用休眠方法但无效<br>访问一定条数之后使用伪ip访问</li>
</ul>
</blockquote>
</li>
<li><p>程序报异常，打印请求返回的数据时显示“{“status”:false,”msg”:”您操作太频繁,请稍后再访问”,”clientIp”:”218.206.101.37”,”state”:2402}”</p>
<blockquote>
<p>问题原因：网站设置了cookies拦截，对于手动设置的cookie模拟浏览器访问的爬虫程序自动进行了拉黑,并且不登录就无法查看所有的数据</p>
<ul>
<li>解决方法:<br>如果登录获取数据的话需要用到大量的拉勾网账号，比较复杂。这里通过使用手机app端的接口访问拉钩网进行数据的抓取。但是访问到一定数据量之后还是会被封，需要登录验证。通过app端口访问失败<br>访问30条之后便更新cookie进行爬取<br>最终成功方法：设置延时访问并访问一定数据量后进行自动获取当前浏览器的cookie进行更新，继续爬取数据</li>
</ul>
</blockquote>
</li>
</ol>
<h1 id="二-ElasticSearh的安装使说明"><a href="#二-ElasticSearh的安装使说明" class="headerlink" title="二.ElasticSearh的安装使说明"></a>二.ElasticSearh的安装使说明</h1><h2 id="环境说明linux-centos6-9（用户组mima12345，用户test-12345），ElasticSearch5-2-2-kibana5-2-2"><a href="#环境说明linux-centos6-9（用户组mima12345，用户test-12345），ElasticSearch5-2-2-kibana5-2-2" class="headerlink" title="环境说明linux centos6.9（用户组mima12345，用户test_12345），ElasticSearch5.2.2,kibana5.2.2"></a>环境说明linux centos6.9（用户组mima12345，用户test_12345），ElasticSearch5.2.2,kibana5.2.2</h2><h3 id="1-ElasticSearch介绍-抄一些书，资料什么的"><a href="#1-ElasticSearch介绍-抄一些书，资料什么的" class="headerlink" title="1.ElasticSearch介绍(抄一些书，资料什么的)"></a>1.ElasticSearch介绍(抄一些书，资料什么的)</h3><ol>
<li><p>index：类，所有对象的集合</p>
</li>
<li><p>document：类的实例化——》对象，以字典的形式存储，键为filed</p>
</li>
<li><p>type：对象的种类</p>
</li>
<li><p>shard（分片）：index所有数据在集群运算中被存放在多个节点上，称之为shard</p>
</li>
<li><p>replica：shard的保存副本，防止数据丢失系统出现意外</p>
</li>
<li><p>ElasticSearch的概念和数据库概念的对比<br> index   —-    库<br> document    —-    行<br> type    —-    表<br> mappings    —-    表结构</p>
</li>
<li><p>中文分词器 </p>
</li>
<li><p>部分操作</p>
<pre><code class="hljs awk">批量检索获取文档：
GET <span class="hljs-regexp">/lib/u</span>ser/_mget
&#123;
    <span class="hljs-regexp">//</span>检索id为<span class="hljs-number">1</span>和<span class="hljs-number">2</span>的对象
    <span class="hljs-string">&quot;ids&quot;</span>:[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>]
&#125;

批量操作：
Bulk API：

导入数据（在account.json文件的当前目录输入进行导入操作）：
$ curl -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -XPOST <span class="hljs-string">&#x27;localhost:9200/bank/account/_bulk?pretty&#x27;</span> --data-binary @accounts.json  
查看是否导入成功：
curl <span class="hljs-string">&quot;localhost:9200/_cat/indices?v&quot;</span>
数据导入并创建在kibana中创建index及相关使用
https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/magerguo/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">79849863</span>
</code></pre>




</li>
</ol>
<h3 id="2-ElasticSearch安装"><a href="#2-ElasticSearch安装" class="headerlink" title="2.ElasticSearch安装"></a>2.ElasticSearch安装</h3><ol>
<li>安装jdk<pre><code class="hljs awk">因为最新版的jdk1.<span class="hljs-number">9</span>和ElasticSearch存在部分不兼容，所以这里安装的是jdk1.<span class="hljs-number">8</span>版本的
具体步骤见：https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/xqzt/</span>p/<span class="hljs-number">4934451</span>.html
</code></pre></li>
<li>安装elasticSearch5.2<pre><code class="hljs awk">下载：wget https:<span class="hljs-regexp">//</span>artifacts.elastic.co<span class="hljs-regexp">/downloads/</span>elasticsearch/elasticsearch-<span class="hljs-number">5.2</span>.<span class="hljs-number">2</span>.tar.gz
解压：tar -zxvf elasticsearch-<span class="hljs-number">5.2</span>.<span class="hljs-number">2</span>.tar.gz -C <span class="hljs-regexp">/usr/</span>local/ElasticSearch
使用：.<span class="hljs-regexp">/bin/</span>elasticsearch
查看是否成功开启：打开“http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span>”有以下结果：
&#123;
  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;zLIR9JJ&quot;</span>,
  <span class="hljs-string">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;elasticsearch&quot;</span>,
  <span class="hljs-string">&quot;cluster_uuid&quot;</span> : <span class="hljs-string">&quot;thS180_KTj6vZK9szI3Mag&quot;</span>,
  <span class="hljs-string">&quot;version&quot;</span> : &#123;
    <span class="hljs-string">&quot;number&quot;</span> : <span class="hljs-string">&quot;5.2.2&quot;</span>,
    <span class="hljs-string">&quot;build_hash&quot;</span> : <span class="hljs-string">&quot;f9d9b74&quot;</span>,
    <span class="hljs-string">&quot;build_date&quot;</span> : <span class="hljs-string">&quot;2017-02-24T17:26:45.835Z&quot;</span>,
    <span class="hljs-string">&quot;build_snapshot&quot;</span> : false,
    <span class="hljs-string">&quot;lucene_version&quot;</span> : <span class="hljs-string">&quot;6.4.1&quot;</span>
  &#125;,
  <span class="hljs-string">&quot;tagline&quot;</span> : <span class="hljs-string">&quot;You Know, for Search&quot;</span>
&#125;成功开启</code></pre>

</li>
</ol>
<p>如图所示：</p>
<p><img src="D:\学习\毕业\自己论文相关文档\ElasticSearch相关截图\elasticsearch成功安装结果图.jpg"></p>
<ol start="3">
<li><p>安装elasticsearch-head插件</p>
<pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/scharfsinnig/</span>p/<span class="hljs-number">6706880</span>.html

安装node.js：
https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/liangxw1/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">78251025</span>安装npm：
安装npm:nodejs安装的时候附带了npm
下载elasticserach-head插件：
git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mobz/</span>elasticsearch-head.git
安装elasticsearch-head依赖包：
npm install -g grunt-cli 
遇到问题:
node npm install Error: CERT_UNTRUSTED
解决方法：
ssl验证问题，使用下面的命令取消ssl验证即可解决
npm config set strict-ssl false
打开方式：
在./elasticsearch-head目录下输入 grunt server 出现下图为正确无误结果</code></pre>
<p><img src="D:\学习\毕业\自己论文相关文档\ElasticSearch相关截图\elasticsearch-head插件成功安装截图.jpg"></p>
</li>
<li><p>安装kibana5.2.2</p>
<pre><code class="hljs angelscript">下载：wget https:<span class="hljs-comment">//artifacts.elastic.co/downloads/kibana/kibana-5.2.2-linux-x86_64.tar.gz</span>
解压：tar -zxvf kibana<span class="hljs-number">-5.2</span><span class="hljs-number">.2</span>-linux-x86_64.tar.gz -C /usr/local/ElasticSearch
在kibana安装目录的config下，编辑kibana.yml配置文件，添加如下配置：
server.port: <span class="hljs-number">5601</span>
server.host: <span class="hljs-string">&quot;本机的IP&quot;</span>
elasticsearch.url: <span class="hljs-string">&quot;http://192.168.222.131:9200&quot;</span>
其中elasticsearch.url 配置对应搜索引擎服务的真实地址

打开<span class="hljs-number">5601</span>端口（kinaba默认端口）：
 /sbin/iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT   写入修改
 /etc/init.d/iptables save   保存修改
 service iptables restart    重启防火墙，修改生效
启动服务
$ cd kibana<span class="hljs-number">-6.4</span><span class="hljs-number">.0</span>-linux-x86_64/bin
$ ./kibana
浏览器访问“http:/<span class="hljs-number">.192</span><span class="hljs-number">.168</span><span class="hljs-number">.222</span><span class="hljs-number">.131</span>:<span class="hljs-number">5601</span>”验证是否成功安装
结果如下图</code></pre>
<p><img src="D:\学习\毕业\自己论文相关文档\ElasticSearch相关截图\kibana成功安装.jpg"></p>
</li>
</ol>
<h3 id="3-ElasticSearch的初步使用及项目实现"><a href="#3-ElasticSearch的初步使用及项目实现" class="headerlink" title="3.ElasticSearch的初步使用及项目实现"></a>3.ElasticSearch的初步使用及项目实现</h3><h4 id="1-初步使用"><a href="#1-初步使用" class="headerlink" title="1.初步使用"></a>1.初步使用</h4><ol>
<li>查询功能的javaAPI使用<pre><code class="hljs actionscript"><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> java.net.InetAddress;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.action.get.GetResponse;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.common.settings.Settings;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.junit.Test;</span>

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EsDemo</span> </span>&#123;

	@Test
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test1() throws  Exception&#123;
		
		<span class="hljs-comment">//指定ES集群</span>
		Settings settings = Settings.builder().put(<span class="hljs-string">&quot;cluster.name&quot;</span>,<span class="hljs-string">&quot;my-application&quot;</span>).build();
		<span class="hljs-comment">//创建访问es服务器的客户端</span>
        InetSocketTransportAddress node = <span class="hljs-keyword">new</span> InetSocketTransportAddress(
                InetAddress.getByName(<span class="hljs-string">&quot;192.168.222.131&quot;</span>),<span class="hljs-number">9300</span>);

		TransportClient client = <span class="hljs-keyword">new</span> PreBuiltTransportClient(settings).addTransportAddress(node);
		<span class="hljs-comment">//数据查询</span>
		GetResponse response = client.prepareGet(<span class="hljs-string">&quot;lib&quot;</span>,<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>).execute().get();
		<span class="hljs-comment">//打印结果</span>
		System.out.println(response.getSourceAsString());
		
		client.close();
	&#125;
	
&#125;	
</code></pre></li>
<li>结构化查询</li>
</ol>
<pre><code class="hljs actionscript">①通过id检索实现简单查询

<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> java.io.BufferedWriter;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> java.io.File;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> java.io.FileWriter;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> java.net.InetAddress;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> java.net.UnknownHostException;</span>

<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.apache.lucene.util.fst.Util;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.action.get.GetResponse;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.action.search.SearchRequestBuilder;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.common.settings.Settings;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.index.query.QueryBuilder;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.search.SearchHit;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.search.SearchHits;</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</span>


<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">simpleSearch</span> </span>&#123;

	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) throws Exception &#123;
		<span class="hljs-comment">//指定ES集群</span>
		Settings settings = Settings.builder().put(<span class="hljs-string">&quot;cluster.name&quot;</span>,<span class="hljs-string">&quot;my-application&quot;</span>).build();
		<span class="hljs-comment">//创建访问es服务器的客户端</span>
		InetSocketTransportAddress node = <span class="hljs-keyword">new</span> InetSocketTransportAddress(
		InetAddress.getByName(<span class="hljs-string">&quot;192.168.222.131&quot;</span>),<span class="hljs-number">9300</span>);

		TransportClient client = <span class="hljs-keyword">new</span> PreBuiltTransportClient(settings).addTransportAddress(node);
		<span class="hljs-comment">//数据查询</span>
		
         BufferedWriter writer = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\94452\\Desktop\\1.txt&quot;</span>),<span class="hljs-literal">true</span>));


	     BoolQueryBuilder qb = QueryBuilders.boolQuery();
	     qb.must(QueryBuilders.termQuery(<span class="hljs-string">&quot;positionName&quot;</span>, <span class="hljs-string">&quot;java大数据&quot;</span>));
	     <span class="hljs-comment">// termQuery 是代表短语、不可拆分。就是不会把你teamId拿去切词，然后再去查，而是直接拿去查询</span>
	     <span class="hljs-comment">//prepareSearch写库的名称，setTypes写表的名称,setQuery写查询语句，setSize写默认结果返回条数的个数（默认为10条），get语句执行，返回的结果存放在getHits中</span>
	     SearchResponse response = client.prepareSearch(<span class="hljs-string">&quot;lagou&quot;</span>).setTypes(<span class="hljs-string">&quot;work&quot;</span>).setQuery(qb).setSize(<span class="hljs-number">3000</span>).get();
	     SearchHits searchHits =  response.getHits();
	     
	     System.out.println(<span class="hljs-string">&quot;查询到记录数=&quot;</span> + searchHits.getTotalHits());
	     <span class="hljs-keyword">for</span>(SearchHit hit:searchHits.getHits())&#123;
	    	 System.out.println(hit.getSourceAsString());
	    	 writer.write(hit.getSourceAsString()+<span class="hljs-string">&quot;\n&quot;</span>);
	     &#125;
	   
	     writer.close();
				
		client.close();

	&#125;

&#125;
</code></pre>

<pre><code class="hljs reasonml">②多条件查询，查询出学历要求为本科，工作城市在杭州，工作类型为全职的信息

import java.net.InetAddress;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.transport.client.PreBuiltTransportClient;

public <span class="hljs-keyword">class</span> simpleSearch &#123;

	public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;
		<span class="hljs-comment">// 指定ES集群</span>
		Settings settings = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Settings</span>.</span></span>builder<span class="hljs-literal">()</span>.put(<span class="hljs-string">&quot;cluster.name&quot;</span>, <span class="hljs-string">&quot;my-application&quot;</span>).build<span class="hljs-literal">()</span>;
		<span class="hljs-comment">// 创建访问es服务器的客户端</span>
		InetSocketTransportAddress node = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InetSocketTransportAddress(InetAddress.<span class="hljs-params">getByName</span>(<span class="hljs-string">&quot;192.168.222.131&quot;</span>)</span>,
				<span class="hljs-number">9300</span>);

		TransportClient client = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PreBuiltTransportClient(<span class="hljs-params">settings</span>)</span>.add<span class="hljs-constructor">TransportAddress(<span class="hljs-params">node</span>)</span>;
		<span class="hljs-comment">// 数据查询</span>

		QueryBuilder qb = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>.must(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>term<span class="hljs-constructor">Query(<span class="hljs-string">&quot;education.keyword&quot;</span>, <span class="hljs-string">&quot;本科&quot;</span>)</span>)
				.must(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>term<span class="hljs-constructor">Query(<span class="hljs-string">&quot;city.keyword&quot;</span>, <span class="hljs-string">&quot;杭州&quot;</span>)</span>)
				.must(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>term<span class="hljs-constructor">Query(<span class="hljs-string">&quot;jobNature.keyword&quot;</span>, <span class="hljs-string">&quot;全职&quot;</span>)</span>);

		SearchRequestBuilder sv = client.prepare<span class="hljs-constructor">Search(<span class="hljs-string">&quot;lagou&quot;</span>)</span>.set<span class="hljs-constructor">Types(<span class="hljs-string">&quot;work&quot;</span>)</span>.set<span class="hljs-constructor">Query(<span class="hljs-params">qb</span>)</span>.set<span class="hljs-constructor">From(0)</span>.set<span class="hljs-constructor">Size(100)</span>;

		SearchResponse response = sv.get<span class="hljs-literal">()</span>;
		SearchHits searchHits = response.get<span class="hljs-constructor">Hits()</span>;
		<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;查询到记录数=&quot;</span> + searchHits.get<span class="hljs-constructor">TotalHits()</span>);
		<span class="hljs-keyword">for</span> (SearchHit hit : searchHits.get<span class="hljs-constructor">Hits()</span>) &#123;
			<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hit.get<span class="hljs-constructor">SourceAsString()</span>);
		&#125;

		client.close<span class="hljs-literal">()</span>;

	&#125;

&#125;
</code></pre>


<ol start="3">
<li>出现问题及解决方法：<blockquote>
<p>对于包含中文字符的查询语句无法执行进行</p>
<ul>
<li>问题原因：elasticsearch 里默认的IK分词器是会将每一个中文都进行了分词的切割，所以你直接想查一整个词，或者一整句话是无返回结果的。</li>
<li>解决方法：</li>
</ul>
</blockquote>
<pre><code class="hljs less"><span class="hljs-selector-tag">termQuery</span>(<span class="hljs-string">&quot;cityName&quot;</span>, <span class="hljs-string">&quot;北京市&quot;</span>);
改成
<span class="hljs-selector-tag">termQuery</span>(<span class="hljs-string">&quot;cityName.keyword&quot;</span>, <span class="hljs-string">&quot;北京市&quot;</span>);
就可以了</code></pre>


</li>
</ol>
<h4 id="2-项目实现"><a href="#2-项目实现" class="headerlink" title="2.项目实现"></a>2.项目实现</h4><ol>
<li>数据结构的设计并转换数据格式</li>
</ol>
<ul>
<li><p>原数据格式为：</p>
<pre><code class="hljs angelscript"><span class="hljs-number">5309423</span>	大数据Java工程师	<span class="hljs-number">8</span>k<span class="hljs-number">-16</span>k	本科	六险一金，补贴，带薪年假	开发|测试|运维类		全职	<span class="hljs-number">1</span><span class="hljs-number">-3</span>年	成都数联铭品科技有限公司	成都	带薪年假/绩效奖金/扁平管理/定期体检	<span class="hljs-number">150</span><span class="hljs-number">-500</span>人	C轮</code></pre></li>
<li><p>需要的格式为：（index行为设置索引，第二行为数据）</p>
<pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;index&quot;</span>: &#123;<span class="hljs-attr">&quot;_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;&#125;
&#123;<span class="hljs-attr">&quot;positionId&quot;</span>:<span class="hljs-string">&quot;5309423&quot;</span>,<span class="hljs-attr">&quot;positionName&quot;</span>:<span class="hljs-string">&quot;大数据Java工程师&quot;</span>,<span class="hljs-attr">&quot;salary&quot;</span>:<span class="hljs-string">&quot;8k-16k&quot;</span>,<span class="hljs-attr">&quot;education&quot;</span>:<span class="hljs-string">&quot;本科&quot;</span>,<span class="hljs-attr">&quot;positionAdvantage&quot;</span>:<span class="hljs-string">&quot;六险一金，补贴，带薪年假&quot;</span>,<span class="hljs-attr">&quot;firstType&quot;</span>:<span class="hljs-string">&quot;开发|测试|运维类&quot;</span>,<span class="hljs-attr">&quot;skillLables&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-attr">&quot;jobNature&quot;</span>:<span class="hljs-string">&quot;全职&quot;</span>,<span class="hljs-attr">&quot;workYear&quot;</span>:<span class="hljs-string">&quot;1-3年&quot;</span>,<span class="hljs-attr">&quot;companyFullName&quot;</span>:<span class="hljs-string">&quot;成都数联铭品科技有限公司&quot;</span>,<span class="hljs-attr">&quot;city&quot;</span>:<span class="hljs-string">&quot;成都&quot;</span>,<span class="hljs-attr">&quot;companyLabelList&quot;</span>:<span class="hljs-string">&quot;带薪年假/绩效奖金/扁平管理/定期体检&quot;</span>,<span class="hljs-attr">&quot;companySize&quot;</span>:<span class="hljs-string">&quot;150-500人&quot;</span>,<span class="hljs-attr">&quot;financeStage&quot;</span>:<span class="hljs-string">&quot;C轮&quot;</span>,<span class="hljs-attr">&quot;detailInfo&quot;</span>:<span class="hljs-string">&quot;https://www.lagou.com/jobs/5309423.html&quot;</span>&#125;</code></pre></li>
<li><p>以上通过python编程语言实现数据结构的转换，并存储为”.json”文件</p>
</li>
<li><p>出现相关问题及解决方法：</p>
<pre><code class="hljs awk">java.lang.NoClassDefFoundError:org<span class="hljs-regexp">/apache/</span>logging<span class="hljs-regexp">/log4j/</span>Logger问题</code></pre>

<p><img src="C:\Users\94452\Desktop\1.png" alt="1"></p>
<pre><code class="hljs angelscript">问题原因及解决方法：
问题原因：log4j <span class="hljs-number">1.6</span>不适用于ElasticSearch <span class="hljs-number">5.2</span><span class="hljs-number">.2</span>。而且你还需要添加库的依赖slf4j-simple，log4j-to-slf4j和log4j-api。
解决方法：
必须在pom中明确包含Log4J <span class="hljs-number">2</span>作为依赖项，将之前的log4j依赖替换成以下依赖。
Maven添加以下依赖：</code></pre>

<p><img src="C:\Users\94452\Desktop\2.png" alt="2"></p>
</li>
</ul>
<ol start="2">
<li>批量数据导入ElasticSearch系统</li>
</ol>
<ul>
<li><p>数据导入</p>
<pre><code class="hljs autoit">curl -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -XPOST <span class="hljs-string">&#x27;192.168.222.131:9200/lagou/work/_bulk?pretty&#x27;</span> --data-<span class="hljs-built_in">binary</span> <span class="hljs-symbol">@work</span>.json</code></pre></li>
<li><p>查看结果<br>如图1<img src="D:\学习\毕业\自己论文相关文档\ElasticSearch相关截图\图1.png">，图2所示</p>
<p><img src="D:\学习\毕业\自己论文相关文档\ElasticSearch相关截图\图2.png" alt="图2"></p>
</li>
<li><p>通过kibana建立索引（操作步骤）</p>
</li>
</ul>
<ol start="3">
<li>检索数据结构的设计</li>
</ol>
<ul>
<li>positionName:职位名称</li>
<li>salary: 20-30k(这里的数据检索前需要处理，仔细想想该怎么做)</li>
<li>education:本科/大专/硕士/不限</li>
<li>skillLables:手动填写  </li>
<li>jobNature:全职/实习</li>
<li>workYear：1-3年/3-5年/不限/应届毕业生</li>
<li>city:城市</li>
<li>公司规模：100-200人等等</li>
</ul>
<ol start="4">
<li>通过编写javaAPI接口实现搜索功能<br> javaAPI中主要使用ElasticSearch中的布尔查询来实现复杂信息的检索功能。 <pre><code class="hljs avrasm"><span class="hljs-symbol">must:</span>必须出现在匹配文档中，并且会影响匹配得分
<span class="hljs-symbol">filter:</span>必须出现在匹配文档中，并且匹配得分会被忽略
<span class="hljs-symbol">should:</span>应该出现在匹配文档中</code></pre>

</li>
</ol>
<h1 id="三-小程序开发部分"><a href="#三-小程序开发部分" class="headerlink" title="三.小程序开发部分"></a>三.小程序开发部分</h1><blockquote>
<p>小程序的相关概念学习：</p>
<ul>
<li>index.js 文件配置页面入口与逻辑,还有存储数据并与网页使用的数据进行绑定;还有函数的绑定也是放在js文件中的</li>
<li>index.wxml配置布局与ui,index.wxss为页面的样式文件（类似与css）,二级目录下的json文件可有可无，如果存在的话会覆盖掉app.json的数据，wxss文件同理</li>
</ul>
</blockquote>
<ol>
<li>小程序开发软件的安装</li>
</ol>
<ol start="2">
<li>小程序软件的编写</li>
</ol>
<ul>
<li>前台与后台的交互实现部分<blockquote>
<p>服务器端使用的是tomcat8，通过微信小程序的wx.request方法对服务器端进行servlet请求，然后通过servlet层对dao层发送搜索请求，dao层处理完成后得到结果再返回微信小程序端。    </p>
</blockquote>
</li>
</ul>
<blockquote>
<p>实现样例：通过小程序点击按钮对“<a href="http://localhost:8080/weixin/getInfoServlet%E2%80%9D%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%B9%B6%E4%BC%A0%E8%BE%93%E8%BF%87%E5%8E%BBdata%E5%86%85%E7%9A%84%E5%80%BC%EF%BC%8C%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E6%98%AF%E5%90%A6%E4%BC%A0%E8%BE%93%E8%BF%87%E6%9D%A5">http://localhost:8080/weixin/getInfoServlet”发送请求，并传输过去data内的值，在服务器端查看数据是否传输过来</a></p>
</blockquote>
<pre><code class="hljs scala"><span class="hljs-comment">//index.js</span>

<span class="hljs-type">Page</span>(&#123;
  bindtest: function () &#123;
    wx.request(&#123;
      url: <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//localhost:8080/weixin/getInfoServlet&#x27;,</span>
      data: &#123;
        username: <span class="hljs-symbol">&#x27;00</span>1&#x27;,
        password: <span class="hljs-symbol">&#x27;ab</span>c&#x27;
      &#125;,
      method: <span class="hljs-symbol">&#x27;GE</span>T&#x27;,
      header: &#123;
        <span class="hljs-symbol">&#x27;content</span>-<span class="hljs-class"><span class="hljs-keyword">type</span>&#x27;</span>: <span class="hljs-symbol">&#x27;application</span>/json&#x27; <span class="hljs-comment">// 默认值</span>
      &#125;,
      success: function (res) &#123;
        console.log(res.data);
      &#125;,
      fail: function (res) &#123;
        console.log(<span class="hljs-string">&quot;.....fail.....&quot;</span>);
      &#125;
    &#125;)
  &#125;
&#125;
)

<span class="hljs-comment">//index.wxml</span>

 &lt;view&gt;
  &lt;button bindtap=<span class="hljs-symbol">&#x27;bindtes</span>t&#x27;&gt;test&lt;/button&gt;
  &lt;/view&gt;

<span class="hljs-comment">//servlet</span>

<span class="hljs-keyword">package</span> com.weixin.servlet;

<span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;
<span class="hljs-keyword">import</span> java.io.<span class="hljs-type">Writer</span>;

<span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;
<span class="hljs-keyword">import</span> javax.servlet.annotation.<span class="hljs-type">WebServlet</span>;
<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;
<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;
<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;

<span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/getInfoServlet&quot;</span>)
public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">getInfoServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;
	<span class="hljs-keyword">private</span> static <span class="hljs-keyword">final</span> long serialVersionUID = <span class="hljs-number">1</span>L;
       
    public getInfoServlet() &#123;
        <span class="hljs-keyword">super</span>();
        <span class="hljs-comment">// TODO Auto-generated constructor stub</span>
    &#125;

	<span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;
		<span class="hljs-comment">// TODO Auto-generated method stub</span>
		response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);          
        <span class="hljs-comment">/* 设置响应头允许ajax跨域访问 */</span>  
        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);  
        <span class="hljs-comment">/* 星号表示所有的异域请求都可以接受， */</span>  
        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;GET,POST&quot;</span>);  
       
        <span class="hljs-comment">//获取微信小程序get的参数值并打印</span>
        <span class="hljs-type">String</span> username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);
        <span class="hljs-type">String</span> password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);
        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;username=&quot;</span>+username+<span class="hljs-string">&quot; ,password=&quot;</span>+password);
        
        <span class="hljs-comment">//返回值给微信小程序</span>
        <span class="hljs-type">Writer</span> out = response.getWriter(); 
        out.write(<span class="hljs-string">&quot;成功访问客户端&quot;</span>);
        out.flush();   
    &#125;

	<span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;
		<span class="hljs-comment">// TODO Auto-generated method stub</span>
		doGet(request, response);
	&#125;

&#125;
</code></pre>
<blockquote>
<p>查看结果：先打开tomcat8，然后打开小程序客户端点击test按钮如图（小程序测试按钮截图），可以查看到小程序的调试器界面出现了“成功访问客户端”几个字，而这几个字是通过“<a href="http://localhost:8080/weixin/getInfoServlet%E2%80%9D%E6%89%80%E8%BF%94%E5%9B%9E%E5%88%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82%E7%84%B6%E5%90%8E%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%9F%A5%E7%9C%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E4%BC%A0%E8%BE%93%E8%BF%87%E5%8E%BB%E7%9A%84data%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F%E6%8E%A5%E6%94%B6%EF%BC%8C%E6%89%93%E5%BC%80%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%EF%BC%88%E5%A6%82%E5%9B%BE%EF%BC%9A%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%88%AA%E5%9B%BE%EF%BC%89%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%95%B0%E6%8D%AE%E6%88%90%E5%8A%9F%E4%BC%A0%E8%BE%93%E8%BF%87%E5%8E%BB%E4%BA%86%E3%80%82">http://localhost:8080/weixin/getInfoServlet”所返回到小程序端的结果。然后在服务器端查看小程序端传输过去的data是否成功接收，打开服务器端（如图：小程序测试服务器端截图）可以看到数据成功传输过去了。</a><br>提交按钮</p>
</blockquote>
<pre><code class="hljs haskell"><span class="hljs-title">sequenceDiagram</span>
小程序端-&gt;&gt;服务器端: 传输<span class="hljs-class"><span class="hljs-keyword">data</span></span>
服务器端-&gt;&gt;小程序端: 返回“成功访问客户端”说明，并打印<span class="hljs-class"><span class="hljs-keyword">data</span></span></code></pre>


<ul>
<li>项目具体实现<blockquote>
<p>selvert层：处理小程序端传过来的请求，传输到dao层进行查询处理</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>dao层：进行数据检索功能</p>
</blockquote>
<blockquote>
<p>model层：<br>该层创建信息对象（字段全部都为ES中的text格式，在java对象中对应设置为string格式）</p>
</blockquote>
<ul>
<li>系统设计：三个页面</li>
<li><ul>
<li>主页，显示轮换广告页面和一些主页推荐公司信息</li>
</ul>
</li>
<li><ul>
<li>搜索页面，添加搜索条件进行</li>
</ul>
</li>
<li><ul>
<li>个人信息页面</li>
</ul>
</li>
</ul>
<ol start="3">
<li>遇到的问题及解决方法</li>
</ol>
<ul>
<li>小程序页面的编写及功能实现，主要两个功能：</li>
<li><blockquote>
<p>1.不含条件的工作名称检索（默认） 2.含条件的工作名称检索。</p>
</blockquote>
</li>
<li>服务器端的servlet层从小程序端获取到数据后，传入dao层进行数据检索，并返回前端页面显示结果。目前存在以下问题:</li>
<li><blockquote>
<p>1.在使用javaAPI的过程中对于多条件检索语句如何编写？2.检索到的数据以什么格式存储并传输到前端的小程序中？</p>
</blockquote>
</li>
<li>小程序接收到数据后静态刷新页面显示结果页面。以列表形式将所有的信息打印出来，点击直接跳转到detailInfo的值包含的页面。</li>
<li>多单选框如何传入数据</li>
<li>maven项目依赖包无法导入tomcat中进行部署（<a href="https://blog.csdn.net/class2class/article/details/83066073%EF%BC%89">https://blog.csdn.net/class2class/article/details/83066073）</a></li>
<li>前端与后端的数据传输部分（json格式的修改）</li>
<li>事件绑定bindtap等</li>
</ul>
]]></content>
      <categories>
        <category>学校</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>ElasticSearch</tag>
        <tag>拉勾网</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer</title>
    <url>/2020/12/17/%E5%89%91%E6%8C%87offer/</url>
    <content><![CDATA[<blockquote>
<p>摘录自<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.m">https://github.com/CyC2018/CS-Notes/blob/master/notes/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.m</a></p>
</blockquote>
<h1 id="3-数组中的重复数据"><a href="#3-数组中的重复数据" class="headerlink" title="3. 数组中的重复数据"></a>3. 数组中的重复数据</h1>]]></content>
      <tags>
        <tag>算法刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask之缓慢的http拒绝服务攻击漏洞解决</title>
    <url>/2020/11/06/python/Flask%E4%B9%8B%E7%BC%93%E6%85%A2%E7%9A%84http%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E6%BC%8F%E6%B4%9E%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="1-什么是缓慢的http拒绝服务攻击漏洞"><a href="#1-什么是缓慢的http拒绝服务攻击漏洞" class="headerlink" title="1.什么是缓慢的http拒绝服务攻击漏洞"></a>1.什么是缓慢的http拒绝服务攻击漏洞</h1><p>缓慢的http拒绝服务攻击是一种专门针对于Web的应用层拒绝服务攻击，攻击者操纵网络上的肉鸡，对目标Web服务器进行海量http request攻击，直到服务器带宽被打满，造成了拒绝服务。</p>
<p>慢速HTTP拒绝服务攻击经过不断的演变和发展，主要有三种攻击类型，分别是Slow headers、Slow body、Slow read。</p>
<ul>
<li><p><code>slowloris</code>：完整的http请求是以 <code>\r\n\r\n</code> 结尾，攻击时仅发送 <code>\r\n</code>，少发送一个 <code>\r\n</code>，服务器认为请求还未发完，就会一直等待直至超时</p>
</li>
<li><p><code>slow post</code>：通过声明一个较大的content-length后，body缓慢发送，导致服务器一直等待</p>
<ul>
<li><code>slow read</code>：向服务器发送一个正常合法的read请求，请求一个很大的文件，但把TCP滑动窗口设置得很小，服务器就会以滑动窗口的大小切割文件，然后发送，这时文件会长期存放在内存中，消耗资源</li>
</ul>
</li>
</ul>
<h1 id="2-Flask应对措施"><a href="#2-Flask应对措施" class="headerlink" title="2. Flask应对措施"></a>2. Flask应对措施</h1><ul>
<li><p>限制每次请求数据的大小</p>
</li>
<li><p>限制单个HTTP请求头的最大许可时间</p>
</li>
<li><p>限制单个ip请求数量</p>
</li>
<li><p>。。。。。。</p>
</li>
</ul>
<p>#3. 使用slowhttptest测试漏洞</p>
<h2 id="3-1-slowhttptest的安装"><a href="#3-1-slowhttptest的安装" class="headerlink" title="3.1 slowhttptest的安装"></a>3.1 slowhttptest的安装</h2><blockquote>
<p> 安装说明:<a href="https://github.com/shekyan/slowhttptest/wiki/InstallationAndUsage1">https://github.com/shekyan/slowhttptest/wiki/InstallationAndUsage1</a></p>
</blockquote>
<ol>
<li><p>下载压缩包：<a href="https://github.com/shekyan/slowhttptest/releases">https://github.com/shekyan/slowhttptest/releases</a></p>
</li>
<li><p>安装libssl-dev<br><code>$ yum install openssl openssl-devel</code></p>
</li>
<li><p>安装C++编译器<br><code>$ yum install gcc-c++</code></p>
</li>
<li><p>解压</p>
<p><code>$ tar -xzvf slowhttptest-x.x.tar.gz</code> </p>
</li>
<li><p>编译安装</p>
<pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> slowhttp<span class="hljs-built_in">test-x</span>.x
<span class="hljs-variable">$</span> ./configure -<span class="hljs-literal">-prefix</span>=PREFIX
<span class="hljs-variable">$</span> make
<span class="hljs-variable">$</span> sudo make install</code></pre>

</li>
</ol>
<h2 id="3-2-参数说明及使用测试"><a href="#3-2-参数说明及使用测试" class="headerlink" title="3.2 参数说明及使用测试"></a>3.2 参数说明及使用测试</h2><pre><code class="hljs diff"><span class="hljs-deletion">-g      在测试完成后，以时间戳为名生成一个CVS和HTML文件的统计数据</span>
<span class="hljs-deletion">-H      SlowLoris模式</span>
<span class="hljs-deletion">-B      Slow POST模式</span>
<span class="hljs-deletion">-R      Range Header模式</span>
<span class="hljs-deletion">-X      Slow Read模式</span>
<span class="hljs-deletion">-c      number of connections 测试时建立的连接数</span>
<span class="hljs-deletion">-d      HTTP proxy host:port  为所有连接指定代理</span>
<span class="hljs-deletion">-e      HTTP proxy host:port  为探测连接指定代理</span>
<span class="hljs-deletion">-i      seconds 在slowrois和Slow POST模式中，指定发送数据间的间隔。</span>
<span class="hljs-deletion">-l      seconds 测试维持时间</span>
<span class="hljs-deletion">-n      seconds 在Slow Read模式下，指定每次操作的时间间隔。</span>
<span class="hljs-deletion">-o      file name 使用-g参数时，可以使用此参数指定输出文件名</span>
<span class="hljs-deletion">-p      seconds 指定等待时间来确认DoS攻击已经成功</span>
<span class="hljs-deletion">-r      connections per second 每秒连接个数</span>
<span class="hljs-deletion">-s      bytes 声明Content-Length header的值</span>
<span class="hljs-deletion">-t      HTTP verb 在请求时使用什么操作，默认GET</span>
<span class="hljs-deletion">-u      URL  指定目标url</span>
<span class="hljs-deletion">-v      level 日志等级（详细度）</span>
<span class="hljs-deletion">-w      bytes slow read模式中指定tcp窗口范围下限</span>
<span class="hljs-deletion">-x      bytes 在slowloris and Slow POST tests模式中，指定发送的最大数据长度</span>
<span class="hljs-deletion">-y      bytes slow read模式中指定tcp窗口范围上限</span>
<span class="hljs-deletion">-z      bytes 在每次的read()中，从buffer中读取数据量</span></code></pre>

<h2 id="3-2-1参考实例："><a href="#3-2-1参考实例：" class="headerlink" title="3.2.1参考实例："></a>3.2.1参考实例：</h2><p>slowloris模式：</p>
<pre><code class="hljs apache"><span class="hljs-attribute">slowhttptest</span> -c <span class="hljs-number">1000</span> -H -g -o my_header_stats -i <span class="hljs-number">10</span> -r <span class="hljs-number">200</span> -t GET -u https://xxxxxx.xxxxx.xx -x <span class="hljs-number">24</span> -p <span class="hljs-number">3</span></code></pre>

<p>slow post模式：</p>
<pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">slowhttptest</span> <span class="hljs-string">-c</span> <span class="hljs-number">3000</span> <span class="hljs-string">-B</span> <span class="hljs-string">-g</span> <span class="hljs-string">-o</span> <span class="hljs-string">my_body_stats</span> <span class="hljs-string">-i</span> <span class="hljs-number">110</span> <span class="hljs-string">-r</span> <span class="hljs-number">200</span> <span class="hljs-string">-s</span> <span class="hljs-number">8192</span> <span class="hljs-string">-t</span> <span class="hljs-string">FAKEVERB</span> <span class="hljs-string">-u</span> <span class="hljs-string">http://xxx.xxx.xxx</span> <span class="hljs-string">-x</span> <span class="hljs-number">10</span> <span class="hljs-string">-p</span> <span class="hljs-number">3</span></code></pre>

<p>slow read模式：</p>
<pre><code class="hljs angelscript">$ slowhttptest -c <span class="hljs-number">8000</span> -X -r <span class="hljs-number">200</span> -w <span class="hljs-number">512</span> -y <span class="hljs-number">1024</span> -n <span class="hljs-number">5</span> -z <span class="hljs-number">32</span> -k <span class="hljs-number">3</span> -u https:<span class="hljs-comment">//xxx.xxx.xxx -p 3</span></code></pre>

<h1 id="4-使用说明"><a href="#4-使用说明" class="headerlink" title="4.使用说明"></a>4.使用说明</h1><p>以下是分别使用四种方式对自己的服务进行测试的结果，先开始不太懂每个曲线图的意义。这里说明一下，上面的参数可以设置连接数量以及持续请求时间等参数。然后下面展现的是曲线图，主要看在测试程序运行时间内Connected的数量是否被释放，是否通过服务的设置不符合条件的请求被服务端关闭，Service是否正常运行（服务是否存在被漏洞攻击程序给冲宕机了）。</p>
<p>##4.1 RANGE HEADERS</p>
<img src="/img/Flask之缓慢的http拒绝服务攻击漏洞解决/image-20201115151719480.png" alt="rangeHeader" style="zoom:67%;" />

<p>##4.2 SLOW HEADERS(SlowLoris)</p>
<img src="/img/Flask之缓慢的http拒绝服务攻击漏洞解决/image-20201115151939829.png" alt="image-20201115151939829" style="zoom: 67%;" />

<p>##4.3 SLOW BODY(SLOW POST)</p>
<img src="/img/Flask之缓慢的http拒绝服务攻击漏洞解决/image-20201115154404536.png" alt="image-20201115154404536" style="zoom:67%;" />

<h2 id="4-4-SLOW-READ"><a href="#4-4-SLOW-READ" class="headerlink" title="4.4  SLOW READ"></a>4.4  SLOW READ</h2><img src="/img/Flask之缓慢的http拒绝服务攻击漏洞解决/image-20201115152038635.png" style="zoom:67%;" />

]]></content>
      <categories>
        <category>工作相关</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>差补计算器及使用pyqt5入门写一个简单的界面</title>
    <url>/2020/09/17/python/pyqt5%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-pyqt5及qtdesigner的安装"><a href="#1-pyqt5及qtdesigner的安装" class="headerlink" title="1. pyqt5及qtdesigner的安装"></a>1. pyqt5及qtdesigner的安装</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>安装步骤网上一堆自行谷歌</p>
<h3 id="1-2-使用pyqt5生成ui文件后无法转py，报错"><a href="#1-2-使用pyqt5生成ui文件后无法转py，报错" class="headerlink" title="1.2 使用pyqt5生成ui文件后无法转py，报错"></a>1.2 使用pyqt5生成ui文件后无法转py，报错</h3><p>错误如下:</p>
<blockquote>
<p>Fatal error in launcher: Unable to create process using ‘“‘</p>
</blockquote>
<p>原因：</p>
<blockquote>
<p>执行语句错误，完整应为</p>
<p>“python -m PyQt5.uic.pyuic untitled.ui -o untitled.py”</p>
</blockquote>
<blockquote>
<p>注意在pycharm中的tools中的pyuic的settings—External Tools—(External Tools)Pyuic内Tools settings设置的正确，正确如下</p>
</blockquote>
<pre><code class="hljs stylus">Program: D:\Anaconda3\envs\python36\python.exe
Arguments: -m PyQt5<span class="hljs-selector-class">.uic</span><span class="hljs-selector-class">.pyuic</span> <span class="hljs-variable">$FileName</span>$ -o <span class="hljs-variable">$FileNameWithoutExtension</span>$.py
Working directory: <span class="hljs-variable">$FileDir</span>$</code></pre>



<h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h1><p>功能比较简单，就是一个根据时间和工作日/休息日的不同计算出差补助。</p>
<p>主要是因为之前没用过pyqt5，所以突发奇想尝试一下，发现也是蛮简单的。</p>
<img src="pyqt5使用及出现问题\2.png" alt="uTools_1617699763437" style="zoom:50%;" />



<pre><code class="hljs xml"># -*- coding: utf-8 -*-

# Form implementation generated from reading ui file &#x27;untitled.ui&#x27;
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtWidgets
from datetime import datetime
import datetime as datetime0
# 添加这一行可以在程序捕获异常的时候pyqt不崩溃
import cgitb
cgitb.enable( format = &#x27;text&#x27;)

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName(&quot;Form&quot;)
        Form.resize(586, 401)
        self.textEdit = QtWidgets.QTextEdit(Form)
        self.textEdit.setGeometry(QtCore.QRect(130, 100, 141, 41))
        self.textEdit.setObjectName(&quot;textEdit&quot;)
        self.textEdit_2 = QtWidgets.QTextEdit(Form)
        self.textEdit_2.setGeometry(QtCore.QRect(420, 100, 121, 41))
        self.textEdit_2.setObjectName(&quot;textEdit_2&quot;)
        self.textEdit_4 = QtWidgets.QTextEdit(Form)
        self.textEdit_4.setGeometry(QtCore.QRect(420, 190, 121, 41))
        self.textEdit_4.setObjectName(&quot;textEdit_4&quot;)
        self.textEdit_5 = QtWidgets.QTextEdit(Form)
        self.textEdit_5.setGeometry(QtCore.QRect(210, 270, 281, 91))
        self.textEdit_5.setObjectName(&quot;textEdit_5&quot;)
        self.textEdit_5.setReadOnly(True)
        self.textEdit_6 = QtWidgets.QTextEdit(Form)
        self.textEdit_6.setGeometry(QtCore.QRect(130, 190, 141, 41))
        self.textEdit_6.setObjectName(&quot;textEdit_6&quot;)

        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(110, 290, 61, 41))
        self.pushButton.setObjectName(&quot;pushButton&quot;)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(40, 100, 71, 31))
        self.label.setObjectName(&quot;label&quot;)
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(320, 100, 81, 31))
        self.label_2.setObjectName(&quot;label_2&quot;)
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(30, 190, 91, 31))
        self.label_3.setObjectName(&quot;label_3&quot;)
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(320, 200, 91, 16))
        self.label_4.setObjectName(&quot;label_4&quot;)
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(40, 40, 281, 41))
        self.label_5.setObjectName(&quot;label_5&quot;)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        Form.show()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate(&quot;Form&quot;, &quot;Form&quot;))
        self.textEdit.setHtml(_translate(&quot;Form&quot;,
                                         &quot;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> \<span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.0//EN\&quot; \&quot;http://www.w3.org/TR/REC-html40/strict.dtd\&quot;&gt;\n&quot;</span></span>
<span class="hljs-meta">                                         <span class="hljs-meta-string">&quot;&lt;html&gt;&lt;head&gt;&lt;meta name=\&quot;qrichtext\&quot; content=\&quot;1\&quot; /&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n&quot;</span></span>
<span class="hljs-meta">                                         <span class="hljs-meta-string">&quot;p, li &#123; white-space: pre-wrap; &#125;\n&quot;</span></span>
<span class="hljs-meta">                                         <span class="hljs-meta-string">&quot;&lt;/style&gt;&lt;/head&gt;&lt;body style=\&quot; font-family:\&#x27;SimSun\&#x27;; font-size:9pt; font-weight:400; font-style:normal;\&quot;&gt;\n&quot;</span></span>
<span class="hljs-meta">                                         <span class="hljs-meta-string">&quot;&lt;p style=\&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.pushButton.setText(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;, &quot;计算&quot;))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.label.setText(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;, &quot;起始时间：&quot;))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.label_2.setText(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;, &quot;结束时间：&quot;))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.label_3.setText(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;, &quot;工作日价格：&quot;))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.label_4.setText(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;, &quot;休息日价格：&quot;))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.label_5.setText(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;, &quot;时间输入格式：20200101&quot;))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.textEdit_2.setHtml(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;,</span>
<span class="hljs-meta">                                           &quot;&lt;!<span class="hljs-meta-keyword">DOCTYPE</span> <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> \&quot;-//<span class="hljs-meta-keyword">W3C</span>//<span class="hljs-meta-keyword">DTD</span> <span class="hljs-meta-keyword">HTML</span> 4.0//<span class="hljs-meta-keyword">EN</span>\&quot; \&quot;<span class="hljs-meta-keyword">http</span>://<span class="hljs-meta-keyword">www</span>.<span class="hljs-meta-keyword">w3</span>.<span class="hljs-meta-keyword">org</span>/<span class="hljs-meta-keyword">TR</span>/<span class="hljs-meta-keyword">REC-html4</span>0/<span class="hljs-meta-keyword">strict</span>.<span class="hljs-meta-keyword">dtd</span>\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;<span class="hljs-meta-keyword">html</span>&gt;&lt;<span class="hljs-meta-keyword">head</span>&gt;&lt;<span class="hljs-meta-keyword">meta</span> <span class="hljs-meta-keyword">name</span>=\&quot;<span class="hljs-meta-keyword">qrichtext</span>\&quot; <span class="hljs-meta-keyword">content</span>=\&quot;1\&quot; /&gt;&lt;<span class="hljs-meta-keyword">style</span> <span class="hljs-meta-keyword">type</span>=\&quot;<span class="hljs-meta-keyword">text</span>/<span class="hljs-meta-keyword">css</span>\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;p, <span class="hljs-meta-keyword">li</span> &#123; <span class="hljs-meta-keyword">white-space</span>: <span class="hljs-meta-keyword">pre-wrap</span>; &#125;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;/<span class="hljs-meta-keyword">style</span>&gt;&lt;/<span class="hljs-meta-keyword">head</span>&gt;&lt;<span class="hljs-meta-keyword">body</span> <span class="hljs-meta-keyword">style</span>=\&quot; <span class="hljs-meta-keyword">font-family</span>:\&#x27;<span class="hljs-meta-keyword">SimSun</span>\&#x27;; <span class="hljs-meta-keyword">font-size</span>:9<span class="hljs-meta-keyword">pt</span>; <span class="hljs-meta-keyword">font-weight</span>:400; <span class="hljs-meta-keyword">font-style</span>:<span class="hljs-meta-keyword">normal</span>;\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;p <span class="hljs-meta-keyword">style</span>=\&quot;-<span class="hljs-meta-keyword">qt-paragraph-type</span>:<span class="hljs-meta-keyword">empty</span>; <span class="hljs-meta-keyword">margin-top</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-bottom</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-left</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-right</span>:0<span class="hljs-meta-keyword">px</span>; -<span class="hljs-meta-keyword">qt-block-indent</span>:0; <span class="hljs-meta-keyword">text-indent</span>:0<span class="hljs-meta-keyword">px</span>;\&quot;&gt;&lt;<span class="hljs-meta-keyword">br</span> /&gt;&lt;/p&gt;&lt;/<span class="hljs-meta-keyword">body</span>&gt;&lt;/<span class="hljs-meta-keyword">html</span>&gt;&quot;))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.textEdit_4.setHtml(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;,</span>
<span class="hljs-meta">                                           &quot;&lt;!<span class="hljs-meta-keyword">DOCTYPE</span> <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> \&quot;-//<span class="hljs-meta-keyword">W3C</span>//<span class="hljs-meta-keyword">DTD</span> <span class="hljs-meta-keyword">HTML</span> 4.0//<span class="hljs-meta-keyword">EN</span>\&quot; \&quot;<span class="hljs-meta-keyword">http</span>://<span class="hljs-meta-keyword">www</span>.<span class="hljs-meta-keyword">w3</span>.<span class="hljs-meta-keyword">org</span>/<span class="hljs-meta-keyword">TR</span>/<span class="hljs-meta-keyword">REC-html4</span>0/<span class="hljs-meta-keyword">strict</span>.<span class="hljs-meta-keyword">dtd</span>\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;<span class="hljs-meta-keyword">html</span>&gt;&lt;<span class="hljs-meta-keyword">head</span>&gt;&lt;<span class="hljs-meta-keyword">meta</span> <span class="hljs-meta-keyword">name</span>=\&quot;<span class="hljs-meta-keyword">qrichtext</span>\&quot; <span class="hljs-meta-keyword">content</span>=\&quot;1\&quot; /&gt;&lt;<span class="hljs-meta-keyword">style</span> <span class="hljs-meta-keyword">type</span>=\&quot;<span class="hljs-meta-keyword">text</span>/<span class="hljs-meta-keyword">css</span>\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;p, <span class="hljs-meta-keyword">li</span> &#123; <span class="hljs-meta-keyword">white-space</span>: <span class="hljs-meta-keyword">pre-wrap</span>; &#125;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;/<span class="hljs-meta-keyword">style</span>&gt;&lt;/<span class="hljs-meta-keyword">head</span>&gt;&lt;<span class="hljs-meta-keyword">body</span> <span class="hljs-meta-keyword">style</span>=\&quot; <span class="hljs-meta-keyword">font-family</span>:\&#x27;<span class="hljs-meta-keyword">SimSun</span>\&#x27;; <span class="hljs-meta-keyword">font-size</span>:9<span class="hljs-meta-keyword">pt</span>; <span class="hljs-meta-keyword">font-weight</span>:400; <span class="hljs-meta-keyword">font-style</span>:<span class="hljs-meta-keyword">normal</span>;\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;p <span class="hljs-meta-keyword">style</span>=\&quot;-<span class="hljs-meta-keyword">qt-paragraph-type</span>:<span class="hljs-meta-keyword">empty</span>; <span class="hljs-meta-keyword">margin-top</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-bottom</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-left</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-right</span>:0<span class="hljs-meta-keyword">px</span>; -<span class="hljs-meta-keyword">qt-block-indent</span>:0; <span class="hljs-meta-keyword">text-indent</span>:0<span class="hljs-meta-keyword">px</span>;\&quot;&gt;&lt;<span class="hljs-meta-keyword">br</span> /&gt;&lt;/p&gt;&lt;/<span class="hljs-meta-keyword">body</span>&gt;&lt;/<span class="hljs-meta-keyword">html</span>&gt;&quot;))</span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.textEdit_6.setHtml(<span class="hljs-meta-keyword">_translate</span>(&quot;<span class="hljs-meta-keyword">Form</span>&quot;,</span>
<span class="hljs-meta">                                           &quot;&lt;!<span class="hljs-meta-keyword">DOCTYPE</span> <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> \&quot;-//<span class="hljs-meta-keyword">W3C</span>//<span class="hljs-meta-keyword">DTD</span> <span class="hljs-meta-keyword">HTML</span> 4.0//<span class="hljs-meta-keyword">EN</span>\&quot; \&quot;<span class="hljs-meta-keyword">http</span>://<span class="hljs-meta-keyword">www</span>.<span class="hljs-meta-keyword">w3</span>.<span class="hljs-meta-keyword">org</span>/<span class="hljs-meta-keyword">TR</span>/<span class="hljs-meta-keyword">REC-html4</span>0/<span class="hljs-meta-keyword">strict</span>.<span class="hljs-meta-keyword">dtd</span>\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;<span class="hljs-meta-keyword">html</span>&gt;&lt;<span class="hljs-meta-keyword">head</span>&gt;&lt;<span class="hljs-meta-keyword">meta</span> <span class="hljs-meta-keyword">name</span>=\&quot;<span class="hljs-meta-keyword">qrichtext</span>\&quot; <span class="hljs-meta-keyword">content</span>=\&quot;1\&quot; /&gt;&lt;<span class="hljs-meta-keyword">style</span> <span class="hljs-meta-keyword">type</span>=\&quot;<span class="hljs-meta-keyword">text</span>/<span class="hljs-meta-keyword">css</span>\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;p, <span class="hljs-meta-keyword">li</span> &#123; <span class="hljs-meta-keyword">white-space</span>: <span class="hljs-meta-keyword">pre-wrap</span>; &#125;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;/<span class="hljs-meta-keyword">style</span>&gt;&lt;/<span class="hljs-meta-keyword">head</span>&gt;&lt;<span class="hljs-meta-keyword">body</span> <span class="hljs-meta-keyword">style</span>=\&quot; <span class="hljs-meta-keyword">font-family</span>:\&#x27;<span class="hljs-meta-keyword">SimSun</span>\&#x27;; <span class="hljs-meta-keyword">font-size</span>:9<span class="hljs-meta-keyword">pt</span>; <span class="hljs-meta-keyword">font-weight</span>:400; <span class="hljs-meta-keyword">font-style</span>:<span class="hljs-meta-keyword">normal</span>;\&quot;&gt;\n&quot;</span>
<span class="hljs-meta">                                           &quot;&lt;p <span class="hljs-meta-keyword">style</span>=\&quot;-<span class="hljs-meta-keyword">qt-paragraph-type</span>:<span class="hljs-meta-keyword">empty</span>; <span class="hljs-meta-keyword">margin-top</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-bottom</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-left</span>:0<span class="hljs-meta-keyword">px</span>; <span class="hljs-meta-keyword">margin-right</span>:0<span class="hljs-meta-keyword">px</span>; -<span class="hljs-meta-keyword">qt-block-indent</span>:0; <span class="hljs-meta-keyword">text-indent</span>:0<span class="hljs-meta-keyword">px</span>;\&quot;&gt;&lt;<span class="hljs-meta-keyword">br</span> /&gt;&lt;/p&gt;&lt;/<span class="hljs-meta-keyword">body</span>&gt;&lt;/<span class="hljs-meta-keyword">html</span>&gt;&quot;))</span>
<span class="hljs-meta"></span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">self</span>.pushButton.clicked.connect(<span class="hljs-meta-keyword">self</span>.<span class="hljs-meta-keyword">calc</span>)</span>
<span class="hljs-meta"></span>
<span class="hljs-meta">    <span class="hljs-meta-keyword">def</span> <span class="hljs-meta-keyword">calc</span>(<span class="hljs-meta-keyword">self</span>):</span>
<span class="hljs-meta"></span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">try</span>:</span>
<span class="hljs-meta">            <span class="hljs-meta-keyword">startTime</span> = <span class="hljs-meta-keyword">self</span>.textEdit.toPlainText()</span>
<span class="hljs-meta">            <span class="hljs-meta-keyword">stopTime</span> = <span class="hljs-meta-keyword">self</span>.textEdit_2.toPlainText()</span>
<span class="hljs-meta">            <span class="hljs-meta-keyword">holiday_price</span> = <span class="hljs-meta-keyword">self</span>.textEdit_4.toPlainText()</span>
<span class="hljs-meta">            <span class="hljs-meta-keyword">workday_price</span> = <span class="hljs-meta-keyword">self</span>.textEdit_6.toPlainText()</span>
<span class="hljs-meta">            # <span class="hljs-meta-keyword">today</span> = <span class="hljs-meta-keyword">datetime</span>.now().weekday() + 1</span>
<span class="hljs-meta">            工作日 = 0</span>
<span class="hljs-meta">            休息日 = 0</span>
<span class="hljs-meta">            <span class="hljs-meta-keyword">begin</span> = <span class="hljs-meta-keyword">datetime</span>0.date(<span class="hljs-meta-keyword">int</span>(<span class="hljs-meta-keyword">startTime</span>[0:4]), <span class="hljs-meta-keyword">int</span>(<span class="hljs-meta-keyword">startTime</span>[4:6]), <span class="hljs-meta-keyword">int</span>(<span class="hljs-meta-keyword">startTime</span>[6:8]))</span>
<span class="hljs-meta">            <span class="hljs-meta-keyword">end</span> = <span class="hljs-meta-keyword">datetime</span>0.date(<span class="hljs-meta-keyword">int</span>(<span class="hljs-meta-keyword">stopTime</span>[0:4]), <span class="hljs-meta-keyword">int</span>(<span class="hljs-meta-keyword">stopTime</span>[4:6]), <span class="hljs-meta-keyword">int</span>(<span class="hljs-meta-keyword">stopTime</span>[6:8]))</span>
<span class="hljs-meta">            <span class="hljs-meta-keyword">for</span> <span class="hljs-meta-keyword">eachDay</span> <span class="hljs-meta-keyword">in</span> <span class="hljs-meta-keyword">range</span>((<span class="hljs-meta-keyword">end</span> - <span class="hljs-meta-keyword">begin</span>).days + 1):</span>
<span class="hljs-meta">                <span class="hljs-meta-keyword">eachDay</span> = <span class="hljs-meta-keyword">str</span>(<span class="hljs-meta-keyword">begin</span> + <span class="hljs-meta-keyword">datetime</span>0.<span class="hljs-meta-keyword">timedelta</span>(<span class="hljs-meta-keyword">days</span>=<span class="hljs-meta-keyword">eachDay</span>)).split(&quot;-&quot;)</span>
<span class="hljs-meta"></span>
<span class="hljs-meta">                <span class="hljs-meta-keyword">week</span> = <span class="hljs-meta-keyword">datetime</span>.strptime(<span class="hljs-meta-keyword">eachDay</span>[0] + <span class="hljs-meta-keyword">eachDay</span>[1] + <span class="hljs-meta-keyword">eachDay</span>[2], &quot;%Y%m%d&quot;).weekday() + 1</span>
<span class="hljs-meta">                <span class="hljs-meta-keyword">if</span> <span class="hljs-meta-keyword">week</span> &gt;</span> 0 and week <span class="hljs-tag">&lt; <span class="hljs-attr">6:</span></span>
<span class="hljs-tag">                    工作日 += <span class="hljs-string">1</span></span>
<span class="hljs-tag">                <span class="hljs-attr">else:</span></span>
<span class="hljs-tag">                    休息日 += <span class="hljs-string">1</span></span>
<span class="hljs-tag">            <span class="hljs-attr">result</span> = <span class="hljs-string">&quot;一共有工作日&#123;&#125;天，休息日&#123;&#125;天\n&quot;</span><span class="hljs-attr">.format</span>(工作日, 休息日) +\</span>
<span class="hljs-tag">            &quot;出差补贴一共为&#123;&#125;元&quot;<span class="hljs-attr">.format</span>(工作日 * <span class="hljs-attr">int</span>(<span class="hljs-attr">workday_price</span>) + 休息日 * <span class="hljs-attr">int</span>(<span class="hljs-attr">holiday_price</span>))</span>
<span class="hljs-tag">            <span class="hljs-attr">self.textEdit_5.setText</span>(<span class="hljs-attr">result</span>)</span>
<span class="hljs-tag">        <span class="hljs-attr">except</span> <span class="hljs-attr">Exception</span> <span class="hljs-attr">:</span></span>
<span class="hljs-tag">            # 输入框制空并显示重新输入</span>
<span class="hljs-tag">            <span class="hljs-attr">self.textEdit_5.setText</span>(&quot;输入格式有误\<span class="hljs-attr">n</span>请检查并重新输入&quot;)</span>
<span class="hljs-tag">            # <span class="hljs-attr">self.textEdit.setText</span>()</span>
<span class="hljs-tag">            # <span class="hljs-attr">self.textEdit_2.setText</span>()</span>
<span class="hljs-tag">            # <span class="hljs-attr">self.textEdit_5.setText</span>()</span>
<span class="hljs-tag">            # <span class="hljs-attr">self.textEdit_6.setText</span>()</span>
<span class="hljs-tag"></span>
<span class="hljs-tag"></span>
<span class="hljs-tag"><span class="hljs-attr">if</span> <span class="hljs-attr">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span><span class="hljs-attr">:</span></span>
<span class="hljs-tag">    <span class="hljs-attr">import</span> <span class="hljs-attr">sys</span></span>
<span class="hljs-tag">    <span class="hljs-attr">app</span> = <span class="hljs-string">QApplication(sys.argv)</span></span>
<span class="hljs-tag">    <span class="hljs-attr">widget</span> = <span class="hljs-string">QWidget(None)</span></span>
<span class="hljs-tag">    <span class="hljs-attr">ui</span> = <span class="hljs-string">Ui_Form()</span></span>
<span class="hljs-tag">    <span class="hljs-attr">ui.setupUi</span>(<span class="hljs-attr">widget</span>)</span>
<span class="hljs-tag">    <span class="hljs-attr">sys.exit</span>(<span class="hljs-attr">app.exec_</span>())</span>
<span class="hljs-tag">    <span class="hljs-attr">pass</span></span></code></pre>]]></content>
      <categories>
        <category>编程语言特性相关</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title>&#39;pyspark读取hbase跑模型尝试&#39;</title>
    <url>/2021/03/01/python/pyspark%E8%AF%BB%E5%8F%96hbase%E8%B7%91%E6%A8%A1%E5%9E%8B%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<h1 id="0-需求说明"><a href="#0-需求说明" class="headerlink" title="0. 需求说明"></a>0. 需求说明</h1><p>需求是对变压器的负荷进行预测，每一个变压器当作一个独立的个体。需要训练的个体数过多，所以尝试使用pyspark进行训练。原始数据保存在hbase中，程序的整体设计流程为：从hbase中读取数据 –&gt; 数据预处理 –&gt; 使用pyspark训练模型并进行预测 </p>
<h2 id="1-读取hbase"><a href="#1-读取hbase" class="headerlink" title="1. 读取hbase"></a>1. 读取hbase</h2><blockquote>
<p>因为是在自己的本地windows进行测试，电脑内存较小就没上虚拟机了。</p>
</blockquote>
<h3 id="1-1-pyspark读取hbase需要配置相关包"><a href="#1-1-pyspark读取hbase需要配置相关包" class="headerlink" title="1.1 pyspark读取hbase需要配置相关包"></a>1.1 pyspark读取hbase需要配置相关包</h3><p>将HBase的lib目录下的如下包复制到spark的目录下（因为放在其他目录中需要添加该目录的环境变量，所以为了省事就全部放在spark的默认jar目录中了，在spark启动的时候会全部加载进去，在<a href="http://127.0.0.1:4040/environment/%E6%9C%80%E4%B8%8B%E9%9D%A2%E7%9A%84**Resource**%E4%B8%AD%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%EF%BC%89">http://127.0.0.1:4040/environment/最下面的**Resource**中可以查看到）</a></p>
<ul>
<li><p>所有hbase开头的jar文件</p>
</li>
<li><p>guava-12.0.1.jar</p>
</li>
<li><p>htrace-core-3.1.0-incubating.jar</p>
</li>
<li><p>protobuf-java-2.5.0.jar</p>
</li>
<li><p><a href="https://mvnrepository.com/artifact/org.apache.spark/spark-examples_2.11/1.6.0-typesafe-001">spark-example-1.6.0.jar</a>（把hbase的数据转换python可读取的jar包）</p>
</li>
<li><p><strong>metrics-core-2.2.0.jar</strong></p>
</li>
</ul>
<h3 id="1-2-读取数据"><a href="#1-2-读取数据" class="headerlink" title="1.2 读取数据"></a>1.2 读取数据</h3><pre><code class="hljs python"><span class="hljs-comment"># 在pyspark中打开</span>
host = <span class="hljs-string">&#x27;172.16.221.102&#x27;</span>
table = <span class="hljs-string">&#x27;PSSC:HT_E_MP_CURVE_RELA&#x27;</span>
conf = &#123;<span class="hljs-string">&quot;hbase.zookeeper.quorum&quot;</span>: host, <span class="hljs-string">&quot;hbase.mapreduce.inputtable&quot;</span>: table&#125;
keyConv = <span class="hljs-string">&quot;org.apache.spark.examples.pythonconverters.ImmutableBytesWritableToStringConverter&quot;</span>
valueConv = <span class="hljs-string">&quot;org.apache.spark.examples.pythonconverters.HBaseResultToStringConverter&quot;</span>
hbase_rdd = sc.newAPIHadoopRDD(<span class="hljs-string">&quot;org.apache.hadoop.hbase.mapreduce.TableInputFormat&quot;</span>,<span class="hljs-string">&quot;org.apache.hadoop.hbase.io.ImmutableBytesWritable&quot;</span>,<span class="hljs-string">&quot;org.apache.hadoop.hbase.client.Result&quot;</span>,keyConverter=keyConv,valueConverter=valueConv,conf=conf)
count = hbase_rdd.count()
hbase_rdd.cache()
output = hbase_rdd.collect()
<span class="hljs-keyword">for</span> (k, v) <span class="hljs-keyword">in</span> output:
        <span class="hljs-keyword">print</span> (k, v)

<span class="hljs-comment"># 显示部分结果如下</span>
&#123;<span class="hljs-string">&quot;qualifier&quot;</span> : <span class="hljs-string">&quot;IC85&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;1614130918336&quot;</span>, <span class="hljs-string">&quot;columnFamily&quot;</span> : <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;row&quot;</span> : <span class="hljs-string">&quot;20201115&quot;</span>, <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;Put&quot;</span>, <span class="hljs-string">&quot;value&quot;</span> : <span class="hljs-string">&quot;0.0000&quot;</span>&#125;
&#123;<span class="hljs-string">&quot;qualifier&quot;</span> : <span class="hljs-string">&quot;IC86&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;1614130918336&quot;</span>, <span class="hljs-string">&quot;columnFamily&quot;</span> : <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;row&quot;</span> : <span class="hljs-string">&quot;20201115&quot;</span>, <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;Put&quot;</span>, <span class="hljs-string">&quot;value&quot;</span> : <span class="hljs-string">&quot;0.0000&quot;</span>&#125;
&#123;<span class="hljs-string">&quot;qualifier&quot;</span> : <span class="hljs-string">&quot;IC87&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;1614130918336&quot;</span>, <span class="hljs-string">&quot;columnFamily&quot;</span> : <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;row&quot;</span> : <span class="hljs-string">&quot;20201115&quot;</span>, <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;Put&quot;</span>, <span class="hljs-string">&quot;value&quot;</span> : <span class="hljs-string">&quot;0.0000&quot;</span>&#125;
&#123;<span class="hljs-string">&quot;qualifier&quot;</span> : <span class="hljs-string">&quot;IC88&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;1614130918336&quot;</span>, <span class="hljs-string">&quot;columnFamily&quot;</span> : <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;row&quot;</span> : <span class="hljs-string">&quot;20201115&quot;</span>, <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;Put&quot;</span>, <span class="hljs-string">&quot;value&quot;</span> : <span class="hljs-string">&quot;0.0000&quot;</span>&#125;
&#123;<span class="hljs-string">&quot;qualifier&quot;</span> : <span class="hljs-string">&quot;IC89&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;1614130918336&quot;</span>, <span class="hljs-string">&quot;columnFamily&quot;</span> : <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;row&quot;</span> : <span class="hljs-string">&quot;20201115&quot;</span>, <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;Put&quot;</span>, <span class="hljs-string">&quot;value&quot;</span> : <span class="hljs-string">&quot;0.0000&quot;</span>&#125;</code></pre>

<h3 id="1-3-遇到问题"><a href="#1-3-遇到问题" class="headerlink" title="1.3 遇到问题"></a>1.3 遇到问题</h3><h3 id="1-3-1-java-io-IOException-com-google-protobuf-ServiceException-java-lang-NoClassDefFoundError"><a href="#1-3-1-java-io-IOException-com-google-protobuf-ServiceException-java-lang-NoClassDefFoundError" class="headerlink" title="1.3.1 java.io.IOException: com.google.protobuf.ServiceException: java.lang.NoClassDefFoundError:"></a>1.3.1 java.io.IOException: com.google.protobuf.ServiceException: java.lang.NoClassDefFoundError:</h3><p>遇到问题要自己思考出现问题的原因是什么，以及找到问题的解决方法之后要思考底层是如何运行的，为什么这个方法能够解决这个问题。</p>
<ul>
<li>问题复现：</li>
</ul>
<pre><code class="hljs routeros"><span class="hljs-comment"># 包放好后启动报如下错误（第一部分）</span>
An <span class="hljs-builtin-name">error</span> occurred <span class="hljs-keyword">while</span> calling z:org.apache.spark.api.python.PythonRDD.newAPIHadoopRDD.
: org.apache.hadoop.hbase.client.RetriesExhaustedException: Failed after <span class="hljs-attribute">attempts</span>=32, exceptions:
Mon Mar 01 14:28:51 CST 2021, <span class="hljs-literal">null</span>, java.net.SocketTimeoutException: <span class="hljs-attribute">callTimeout</span>=60000, <span class="hljs-attribute">callDuration</span>=68422: row <span class="hljs-string">&#x27;PSSC:HT_E_MP_CURVE_RELA,,00000000000000&#x27;</span> on table <span class="hljs-string">&#x27;hbase:meta&#x27;</span> at <span class="hljs-attribute">region</span>=hbase:meta,,1.1588230740, <span class="hljs-attribute">hostname</span>=worker01,60020,1613617191977, <span class="hljs-attribute">seqNum</span>=0
<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>
<span class="hljs-comment"># 并且下面会有这样一句：（第二部分）</span>
Caused by: java.io.IOException: com.google.protobuf.ServiceException: java.lang.NoClassDefFoundError: com/yammer/metrics/core/Gauge</code></pre>

<ul>
<li>解决：</li>
</ul>
<p>在google了很多之后以上第一部分的问题之后，都是在说一些hosts映射的解决方法。但是我的hosts是没有问题的，启动之前就已经添加过主机名的映射了，未解决我的问题。</p>
<p>然后仔细将所有的报错提示从头到尾看了一遍，发现了上面第二部分的问题，然后在想是不是因为第二部分的问题导致了第一部分的错误，然后去网上搜该方法，显示”com/yammer/metrics/core/Gauge”是<strong>metrics-core-2.2.0.jar</strong>包里面的方法，然后在hbase的lib文件夹下面找到了该包，于是导入后遂解决了问题。</p>
<h3 id="1-3-2-pyspark默认版本的问题"><a href="#1-3-2-pyspark默认版本的问题" class="headerlink" title="1.3.2 pyspark默认版本的问题"></a>1.3.2 pyspark默认版本的问题</h3><pre><code class="hljs smali">Exception: Python in worker has different version 3.5 than that in driver 3.6, PySpark cannot run with different minor versions.Please<span class="hljs-built_in"> check </span>environment variables PYSPARK_PYTHON<span class="hljs-built_in"> and </span>PYSPARK_DRIVER_PYTHON are correctly set.</code></pre>

<ul>
<li><p>问题解析：</p>
<p>因为自己的的电脑上有三个版本的python（3.5/3.6/3.8），出现这个问题是因为环境变量冲突，默认的环境变量是anaconda的3.5，然后在pycharm中使用的python版本为3.6，所以产生了冲突。只需要在spark的配置文件中指定某一环境变量即可    </p>
</li>
<li><p>解决方法：</p>
<pre><code class="hljs routeros"><span class="hljs-comment"># 在spark-3.0.2-bin-hadoop3.2\conf\spark-env.sh中添加环境变量</span>
<span class="hljs-comment"># 如果不存在的话将spark-env.sh.template修改为spark-env.sh并添加</span>
<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PYSPARK_PYTHON</span>=D:\Anaconda3\envs\python36
<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PYSPARK_DRIVER_PYTHON</span>=D:\Anaconda3\envs\python36
<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">SPARK_HOME</span>=D:\spark-3.0.2-bin-hadoop3.2</code></pre>

</li>
</ul>
<p>##2. 大批量跑模型</p>
]]></content>
      <categories>
        <category>工作相关</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyspark</tag>
      </tags>
  </entry>
  <entry>
    <title>python中方法及变量的下划线双下划线等含义</title>
    <url>/2020/12/23/python/python%E4%B8%AD%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E7%AD%89%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<p>#Python 下划线、双下划线</p>
<p>一般常见的下划线为以下几种：</p>
<ul>
<li>前置单下划线：<code>_var</code></li>
<li>后置单下划线：<code>var_</code></li>
<li>前置双下划线：<code>__var</code></li>
<li>前后双下划线：<code>__var__</code></li>
<li>单下划线：<code>_</code></li>
</ul>
<p>###1. 前置单下划线变量和单下划线方法的区别：</p>
<blockquote>
<p>前置单下划线表示在方法内部使用，单下划线变量可以从外部引用，而单下划线方法在使用通配符导入包时（from package import *）不可以，除非使用import package，然后使用”package._model”进行使用。</p>
</blockquote>
<pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span><span class="hljs-symbol">:</span>
        <span class="hljs-keyword">self</span>.foo = <span class="hljs-number">11</span>
        <span class="hljs-keyword">self</span>._bar = <span class="hljs-number">23</span>
<span class="hljs-meta">&gt;&gt;</span>&gt; t = Test()
<span class="hljs-meta">&gt;&gt;</span>&gt; t.foo
<span class="hljs-number">11</span>
<span class="hljs-meta">&gt;&gt;</span>&gt; t._bar
<span class="hljs-number">23</span>

<span class="hljs-comment"># my_module.py：</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">external_func</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span>
    <span class="hljs-keyword">return</span> <span class="hljs-number">23</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_internal_func</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span>
    <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>
<span class="hljs-meta">&gt;&gt;</span>&gt; from my_module import *
<span class="hljs-meta">&gt;&gt;</span>&gt; external_func()
<span class="hljs-number">23</span>
<span class="hljs-meta">&gt;&gt;</span>&gt; _internal_func()
<span class="hljs-symbol">NameError:</span> <span class="hljs-string">&quot;name &#x27;_internal_func&#x27; is not defined&quot;</span>

<span class="hljs-meta">&gt;&gt;</span>&gt; import my_module
<span class="hljs-meta">&gt;&gt;</span>&gt; my_module.external_func()
<span class="hljs-number">23</span>
<span class="hljs-meta">&gt;&gt;</span>&gt; my_module._internal_func()
<span class="hljs-number">42</span></code></pre>

<h3 id="2-后置单下划线"><a href="#2-后置单下划线" class="headerlink" title="2. 后置单下划线"></a>2. 后置单下划线</h3><p>当需要使用的最合适的变量名与关键字所重复，可以使用后置单下划线来绕过命名冲突</p>
<pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_object</span>(<span class="hljs-params">name, class</span>):</span></span>
SyntaxError: &quot;invalid syntax&quot;

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_object</span>(<span class="hljs-params">name, class_</span>):</span></span>
<span class="hljs-meta">...</span> <span class="python"><span class="hljs-keyword">pass</span></span></code></pre>

<h3 id="3-前置双下划线"><a href="#3-前置双下划线" class="headerlink" title="3. 前置双下划线"></a>3. 前置双下划线</h3><p>前置双下划线会被解释器进行命名改写。这个例子先声明<code>_MangledGlobal__mangled</code>为全局变量，然后在名为<code>MangledGlobal</code>的类环境中访问变量。由于名称改写，类中的<code>test()</code>方法仅用<code>__mangled</code>就能引用<code>_MangledGlobal__mangled</code>全局变量。<code>__mangled</code>以双下划线开头，因此Python解释器自动将名称扩展为<code>_MangledGlobal__mangled</code>。这表明名称改写不专门与类属性绑定，而是能够应用于类环境中所有以双下划线开头的名称</p>
<pre><code class="hljs ruby">_MangledGlobal__mangled = <span class="hljs-number">23</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MangledGlobal</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span><span class="hljs-symbol">:</span>
        <span class="hljs-keyword">return</span> __mangled

<span class="hljs-meta">&gt;&gt;</span>&gt; MangledGlobal().test()
<span class="hljs-number">23</span></code></pre>

<p>###4. 单独单下划线</p>
<p>单下划线有时用作名称，来表示变量是临时的或无关紧要的</p>
<pre><code class="hljs python-repl">例如下面的循环中并不需要访问运行的索引，那么可以使用_来表示它只是一个临时值：
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>):</span>
<span class="hljs-meta">...</span> <span class="python">    print(<span class="hljs-string">&#x27;Hello, World.&#x27;</span>)</span></code></pre>

<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><ul>
<li><strong>前置单下划线</strong><code>_var</code>：命名约定，用来表示该名称仅在内部使用。一般对Python解释器没有特殊含义（通配符导入除外），只能作为对程序员的提示。</li>
<li><strong>后置单下划线</strong><code>var_</code>：命名约定，用于避免与Python关键字发生命名冲突。</li>
<li><strong>前置双下划线</strong><code>__var</code>：在类环境中使用时会触发名称改写，对Python解释器有特殊含义。</li>
<li><strong>前后双下划线</strong><code>__var__</code>：表示由Python语言定义的特殊方法。在自定义的属性中要避免使用这种命名方式。</li>
<li><strong>单下划线</strong><code>_</code>：有时用作临时或无意义变量的名称（“不关心”）。此外还能表示Python REPL会话中上一个表达式的结果。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python打包程序移植到生产环境redhat出现的问题</title>
    <url>/2020/04/13/python/python%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F%E7%A7%BB%E6%A4%8D%E5%88%B0%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83redhat%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-出现问题及解决"><a href="#1-出现问题及解决" class="headerlink" title="1.出现问题及解决"></a>1.出现问题及解决</h1><h2 id="1-1-python打包访问oracle数据库无instantclient相关问题"><a href="#1-1-python打包访问oracle数据库无instantclient相关问题" class="headerlink" title="1.1 python打包访问oracle数据库无instantclient相关问题"></a>1.1 python打包访问oracle数据库无instantclient相关问题</h2><h3 id="1-1-1-问题1：cx-Oracle-DatabaseError-DPI-1047-64-bit-Oracle-Client-library-cannot-be-loaded解决方法”"><a href="#1-1-1-问题1：cx-Oracle-DatabaseError-DPI-1047-64-bit-Oracle-Client-library-cannot-be-loaded解决方法”" class="headerlink" title="1.1.1 问题1：cx_Oracle.DatabaseError: DPI-1047: 64-bit Oracle Client library cannot be loaded解决方法”"></a>1.1.1 问题1：cx_Oracle.DatabaseError: DPI-1047: 64-bit Oracle Client library cannot be loaded解决方法”</h3><blockquote>
<p>解决方法：本机安装instantclient，安装步骤如下(参考：<a href="http://www.360doc.com/content/12/1103/21/8827884_245559524.shtml">http://www.360doc.com/content/12/1103/21/8827884_245559524.shtml</a>)</p>
</blockquote>
<ul>
<li>第一步，先安装Oracle客户端，结合你的情况自己找合适的版本，我下载的是 oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm<br>下载地址为（<a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html%EF%BC%89">http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html）</a></li>
</ul>
<pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh oracle-instantclient<span class="hljs-number">11</span>.<span class="hljs-number">2</span>-basic-<span class="hljs-number">11.2.0.3</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm</code></pre>

<ul>
<li><p>第二步，找出你的ORACLE_HOME，我安装之后在这里：/usr/lib/oracle/11.2/client64/lib/</p>
</li>
<li><p>第三步，下载oracle-instantclient11.2-sdk-11.2.0.1.0-1.x86_64.zip 下载地址。解压，把里面那个叫sdk的文件夹复制到 /usr/lib/oracle/11.2/client64/lib/</p>
</li>
<li><p>第四步，做一个软链：</p>
<pre><code class="hljs crystal">$ cd /usr/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">oracle</span>/11.2/<span class="hljs-title">client64</span>/<span class="hljs-title">lib</span>/</span>
$ ln -s libclntsh.so.<span class="hljs-number">11.1</span> libclntsh.so</code></pre></li>
<li><p>第五步，安装cx_Oracle:</p>
<pre><code class="hljs crystal">$ export ORACLE_HOME=<span class="hljs-regexp">/usr/lib</span><span class="hljs-regexp">/oracle/</span><span class="hljs-number">11.2</span>/client64/<span class="hljs-class"><span class="hljs-keyword">lib</span></span>
$ export LD_LIBRARY_PATH=$<span class="hljs-symbol">LD_LIBRARY_PATH:</span>$ORACLE_HOME
$ easy_install cx_Oracle</code></pre></li>
<li><p>试一下：</p>
<pre><code class="hljs elixir"><span class="hljs-variable">$ </span>python
<span class="hljs-variable">$ </span><span class="hljs-keyword">import</span> cx_Oracle</code></pre>
<p>  done.</p>
</li>
<li><p>不过还没配环境变量，一退再进去就不行了，在.bashrc里加入刚才安装之前的那两句：</p>
</li>
</ul>
<pre><code class="hljs crystal">$cd vim ~<span class="hljs-regexp">/.bashrc</span>
<span class="hljs-regexp">export ORACLE_HOME=/usr</span><span class="hljs-regexp">/lib/oracle</span><span class="hljs-regexp">/11.2/client</span>64/<span class="hljs-class"><span class="hljs-keyword">lib</span></span>
export LD_LIBRARY_PATH=$<span class="hljs-symbol">LD_LIBRARY_PATH:</span>$ORACLE_HOME

source ~<span class="hljs-regexp">/.bashrc</span></code></pre>

<h3 id="1-1-2-问题2：上述问题解决后出现“cx-Oracle-DatabaseError-Error-while-trying-to-retrieve-text-for-error-ORA-01804”问题"><a href="#1-1-2-问题2：上述问题解决后出现“cx-Oracle-DatabaseError-Error-while-trying-to-retrieve-text-for-error-ORA-01804”问题" class="headerlink" title="1.1.2 问题2：上述问题解决后出现“cx_Oracle.DatabaseError: Error while trying to retrieve text for error ORA-01804”问题"></a>1.1.2 问题2：上述问题解决后出现“cx_Oracle.DatabaseError: Error while trying to retrieve text for error ORA-01804”问题</h3><blockquote>
<p>解决方法（参考“<a href="https://blog.csdn.net/zklth/article/details/7184032%EF%BC%89%E2%80%9D%EF%BC%9A">https://blog.csdn.net/zklth/article/details/7184032）”：</a></p>
</blockquote>
<pre><code class="hljs dart">注释掉
os.environ[<span class="hljs-string">&quot;LD_LIBRARY_PATH&quot;</span>] = <span class="hljs-string">&#x27;<span class="hljs-subst">$LD_LIBRARY_PATH</span>:<span class="hljs-subst">$ORACLE_HOME</span>:<span class="hljs-subst">$ORACLE_HOME</span>&#x27;</span></code></pre>
<blockquote>
<p>出现新问题 “cx_Oracle连接数据库错误ORA-21561: 生成 OID 失败”</p>
</blockquote>
<blockquote>
<p>解决方法:参考“<a href="https://www.rookiefly.cn/detail/161%E2%80%9D">https://www.rookiefly.cn/detail/161”</a></p>
</blockquote>
<pre><code class="hljs accesslog">修改本机hostname名称，然后终于成功
cat /etc/hosts  
<span class="hljs-number">127.0.0.1</span>   localhost redhat6
::<span class="hljs-number">1</span>         localhost redhat6</code></pre>
<h2 id="1-1-3-问题3：数据库可以访问后出现-“from-numpy-testing-import-nosetester-ImportError-cannot-import-name-‘nosetester’”问题"><a href="#1-1-3-问题3：数据库可以访问后出现-“from-numpy-testing-import-nosetester-ImportError-cannot-import-name-‘nosetester’”问题" class="headerlink" title="1.1.3 问题3：数据库可以访问后出现 “from numpy.testing import nosetester  ImportError: cannot import name ‘nosetester’”问题"></a>1.1.3 问题3：数据库可以访问后出现 “from numpy.testing import nosetester  ImportError: cannot import name ‘nosetester’”问题</h2><blockquote>
<p>问题原因：当前安装在python3.5.2的numpy版本和pandas版本冲突，修改版本<br>可用版本: </p>
</blockquote>
<pre><code class="hljs apache"><span class="hljs-attribute">numpy</span> (<span class="hljs-number">1</span>.<span class="hljs-number">11</span>.<span class="hljs-number">1</span>)
<span class="hljs-attribute">pandas</span> (<span class="hljs-number">0</span>.<span class="hljs-number">18</span>.<span class="hljs-number">1</span>)</code></pre>
<h2 id="1-1-4-问题4：打包报错“-File-“sklearn-metrics-pairwise-fast-pyx”-line-1-in-init-sklearn-metrics-pairwise-fast-ImportError-No-module-named-‘sklearn-utils-cython-blas’”"><a href="#1-1-4-问题4：打包报错“-File-“sklearn-metrics-pairwise-fast-pyx”-line-1-in-init-sklearn-metrics-pairwise-fast-ImportError-No-module-named-‘sklearn-utils-cython-blas’”" class="headerlink" title="1.1.4 问题4：打包报错“ File “sklearn/metrics/pairwise_fast.pyx”, line 1, in init sklearn.metrics.pairwise_fast ImportError: No module named ‘sklearn.utils._cython_blas’”"></a>1.1.4 问题4：打包报错“ File “sklearn/metrics/pairwise_fast.pyx”, line 1, in init sklearn.metrics.pairwise_fast ImportError: No module named ‘sklearn.utils._cython_blas’”</h2><blockquote>
<p>问题原因：打包的时候无法自动加入sklearn包，手动添加即可</p>
</blockquote>
<blockquote>
<p>解决方法：在main.spec中的hiddenimports属性中手动添加</p>
</blockquote>
<pre><code class="hljs sml">hiddenimports=[<span class="hljs-symbol">&#x27;cython&#x27;</span>,  <span class="hljs-symbol">&#x27;sklearn&#x27;</span>, <span class="hljs-symbol">&#x27;sklearn</span>.utils._cython_blas&#x27;,<span class="hljs-symbol">&#x27;sklearn</span>.neighbors.typedefs&#x27;,
           <span class="hljs-symbol">&#x27;sklearn</span>.neighbors.quad_tree&#x27;,<span class="hljs-symbol">&#x27;sklearn</span>.tree&#x27;,<span class="hljs-symbol">&#x27;sklearn</span>.tree._utils&#x27;],</code></pre>

<h2 id="1-1-5-问题5：打包后运行然后又报问题2，“cx-Oracle-DatabaseError-Error-while-trying-to-retrieve-text-for-error-ORA-01804”"><a href="#1-1-5-问题5：打包后运行然后又报问题2，“cx-Oracle-DatabaseError-Error-while-trying-to-retrieve-text-for-error-ORA-01804”" class="headerlink" title="1.1.5 问题5：打包后运行然后又报问题2，“cx_Oracle.DatabaseError: Error while trying to retrieve text for error ORA-01804”"></a>1.1.5 问题5：打包后运行然后又报问题2，“cx_Oracle.DatabaseError: Error while trying to retrieve text for error ORA-01804”</h2><blockquote>
<p>问题原因：缺少相关的oracle包</p>
</blockquote>
<blockquote>
<p>解决方法: 在main.spec中添加：</p>
</blockquote>
<pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.binaries</span> = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.binaries</span> + [(<span class="hljs-string">&#x27;libclntsh.so&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/oracle/11.2/client64/lib/libclntsh.so.11.1&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>)]
<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.binaries</span> = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.binaries</span> + [(<span class="hljs-string">&#x27;libnnz11.so&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/oracle/11.2/client64/lib/libnnz11.so&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>)]
<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.binaries</span> = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.binaries</span> + [(<span class="hljs-string">&#x27;libocci.so&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/oracle/11.2/client64/lib/libocci.so.11.1&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>)]
<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.binaries</span> = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.binaries</span> + [(<span class="hljs-string">&#x27;libociicus.so&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/oracle/11.2/client64/lib/libociicus.so&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>)]</code></pre>

<h2 id="1-1-6-问题6：添加上述包之后出现“Oracle-returned-an-error-ORA-12737-Instant-Client-Light-unsupported-server-character-set-SIMPLIFIED-CHINESE-CHINA-UTF8-”"><a href="#1-1-6-问题6：添加上述包之后出现“Oracle-returned-an-error-ORA-12737-Instant-Client-Light-unsupported-server-character-set-SIMPLIFIED-CHINESE-CHINA-UTF8-”" class="headerlink" title="1.1.6 问题6：添加上述包之后出现“Oracle returned an error. ORA-12737: Instant Client Light: unsupported server character set SIMPLIFIED CHINESE_CHINA.UTF8 ”"></a>1.1.6 问题6：添加上述包之后出现“Oracle returned an error. ORA-12737: Instant Client Light: unsupported server character set SIMPLIFIED CHINESE_CHINA.UTF8 ”</h2><blockquote>
<p>问题原因： 见（<a href="https://thwack.solarwinds.com/t5/SAM-Discussions/Oracle-returned-an-error-ORA-12737-Instant-Client-Light/td-p/356034%EF%BC%89">https://thwack.solarwinds.com/t5/SAM-Discussions/Oracle-returned-an-error-ORA-12737-Instant-Client-Light/td-p/356034）</a><br>或<a href="https://www.cnblogs.com/chenjianhong/p/4144399.html">https://www.cnblogs.com/chenjianhong/p/4144399.html</a></p>
</blockquote>
<p>在Instant Client Light中，语言只能是美国语言，地区可以是任何受支持的地区，字符集可以是以下任意一项：</p>
<p>＆＃9632; 单字节</p>
<p>US7ASCII<br>WE8DEC<br>WE8MSWIN1252<br>WE8ISO8859P1<br>＆＃9632; 统一码</p>
<p>UTF8<br>AL16UTF16<br>AL32UTF8<br>指定除列出为客户端或服务器字符集的字符集或国家字符集以外的字符集或国家字符集，或者在客户端上以NLS_LANG设置语言时，将引发以下错误之一：</p>
<ul>
<li>＆＃9632; ORA-12734</li>
<li>＆＃9632; ORA-12735</li>
<li>＆＃9632; ORA-12736</li>
<li>＆＃9632; ORA-12737</li>
</ul>
<p>使用Instant Client Light，获得的错误消息仅是英文的。因此，NLS_LANG设置的有效值的类型为：American_territory.characterset ，其中，region可以是任何有效且受支持的领域，并且characterset可以</p>
<p>可以是前面列出的任何字符集。Instant Client Light可以与在OCI_UTF16模式下创建的OCI环境句柄一起使用。</p>
<blockquote>
<p>解决方法：<br>修改文字编码：</p>
</blockquote>
<pre><code class="hljs lua">将<span class="hljs-built_in">os</span>.environ[<span class="hljs-string">&#x27;NLS_LANG&#x27;</span>] = <span class="hljs-string">&#x27;SIMPLIFIED CHINESE_CHINA.UTF8&#x27;</span>  修改为<span class="hljs-built_in">os</span>.environ[<span class="hljs-string">&#x27;NLS_LANG&#x27;</span>] = <span class="hljs-string">&#x27;AMERICAN_AMERICA.AL32UTF8&#x27;</span></code></pre>

<h1 id="2-最终打包成功样例"><a href="#2-最终打包成功样例" class="headerlink" title="2.最终打包成功样例"></a>2.最终打包成功样例</h1><h2 id="步骤0：下载oracle客户端驱动文件"><a href="#步骤0：下载oracle客户端驱动文件" class="headerlink" title="步骤0：下载oracle客户端驱动文件"></a>步骤0：下载oracle客户端驱动文件</h2><pre><code class="hljs apache"><span class="hljs-attribute">instantclient</span>-sdk-linux.x<span class="hljs-number">64</span>-<span class="hljs-number">11.2.0.4</span>.<span class="hljs-number">0</span>_<span class="hljs-number">2</span>
<span class="hljs-attribute">instantclient</span>-basic-linux.x<span class="hljs-number">64</span>-<span class="hljs-number">11.2.0.4</span>.<span class="hljs-number">0</span>
<span class="hljs-comment"># basic中要包含libclntsh.so，libnnz11.so，libocci.so，libociicus.so这四个文件</span>
<span class="hljs-comment"># 如果没有从instantclient-basiclite-linux.x64-11.2.0.4.0包中找</span>
<span class="hljs-comment"># 官方下载链接“https://www.oracle.com/database/technologies/instant-client/downloads.html”</span></code></pre>
<h2 id="步骤1-添加依赖链接在main-spec中"><a href="#步骤1-添加依赖链接在main-spec中" class="headerlink" title="步骤1:添加依赖链接在main.spec中"></a>步骤1:添加依赖链接在main.spec中</h2><pre><code class="hljs routeros">main.spec： pyinstaller打包的说明文件，里面编写一些打包的时候手动添加的文件

<span class="hljs-comment"># -*- mode: python ; coding: utf-8 -*-</span>

block_cipher = None

a = Analysis([<span class="hljs-string">&#x27;main.py&#x27;</span>],
             pathex=[<span class="hljs-string">&#x27;/home/redhat/Desktop/monthPredict&#x27;</span>],
             datas=[],
             hiddenimports=[<span class="hljs-string">&#x27;cython&#x27;</span>,  <span class="hljs-string">&#x27;sklearn&#x27;</span>, <span class="hljs-string">&#x27;sklearn.utils._cython_blas&#x27;</span>,<span class="hljs-string">&#x27;sklearn.neighbors.typedefs&#x27;</span>,
             <span class="hljs-string">&#x27;sklearn.neighbors.quad_tree&#x27;</span>,<span class="hljs-string">&#x27;sklearn.tree&#x27;</span>,<span class="hljs-string">&#x27;sklearn.tree._utils&#x27;</span>],
             hookspath=[],
             runtime_hooks=[],
             excludes=[],
             <span class="hljs-attribute">win_no_prefer_redirects</span>=<span class="hljs-literal">False</span>,
             <span class="hljs-attribute">win_private_assemblies</span>=<span class="hljs-literal">False</span>,
             <span class="hljs-attribute">cipher</span>=block_cipher,
             <span class="hljs-attribute">noarchive</span>=<span class="hljs-literal">False</span>)

a.binaries = a.binaries + [(<span class="hljs-string">&#x27;libclntsh.so&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/oracle/11.2/client64/lib/libclntsh.so.11.1&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>)]
a.binaries = a.binaries + [(<span class="hljs-string">&#x27;libnnz11.so&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/oracle/11.2/client64/lib/libnnz11.so&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>)]
a.binaries = a.binaries + [(<span class="hljs-string">&#x27;libocci.so&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/oracle/11.2/client64/lib/libocci.so.11.1&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>)]
a.binaries = a.binaries + [(<span class="hljs-string">&#x27;libociicus.so&#x27;</span>, <span class="hljs-string">&#x27;/usr/lib/oracle/11.2/client64/lib/libociicus.so&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>)]

pyz = PYZ(a.pure, a.zipped_data,
             <span class="hljs-attribute">cipher</span>=block_cipher)
exe = EXE(pyz,
          a.scripts,
          a.binaries,
          a.zipfiles,
          a.datas,
          [],
          <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;main&#x27;</span>,
          <span class="hljs-attribute">debug</span>=<span class="hljs-literal">False</span>,
          <span class="hljs-attribute">bootloader_ignore_signals</span>=<span class="hljs-literal">False</span>,
          <span class="hljs-attribute">strip</span>=<span class="hljs-literal">False</span>,
          <span class="hljs-attribute">upx</span>=<span class="hljs-literal">True</span>,
          upx_exclude=[],
          <span class="hljs-attribute">runtime_tmpdir</span>=None,
          <span class="hljs-attribute">console</span>=<span class="hljs-literal">True</span> )
</code></pre>
<h2 id="步骤2：打包"><a href="#步骤2：打包" class="headerlink" title="步骤2：打包"></a>步骤2：打包</h2><pre><code class="hljs crmsh">使用 pyinstaller  main.<span class="hljs-keyword">spec</span> 命令打包</code></pre>]]></content>
      <categories>
        <category>工作相关</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python相关</title>
    <url>/2021/01/18/python/python%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="1-线程池ThreadPoolExecutor"><a href="#1-线程池ThreadPoolExecutor" class="headerlink" title="1.线程池ThreadPoolExecutor"></a>1.线程池ThreadPoolExecutor</h1><p><a href="https://www.jianshu.com/p/120b61aa4cee">https://www.jianshu.com/p/120b61aa4cee</a></p>
<h1 id="2-装饰器"><a href="#2-装饰器" class="headerlink" title="2. 装饰器"></a>2. 装饰器</h1><p><strong>装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能</strong>。<br>先来看一个简单例子，如果你要对多个函数进行统计运行时间，不使用装饰器会是这样的：</p>
<pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> <span class="hljs-type">time</span> <span class="hljs-keyword">import</span> <span class="hljs-type">time</span>, sleep

def fun_one():
    start = <span class="hljs-type">time</span>()
    sleep(<span class="hljs-number">1</span>)
    end = <span class="hljs-type">time</span>()
    cost_time = <span class="hljs-keyword">end</span> - <span class="hljs-keyword">start</span>
    print(&quot;func one run time &#123;&#125;&quot;.format(cost_time))
    
def fun_two():
    start = <span class="hljs-type">time</span>()
    sleep(<span class="hljs-number">1</span>)
    end = <span class="hljs-type">time</span>()
    cost_time = <span class="hljs-keyword">end</span> - <span class="hljs-keyword">start</span>
    print(&quot;func two run time &#123;&#125;&quot;.format(cost_time))</code></pre>
<p>在每个函数里都需要获取开始时间start、结束时间end、计算耗费时间cost_time、加上一个输出语句。<br>使用装饰器的方法是这样的</p>
<p>简单装饰器</p>
<pre><code class="hljs pgsql">def run_time(func):
    def <span class="hljs-keyword">wrapper</span>():
        start = <span class="hljs-type">time</span>()
        func()                  # **函数在这里运行**
        end = <span class="hljs-type">time</span>()
        cost_time = <span class="hljs-keyword">end</span> - <span class="hljs-keyword">start</span>
        print(&quot;func three run time &#123;&#125;&quot;.format(cost_time))
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">wrapper</span>

@run_time
def fun_one():
    sleep(<span class="hljs-number">1</span>)
    
@run_time
def fun_two():
    sleep(<span class="hljs-number">1</span>)</code></pre>
<h1 id="3-anconda升级python版本"><a href="#3-anconda升级python版本" class="headerlink" title="3.anconda升级python版本"></a>3.anconda升级python版本</h1><ul>
<li>先查看本地镜像源，清华镜像源从2019年已经停用了，建议使用中科大的镜像源</li>
<li>然后直接命令指定升级python版本即可，如果不升级镜像源的话可能报404或者下载速度慢</li>
</ul>
<h2 id="3-1-修改镜像源"><a href="#3-1-修改镜像源" class="headerlink" title="3.1 修改镜像源"></a>3.1 修改镜像源</h2><p>先查看已经安装过的镜像源，cmd窗口执行命令：</p>
<pre><code class="hljs routeros">conda<span class="hljs-built_in"> config </span>--show</code></pre>
<p>查看配置项channels，如果显示带有tsinghua，则说明已安装过清华镜像。</p>
<pre><code class="hljs awk">channels:
- https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/tensorflow/</span>linux<span class="hljs-regexp">/cpu/</span>
- https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/msys2/</span>
- https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/conda-forge/</span>
- https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span>
- https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/pytorch/</span></code></pre>
<p>下一步，使用<code>conda config --remove channels url地址</code>删除清华镜像，如下命令删除第一个。然后，依次删除所有镜像源</p>
<pre><code class="hljs awk">conda config --remove channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/tensorflow/</span>linux<span class="hljs-regexp">/cpu/</span></code></pre>
<p>添加目前可用的中科大镜像源：</p>
<pre><code class="hljs awk">conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span></code></pre>
<p>并设置搜索时显示通道地址：</p>
<pre><code class="hljs routeros">conda<span class="hljs-built_in"> config </span>--<span class="hljs-builtin-name">set</span> show_channel_urls <span class="hljs-literal">yes</span></code></pre>
<p>确认是否安装镜像源成功，执行<code>conda config --show</code>，找到<code>channels</code>值为如下：</p>
<pre><code class="hljs awk">channels:
  - https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span>
  - defaults</code></pre>
<h2 id="3-2-升级python版本"><a href="#3-2-升级python版本" class="headerlink" title="3.2 升级python版本"></a>3.2 升级python版本</h2><p>打开Anaconda Prompt，<br>输入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">conda</span> create -n python<span class="hljs-number">36</span> python=<span class="hljs-number">3</span>.<span class="hljs-number">6</span> anaconda</code></pre>

<h1 id="4-文件io"><a href="#4-文件io" class="headerlink" title="4.文件io"></a>4.文件io</h1><h2 id="4-1-文件打开方式，r-w-a-的说明"><a href="#4-1-文件打开方式，r-w-a-的说明" class="headerlink" title="4.1 文件打开方式，r/w/a/+的说明"></a>4.1 文件打开方式，r/w/a/+的说明</h2><ul>
<li>r只读，r+读写(覆盖写)，不创建</li>
<li>w新建只写，w+新建读写，二者都会将文件内容清零</li>
<li>w+与r+区别：</li>
<li><blockquote>
<p>r+：可读可写，若文件不存在，报错；w+: 可读可写，若文件不存在，创建</p>
</blockquote>
</li>
<li>a：附加写方式打开，不可读；</li>
<li>a+: 附加读写方式打开</li>
</ul>
<p>#5. 代码规范性测试</p>
<p>pylint代码规范测试</p>
<h1 id="6-fileinput-懒惰行迭代"><a href="#6-fileinput-懒惰行迭代" class="headerlink" title="6. fileinput 懒惰行迭代"></a>6. fileinput 懒惰行迭代</h1><p>只读取实际需要的文件部分</p>
<h1 id="7-编码规范"><a href="#7-编码规范" class="headerlink" title="7. 编码规范"></a>7. 编码规范</h1><ol>
<li>多次使用的常量使用全大写命名，并考虑设置为全局变量</li>
<li>创建单独的配置文件模块，保存一些配置的参数<blockquote>
<p>简单配置或者使用configparser模块</p>
</blockquote>
</li>
<li>在需要的时候使用日志记录（logging模块）</li>
</ol>
<h1 id="8-魔法方法理解"><a href="#8-魔法方法理解" class="headerlink" title="8.魔法方法理解"></a>8.魔法方法理解</h1><p>魔法方法是python内置方法，不需要主动调用，存在的目的是为了给python的解释器进行调用，几乎每个魔法方法都有一个对应的内置函数，或者运算符，当我们对这个对象使用这些函数或者运算符时就会调用类中的对应魔法方法，可以理解为重写内置函数</p>
<p>实际上, 当我们调用x = SomeClass()的时候调用,__init__并不是第一个执行的, __new__才是。所以准确来说,是__new__和__init__共同构成了”构造函数”.</p>
<p><strong>new</strong>() 是一种负责创建类实例的静态方法，它无需使用 staticmethod 装饰器修饰，且该方法会优先 <strong>init</strong>() 初始化方法被调用</p>
<h1 id="9-正则表达式"><a href="#9-正则表达式" class="headerlink" title="9.正则表达式"></a>9.正则表达式</h1><p>##9.1 match()和search()比较</p>
<pre><code class="hljs ruby">m = re.match(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;seafood&#x27;</span>) 
m.group()
<span class="hljs-meta">&gt;&gt;</span>&gt; None    <span class="hljs-comment"># 匹配失败</span>

m = re.search(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;seafood&#x27;</span>) 
m.group()
<span class="hljs-meta">&gt;&gt;</span>&gt; <span class="hljs-string">&#x27;foo&#x27;</span> <span class="hljs-comment"># 搜索成功， 但是之前匹配失败</span></code></pre>
<p>match是从字符串的起始部分开始匹配模式，把字符串当作一个整体来匹配，而search表示字符串中任意位置出现符合匹配模式的字符串，都将其提取出来。<br>##9.2  中括号（[cr][23][dp][o2]）和或运算符（r2d2|c3po）的区别</p>
<ul>
<li>[cr][23][dp][o2]<blockquote>
<p>上述表示匹配由四个字符组成的类似‘ABCD’字符串，每一个字符匹配一个中括号内的两个字符中的一个</p>
</blockquote>
</li>
<li>r2d2|c3po<blockquote>
<p>上述表示匹配“r2d2”或“c3po”<br>##9.3 使用group()或groups()访问匹配组</p>
</blockquote>
</li>
</ul>
<p>pattern中每一个括号为一个匹配模式，返回的结果保存在group()中，而groups()可以查看所有的子组匹配结果（如果pattern中无括号分组模式则groups为空）。</p>
<blockquote>
<blockquote>
<p>m = re.match(‘(\w\w\w)-(\d\d\d)’, ‘abc-123’)<br>m.group() # 完整匹配<br>‘abc-123’<br>m.group(1) # 子组 1<br>‘abc’<br>m.group(2) # 子组 2<br>‘123’<br>m.groups() # 全部子组<br>(‘abc’, ‘123’)</p>
</blockquote>
</blockquote>
<h2 id="9-4-findall和search方法的区别"><a href="#9-4-findall和search方法的区别" class="headerlink" title="9.4 findall和search方法的区别"></a>9.4 findall和search方法的区别</h2><p>findall()查询字符串中某个正则表达式模式全部的非重复出现情况，和search类似，但是findall总是返回一个列表，<strong>当匹配失败时列表为空；当匹配成功时返回所有成功的匹配部分</strong>。</p>
<h2 id="9-5-sub-和subn-，表示替换"><a href="#9-5-sub-和subn-，表示替换" class="headerlink" title="9.5 sub()和subn()，表示替换"></a>9.5 sub()和subn()，表示替换</h2><p>sub和subn基本一样，但是subn还返回了替换的次数。</p>
<h1 id="10-python多线程与多进程"><a href="#10-python多线程与多进程" class="headerlink" title="10 python多线程与多进程"></a>10 python多线程与多进程</h1><p>参考<a href="https://www.cnblogs.com/kaituorensheng/p/4465768.html">python进程池：multiprocessing.pool - jihite - 博客园 (cnblogs.com)</a></p>
<h2 id="10-1-总结"><a href="#10-1-总结" class="headerlink" title="10.1 总结"></a>10.1 总结</h2><p><strong>i/o密集型任务用多线程，多任务计算使用多进程</strong></p>
<h2 id="10-2-使用进程池"><a href="#10-2-使用进程池" class="headerlink" title="10.2 使用进程池"></a>10.2 使用进程池</h2><h3 id="10-2-1-样例"><a href="#10-2-1-样例" class="headerlink" title="10.2.1 样例"></a>10.2.1 样例</h3><pre><code class="hljs swift">#coding: utf-<span class="hljs-number">8</span>
<span class="hljs-keyword">import</span> multiprocessing
<span class="hljs-keyword">import</span> time

def <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(msg)</span></span>:
    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;msg:&quot;</span>, msg
    time.sleep(<span class="hljs-number">3</span>)
    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;end&quot;</span>

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
    pool = multiprocessing.<span class="hljs-type">Pool</span>(processes = <span class="hljs-number">3</span>)
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">4</span>):
        msg = <span class="hljs-string">&quot;hello %d&quot;</span> %(i)
        pool.apply_async(<span class="hljs-function"><span class="hljs-keyword">func</span>, <span class="hljs-params">(msg, )</span></span>)   #维持**同时**执行的进程总数为processes，当一个进程执行完毕后会添加新的进程进去（多通道）
   		#pool.apply(<span class="hljs-function"><span class="hljs-keyword">func</span>, <span class="hljs-params">(msg, )</span></span>) # 而使用apply方法的时候是通道阻塞的，一次只有一个进程在运行，当一个进程执行完毕后再添加新的进程（单通道）
    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Mark~ Mark~ Mark~~~~~~~~~~~~~~~~~~~~~~&quot;</span>
    pool.close()
    pool.<span class="hljs-built_in">join</span>()   #调用<span class="hljs-built_in">join</span>之前，先调用close函数，否则会出错。执行完close后不会有新的进程加入到pool,<span class="hljs-built_in">join</span>函数等待所有子进程结束
    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Sub-process(es) done.&quot;</span></code></pre>

<h3 id="10-2-2-结果："><a href="#10-2-2-结果：" class="headerlink" title="10.2.2 结果："></a>10.2.2 结果：</h3><p>apply_async方法，多通道</p>
<pre><code class="hljs yaml"><span class="hljs-attr">mMsg:</span> <span class="hljs-string">hark~</span> <span class="hljs-string">Mark~</span> <span class="hljs-string">Mark~~~~~~~~~~~~~~~~~~~~~~ello</span> <span class="hljs-number">0</span>
 
<span class="hljs-attr">msg:</span> <span class="hljs-string">hello</span> <span class="hljs-number">1</span>
<span class="hljs-attr">msg:</span> <span class="hljs-string">hello</span> <span class="hljs-number">2</span>
<span class="hljs-string">end</span>
<span class="hljs-attr">msg:</span> <span class="hljs-string">hello</span> <span class="hljs-number">3</span>
<span class="hljs-string">end</span>
<span class="hljs-string">end</span>
<span class="hljs-string">end</span>
<span class="hljs-string">Sub-process(es)</span> <span class="hljs-string">done.</span></code></pre>

<p>apply方法，单通道</p>
<pre><code class="hljs yaml"><span class="hljs-attr">msg:</span> <span class="hljs-string">hello</span> <span class="hljs-number">0</span>
<span class="hljs-string">end</span>
<span class="hljs-attr">msg:</span> <span class="hljs-string">hello</span> <span class="hljs-number">1</span>
<span class="hljs-string">end</span>
<span class="hljs-attr">msg:</span> <span class="hljs-string">hello</span> <span class="hljs-number">2</span>
<span class="hljs-string">end</span>
<span class="hljs-attr">msg:</span> <span class="hljs-string">hello</span> <span class="hljs-number">3</span>
<span class="hljs-string">end</span>
<span class="hljs-string">Mark~</span> <span class="hljs-string">Mark~</span> <span class="hljs-string">Mark~~~~~~~~~~~~~~~~~~~~~~</span>
<span class="hljs-string">Sub-process(es)</span> <span class="hljs-string">done.</span></code></pre>

<h1 id="11-python-集合set中-add与update的区别"><a href="#11-python-集合set中-add与update的区别" class="headerlink" title="11 python 集合set中 add与update的区别"></a>11 python 集合set中 add与update的区别</h1><p>集合set是一个无序不重复元素的集</p>
<pre><code class="hljs python">set([<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;hi&#x27;</span>])
<span class="hljs-comment"># &#123;&#x27;hello&#x27;, &#x27;hi&#x27;&#125;</span>
set(<span class="hljs-string">&#x27;hello hello hi&#x27;</span>)
<span class="hljs-comment"># &#123;&#x27; &#x27;, &#x27;e&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;l&#x27;, &#x27;o&#x27;&#125;</span></code></pre>

<p><code>set.add()</code> 与<code>set.update()</code>的区别</p>
<pre><code class="hljs python">myset1 = set()
myset1.add(<span class="hljs-string">&#x27;hello&#x27;</span>)
<span class="hljs-comment">#&#123;&#x27;hello&#x27;&#125;</span>
myset1.update(<span class="hljs-string">&#x27;world&#x27;</span>)
<span class="hljs-comment">#&#123;&#x27;d&#x27;, &#x27;hello&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;w&#x27;&#125;</span>

myset2 = set()
myset2.add(<span class="hljs-string">&#x27;123&#x27;</span>)
myset2.update(<span class="hljs-string">&#x27;123&#x27;</span>)
<span class="hljs-comment">#&#123;&#x27;1&#x27;, &#x27;123&#x27;, &#x27;2&#x27;, &#x27;3&#x27;&#125;</span></code></pre>

<h1 id="12-python离线环境迁移"><a href="#12-python离线环境迁移" class="headerlink" title="12. python离线环境迁移"></a>12. python离线环境迁移</h1><h2 id="12-1-依赖文件requirement-txt生成"><a href="#12-1-依赖文件requirement-txt生成" class="headerlink" title="12.1 依赖文件requirement.txt生成"></a>12.1 依赖文件requirement.txt生成</h2><pre><code class="hljs pgsql"># 在当前目录生成该目录下项目所需的所有依赖文件：注意生成包之后需要手动核对一下版本最好，会有部分版本生成错误的问题
pipreqs ./ <span class="hljs-comment">--encoding=utf8</span>
# 与pip <span class="hljs-keyword">freeze</span>的区别
# <span class="hljs-keyword">freeze</span> 是生成当前python环境的所有包</code></pre>

<h2 id="12-2-然后根据requirement-txt批量下载包文件"><a href="#12-2-然后根据requirement-txt批量下载包文件" class="headerlink" title="12.2 然后根据requirement.txt批量下载包文件"></a>12.2 然后根据requirement.txt批量下载包文件</h2><pre><code class="hljs jboss-cli">pip wheel <span class="hljs-params">--wheel-dir=</span><span class="hljs-string">.pip</span> wheel <span class="hljs-params">--wheel-dir=</span><span class="hljs-string">./packages</span> -r requirements.txt
<span class="hljs-comment"># 最后一起迁移到离线环境中并进行安装</span>
<span class="hljs-comment">#在新服务器的site-packages目录下执行：</span>
pip install <span class="hljs-params">--no-index</span> <span class="hljs-params">--find-links=/xxx/xxx/packages</span> -r <span class="hljs-string">/xxx/xxx/packages/requirements.txt</span></code></pre>

<h2 id="12-3-出现问题"><a href="#12-3-出现问题" class="headerlink" title="12.3 出现问题"></a>12.3 出现问题</h2><p>使用pipreqs生成的requirement.txt无法完整安装所有的包</p>
<p>使用<code>python -m pip freeze &gt; req.txt</code>生成依赖文件然后替换用该文件安装</p>
<h1 id="13-collection方法详解"><a href="#13-collection方法详解" class="headerlink" title="13. collection方法详解"></a>13. collection方法详解</h1><h2 id="13-1-命名元组-namedtuple"><a href="#13-1-命名元组-namedtuple" class="headerlink" title="13.1 命名元组 namedtuple"></a>13.1 命名元组 namedtuple</h2><p>使用namedtuple可以对元组中的每一个值进行命名</p>
<pre><code class="hljs livescript"><span class="hljs-comment"># 使用命名元组解析csv</span>
<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> csv

EmployeeRecord = namedtuple(<span class="hljs-string">&#x27;EmployeeRecord&#x27;</span>,<span class="hljs-string">&#x27;name, age, title, department, paygrade&#x27;</span>)
<span class="hljs-keyword">for</span> emp <span class="hljs-keyword">in</span> <span class="hljs-keyword">map</span>(EmployeeRecord._make,csv.reader(open(<span class="hljs-string">&quot;employee.csv&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>))):
    <span class="hljs-built_in">print</span> (emp.name,emp.title)</code></pre>

<h2 id="13-2-defaultdict"><a href="#13-2-defaultdict" class="headerlink" title="13.2 defaultdict"></a>13.2 defaultdict</h2><p>功能和dict差不多，区别是会对未存在的key值赋予一个默认值而不报异常</p>
<p>并且 defaultdict()的default_factory参数可以传入list，int，tuple等类型</p>
<pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> *</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = [(<span class="hljs-string">&#x27;yellow&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;yellow&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-number">5</span>)]</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d = defaultdict(list)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> s: </span>
<span class="hljs-meta">...</span> <span class="python">	d[k].append(v)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d.items()</span>
[(&#x27;blue&#x27;, [2, 4]), (&#x27;red&#x27;, [5]), (&#x27;yellow&#x27;, [1, 3])]</code></pre>

<h2 id="13-3-Counter"><a href="#13-3-Counter" class="headerlink" title="13.3 Counter"></a>13.3 Counter</h2><p>counter可以支持方便、快速的计数</p>
<pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> *

<span class="hljs-meta">&gt;&gt;&gt; </span>cnt = Counter(<span class="hljs-string">&#x27;aabbcc&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>cnt
Out[<span class="hljs-number">14</span>]: Counter(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>&#125;)</code></pre>

<h2 id="13-4-deque"><a href="#13-4-deque" class="headerlink" title="13.4 deque"></a>13.4 deque</h2><p>deque是栈和队列的一种广义实现，deque是”double-end queue”的简称；deque支持线程安全、有效内存地以近似O(1)的性能在deque的两端插入和删除元素，尽管list也支持相似的操作，但是它主要在固定长度操作上的优化，从而在pop(0)和insert(0,v)（会改变数据的位置和大小）上有O(n)的时间复杂度。</p>
<pre><code class="hljs angelscript">&gt;&gt;&gt; <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque
&gt;&gt;&gt; dq = deque(range(<span class="hljs-number">10</span>), maxlen=<span class="hljs-number">10</span>) 
&gt;&gt;&gt; dq
deque([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], maxlen=<span class="hljs-number">10</span>)
# rotate 将循环队列向右移三次
&gt;&gt;&gt; dq.rotate(<span class="hljs-number">3</span>) 
&gt;&gt;&gt; dq
deque([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], maxlen=<span class="hljs-number">10</span>)</code></pre>

]]></content>
      <categories>
        <category>编程语言特性相关</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>&#39;捕蛇者说&#39;</title>
    <url>/2021/02/23/python/%E6%8D%95%E8%9B%87%E8%80%85%E8%AF%B4/</url>
    <content><![CDATA[<h2 id="第一节："><a href="#第一节：" class="headerlink" title="第一节："></a>第一节：</h2><ul>
<li><p>Python’s super() considered super! <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/">Python’s super() considered super! | Deep Thoughts by Raymond Hettinger (wordpress.com)</a></p>
</li>
<li><p>提问的智慧（<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md#%E5%A3%B0%E6%98%8E%EF%BC%89">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md#%E5%A3%B0%E6%98%8E）</a></p>
</li>
<li><p>XY program <a href="https://xyproblem.info/">The XY Problem</a></p>
</li>
<li><p>APScheduler： 定時任務框架 </p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=MCs5OvhV9S4">David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015</a></p>
</li>
<li><p>书籍：ddia</p>
</li>
<li><p>播客：tgtalk</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>spark学习</title>
    <url>/2021/03/03/spark/spark%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="1-0-基础概念"><a href="#1-0-基础概念" class="headerlink" title="1.0 基础概念"></a>1.0 基础概念</h1><h2 id="1-1-核心组件"><a href="#1-1-核心组件" class="headerlink" title="1.1 核心组件"></a>1.1 核心组件</h2><ul>
<li>Driver</li>
</ul>
<blockquote>
<p>将用户程序转化成任务（job）</p>
<p>在Executor之间执行任务调度</p>
<p>跟踪Executor的执行情况</p>
<p>通过UI站视查询运行情况</p>
</blockquote>
<ul>
<li>Executor：</li>
</ul>
<blockquote>
<p>执行任务并返回给Driver</p>
<p>通过自身的Block Manager为用户程序中需要缓存的RDD提供内存式存储。RDD是直接存储在Executor中的进程内的，因此任务在运行时可以充分利用缓存数据加速运算。</p>
</blockquote>
<ul>
<li>Master</li>
</ul>
<blockquote>
<p> 资源调度和分配，集群的监控</p>
</blockquote>
<ul>
<li>Worker</li>
</ul>
<blockquote>
<p>由Master分配任务并进行计算</p>
</blockquote>
<ul>
<li>ApplicantsMaster</li>
</ul>
<blockquote>
<p>对Driver与Master的直接通信进行解耦合，Driver通过ApplicantsMaster与Master进行通信，监控任务的执行等任务</p>
</blockquote>
<h2 id="1-2-核心概念"><a href="#1-2-核心概念" class="headerlink" title="1.2 核心概念"></a>1.2 核心概念</h2><ul>
<li>Executor和Core</li>
</ul>
<blockquote>
<p>Executor为提供计算的节点个数，Core为核数</p>
</blockquote>
<ul>
<li>并行度</li>
</ul>
<blockquote>
<p>整个集群并行执行任务的数量</p>
</blockquote>
<h2 id="1-3-其他相关"><a href="#1-3-其他相关" class="headerlink" title="1.3 其他相关"></a>1.3 其他相关</h2><ul>
<li><strong>序列化</strong>（serialization）在<a href="https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8">计算机科学</a>的资料处理中，是指将<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B">数据结构</a>或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。</li>
</ul>
<h1 id="2-0-RDD"><a href="#2-0-RDD" class="headerlink" title="2.0 RDD"></a>2.0 RDD</h1><p>RDD数据处理方式：类似IO流，包含装饰器设计模式。</p>
<p>通过每一个操作方法的输入与输出来确定数据的格式。</p>
<h2 id="2-1-RDD的创建"><a href="#2-1-RDD的创建" class="headerlink" title="2.1 RDD的创建"></a>2.1 RDD的创建</h2><pre><code class="hljs awk"><span class="hljs-regexp">//</span>TODO 通过内存中创建
val ints: Seq[Int] = Seq(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)
<span class="hljs-regexp">//</span>val value: RDD[Int] = sc.parallelize(ints)
<span class="hljs-regexp">//m</span>akeRdd方法就是parallelize方法的包装
val value: RDD[Int] = sc.makeRDD(ints)

<span class="hljs-regexp">//</span>TODO 通过文件创建rdd
<span class="hljs-regexp">//</span><span class="hljs-number">1</span>. 通过文件路径创建
val value: RDD[String] = sc.textFile(<span class="hljs-string">&quot;datas/1.txt&quot;</span>)
<span class="hljs-regexp">//</span><span class="hljs-number">2</span>. 通过文件夹创建
<span class="hljs-regexp">//</span>val value: RDD[String] = sc.textFile(<span class="hljs-string">&quot;datas.txt&quot;</span>)
<span class="hljs-regexp">//</span><span class="hljs-number">3</span>. 通过文件路径通配符创建
<span class="hljs-regexp">//</span>val value: RDD[String] = sc.textFile(<span class="hljs-string">&quot;datas/1*.txt&quot;</span>)
<span class="hljs-regexp">//</span><span class="hljs-number">4</span>. 通过hdfs文件系统路径创建
<span class="hljs-regexp">//</span>val value: RDD[String] = sc.textFile(<span class="hljs-string">&quot;hdfs://linux1:8080/tmp/file.txt&quot;</span>)</code></pre>

<h2 id="2-1-RDD方法-gt-RDD算子"><a href="#2-1-RDD方法-gt-RDD算子" class="headerlink" title="2.1 RDD方法=&gt;RDD算子"></a>2.1 RDD方法=&gt;RDD算子</h2><ul>
<li>转换方法</li>
</ul>
<p>功能的转换和封装，将旧的RDD包装成新的RDD(flatMap,map)</p>
<ul>
<li>行动方法（操作方法）</li>
</ul>
<p>触发任务的调度和作业的执行(collect)</p>
<p>惰性执行方法</p>
<h3 id="2-1-1-RDD转换算子"><a href="#2-1-1-RDD转换算子" class="headerlink" title="2.1.1 RDD转换算子"></a>2.1.1 RDD转换算子</h3><h4 id="2-1-1-1-Map"><a href="#2-1-1-1-Map" class="headerlink" title="2.1.1.1 Map"></a>2.1.1.1 Map</h4><ul>
<li>Map方法</li>
</ul>
<pre><code class="hljs maxima">scala&gt; val rdd = sc.makeRDD(List(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))
rdd: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[<span class="hljs-number">0</span>] <span class="hljs-built_in">at</span> makeRDD <span class="hljs-built_in">at</span> &lt;console&gt;:<span class="hljs-number">24</span>
scala&gt; rdd.<span class="hljs-built_in">map</span>&#123;(v)=&gt;(v*<span class="hljs-number">2</span>)&#125;.collect()
scala&gt; rdd.<span class="hljs-built_in">map</span>((<span class="hljs-built_in">num</span>:Int)=&gt;&#123;<span class="hljs-built_in">num</span>*<span class="hljs-number">2</span>&#125;).collect()
scala&gt; rdd.<span class="hljs-built_in">map</span>((<span class="hljs-built_in">num</span>:Int)=&gt;(<span class="hljs-built_in">num</span>*<span class="hljs-number">2</span>)).collect()
scala&gt; rdd.<span class="hljs-built_in">map</span>((<span class="hljs-built_in">num</span>:Int)=&gt;<span class="hljs-built_in">num</span>*<span class="hljs-number">2</span>).collect()
# 最简单的方法
scala&gt; rdd.<span class="hljs-built_in">map</span>&#123;<span class="hljs-symbol">_</span>*<span class="hljs-number">2</span>&#125;.collect()
scala&gt; rdd.<span class="hljs-built_in">map</span>(<span class="hljs-symbol">_</span>*<span class="hljs-number">2</span>).collect()
res: Array[Int] = Array(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)</code></pre>

<ul>
<li>Map的并行计算顺序</li>
<li><ul>
<li>单个分区内的数据是一个一个执行的，只有前面一个数据的所有逻辑都执行完才能进行下一个数据的执行逻辑，分区内数据的执行是有序的</li>
<li>而多个分区的数据计算是无序的</li>
</ul>
</li>
</ul>
<pre><code class="hljs gauss"><span class="hljs-meta"># 单个分区</span>
val value: RDD[Int] = sc.makeRDD(<span class="hljs-built_in">List</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>),**<span class="hljs-number">1</span>**)
  val mapRDD: RDD[Int] = value.map(
    num =&gt; &#123;
      <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + num)
      num
    &#125;
  )
  val mapRDD1: RDD[Int] = mapRDD.map(
    num =&gt; &#123;
      <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;@@@@@@@@&quot;</span> + num)
      num
    &#125;
  )
  mapRDD1.collect()
  <span class="hljs-meta"># 输出结果</span>
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">1</span>
  <span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-number">1</span>
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">2</span>
  <span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-number">2</span>
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">3</span>
  <span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-number">3</span>
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">4</span>
  <span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-number">4</span>
  <span class="hljs-meta"># 多个分区</span>
  val value: RDD[Int] = sc.makeRDD(<span class="hljs-built_in">List</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>),<span class="hljs-number">2</span>)
  。。。。。。。
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">3</span>
  <span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-number">3</span>
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">4</span>
  <span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-number">4</span>
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">1</span>
  <span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-number">1</span>
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">2</span>
  <span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-number">2</span></code></pre>

<h4 id="2-1-1-2-MapPratitions"><a href="#2-1-1-2-MapPratitions" class="headerlink" title="2.1.1.2 MapPratitions"></a>2.1.1.2 MapPratitions</h4><p>MapPratitions是对分区的数据进行操作</p>
<pre><code class="hljs php"><span class="hljs-comment"># 求分区的最大值</span>
val value: RDD[<span class="hljs-keyword">Int</span>] = sc.makeRDD(<span class="hljs-keyword">List</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>),<span class="hljs-number">2</span>)
<span class="hljs-comment"># mapPartitions传入的是迭代器，传出的也是迭代器</span>
   val value1: RDD[<span class="hljs-keyword">Int</span>] = value.mapPartitions (
     iter =&gt; <span class="hljs-keyword">List</span>(iter.max).<span class="hljs-built_in">iterator</span>
   )
   value1.collect().<span class="hljs-keyword">foreach</span>(println)
   <span class="hljs-comment"># 输出</span>
   <span class="hljs-number">2</span>
   <span class="hljs-number">4</span></code></pre>

<h4 id="2-1-1-3-Map和Mappartitions的对比"><a href="#2-1-1-3-Map和Mappartitions的对比" class="headerlink" title="2.1.1.3 Map和Mappartitions的对比"></a>2.1.1.3 Map和Mappartitions的对比</h4><p>map是对所有的数据串行进行操作，输入与输出个数相同</p>
<p>而mappartitions是分块对分区内的数据进行操作，输入与输出数据个书可以不同。</p>
<p>map速度慢，占用内存较少</p>
<p>mappartitions速度快，会长时间占用内存。</p>
<h4 id="2-1-1-4-glom-方法"><a href="#2-1-1-4-glom-方法" class="headerlink" title="2.1.1.4 glom()方法"></a>2.1.1.4 glom()方法</h4><p>将同一个分区的数据直接转换为相同类型的内存数组进行处理，分区不变</p>
<h4 id="2-1-1-5-groupby"><a href="#2-1-1-5-groupby" class="headerlink" title="2.1.1.5 groupby()"></a>2.1.1.5 groupby()</h4><p>groupby方法会将数据打乱并重新组合，也称之为shuffle</p>
<p>分区数不变</p>
<h4 id="2-1-1-6-coalsce-numPartitions-num；shuffle-boolen"><a href="#2-1-1-6-coalsce-numPartitions-num；shuffle-boolen" class="headerlink" title="2.1.1.6 coalsce(numPartitions=num；shuffle=boolen)"></a>2.1.1.6 coalsce(numPartitions=num；shuffle=boolen)</h4><p>当大批量数据经过处理之后，需要<strong>缩小</strong>分区数可以使用coalsce()方法修改分区数。分区数修改后，分区内的数据不会被coalsce方法打散重新组合（并且同一个分区的数据也不会被分开）。</p>
<p>随意使用coalsce方法可能会产生数据倾斜，如果希望使数据均衡，可以使用shuffle（使shuffle=True）。</p>
<p>如果需要<strong>扩大分区</strong>的话使用repartition，它是coalsce的上层实现（coalsce(numPartitions=bignum；shuffle=True)）</p>
<h4 id="2-1-1-7-groupByKey和reduceByKey的区别"><a href="#2-1-1-7-groupByKey和reduceByKey的区别" class="headerlink" title="2.1.1.7 groupByKey和reduceByKey的区别"></a>2.1.1.7 groupByKey和reduceByKey的区别</h4><ul>
<li>groupByKey只分组，如果需要聚合需使用map</li>
<li>reduceByKey包含分组和聚合两个功能</li>
<li>如果只需要分组则只能使用groupByKey</li>
</ul>
<p><strong>groupByKey</strong>导致数据打乱重组，数据处理的时候存在shuffle操作，数据量大的话可能会导致数据倾斜然后内存溢出。</p>
<p>所以在spark中shuffle操作必须落盘处理（保存在硬盘中），不能在内存中进行等待。所以shuffle操作的性能十分低。</p>
<p><strong>reduceByKey</strong>可以预先在分区内将相同key的数据进行聚合，然后进行落盘再shuffle。<strong>提升了很大的性能</strong></p>
<p>而groupByKey只能先打乱所有的数据再落盘聚合。</p>
]]></content>
  </entry>
  <entry>
    <title>美团吃到虫子并维权成功全记录</title>
    <url>/2021/05/25/%E7%94%9F%E6%B4%BB%E5%85%B6%E4%BB%96/%E7%BE%8E%E5%9B%A2%E5%90%83%E5%88%B0%E8%99%AB%E5%AD%90%E5%B9%B6%E7%BB%B4%E6%9D%83%E6%88%90%E5%8A%9F%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="美团吃到虫子并维权成功全记录"><a href="#美团吃到虫子并维权成功全记录" class="headerlink" title="美团吃到虫子并维权成功全记录"></a>美团吃到虫子并维权成功全记录</h1><h2 id="赔偿依据法律"><a href="#赔偿依据法律" class="headerlink" title="赔偿依据法律"></a>赔偿依据法律</h2><p>“根据《食品安全法》第一百四十八条第二款的规定，“生产不符合食品安全标准的食品或者经营明知是不符合食品安全标准的食品，消费者除要求赔偿损失外，还可以向生产者或者经营者要求支付价款十倍或者损失三倍的赔偿金；增加赔偿的金额不足一千元的，为一千元。”</p>
<h2 id="2021-5-23-17-47-事情发生"><a href="#2021-5-23-17-47-事情发生" class="headerlink" title="2021/5/23 17:47 事情发生"></a>2021/5/23 17:47 事情发生</h2><ul>
<li><p>美团点外卖吃到虫子</p>
</li>
<li><p>发生时间： 约2021年5月23日18点</p>
</li>
<li><p>店铺商家名称及地址：</p>
</li>
<li><ul>
<li>（美团）XXX大食堂</li>
</ul>
</li>
<li><ul>
<li>略</li>
</ul>
</li>
<li><p>食品已拍照并已留存</p>
<img src="\img\赔偿记录\异物3.jpg" alt="1" style="zoom:25%;" />

<img src="\img\赔偿记录\异物2.jpg" style="zoom:25%;" />



</li>
</ul>
<p>##2021/5/23 17:56 尝试初步解决未果</p>
<blockquote>
<p>和商家协商希望<strong>五倍</strong>赔偿，商家表示对索要赔偿表示吃惊，说只退款。关于赔偿的事情<strong>很轻蔑的表示</strong>让我去申请美团索赔。</p>
</blockquote>
<p>但是在知乎上看了一些朋友和我遇到相同的问题但是在美团上申请了“放心吃”索赔，结果都是不太理想，为了避免不必要的麻烦遂决定绕过美团直接上12315，准备今晚先在12315app上提交投诉，然后明天打电话在投诉一遍。</p>
<h2 id="网友推荐解决方法（当无法和商家协商赔偿时）"><a href="#网友推荐解决方法（当无法和商家协商赔偿时）" class="headerlink" title="网友推荐解决方法（当无法和商家协商赔偿时）"></a>网友推荐解决方法（当无法和商家协商赔偿时）</h2><ul>
<li><p>联系当地工商局一起去找商家。</p>
</li>
<li><p>拨打+当地区号拨打12315，或者下载12315APP进行投诉，个人觉得打电话可能会快点，周末好像打不通，需要工作日拨打</p>
</li>
</ul>
<h2 id="2021-5-23-19-04-因为明天要上班所以想今天解决于是尝试联系美团客服"><a href="#2021-5-23-19-04-因为明天要上班所以想今天解决于是尝试联系美团客服" class="headerlink" title="2021/5/23 19:04 因为明天要上班所以想今天解决于是尝试联系美团客服"></a>2021/5/23 19:04 因为明天要上班所以想今天解决于是尝试联系美团客服</h2><p>网络人工客服排队99+，电话人工客服打了两次未接通人工客服。</p>
<p>于是选择等待app端的人工客服，大概等了十分钟终于有客服开始和我沟通了。</p>
<h2 id="2021-5-23-19-33-和app端人工客服开始沟通"><a href="#2021-5-23-19-33-和app端人工客服开始沟通" class="headerlink" title="2021/5/23 19:33 和app端人工客服开始沟通"></a>2021/5/23 19:33 和app端人工客服开始沟通</h2><img src="\img\赔偿记录\联系客服-1.jpg" alt="联系客服-1" style="zoom: 50%;" />



<h2 id="2021-5-23-19-40-客服沟通完表示退款并返10元红包，表示不接受。"><a href="#2021-5-23-19-40-客服沟通完表示退款并返10元红包，表示不接受。" class="headerlink" title="2021/5/23 19:40 客服沟通完表示退款并返10元红包，表示不接受。"></a>2021/5/23 19:40 客服沟通完表示退款并返10元红包，表示不接受。</h2><img src="\img\赔偿记录\10元.jpg" alt="10元" style="zoom: 50%;" />

<ul>
<li>客服让我稍等并咨询管理解决。</li>
</ul>
<h2 id="2021-5-23-19-44-客服表示给我一张30并且可提现的充值卡，表示拒绝"><a href="#2021-5-23-19-44-客服表示给我一张30并且可提现的充值卡，表示拒绝" class="headerlink" title="2021/5/23 19:44 客服表示给我一张30并且可提现的充值卡，表示拒绝"></a>2021/5/23 19:44 客服表示给我一张30并且可提现的充值卡，表示拒绝</h2><ul>
<li>表示30也拒绝后客服提升到了50元，搁这跟我<strong>钓鱼</strong>呢</li>
</ul>
<img src="\img\赔偿记录\30元.jpg" alt="30元" style="zoom: 50%;" />

<h2 id="2021-5-23-19-46-客服表示给我一张50并且可提现的充值卡，表示拒绝。将转交专员客服处理，预计24小时解决"><a href="#2021-5-23-19-46-客服表示给我一张50并且可提现的充值卡，表示拒绝。将转交专员客服处理，预计24小时解决" class="headerlink" title="2021/5/23 19:46 客服表示给我一张50并且可提现的充值卡，表示拒绝。将转交专员客服处理，预计24小时解决"></a>2021/5/23 19:46 客服表示给我一张50并且可提现的充值卡，表示拒绝。将转交专员客服处理，预计24小时解决</h2><img src="\img\赔偿记录\50元.jpg" alt="50元" style="zoom:50%;" />

<p>客服说我的问题需要提交到专员处理并一个工作日内回电，我表示明天如果不解决周二直接提到12315上。等待明天的解决方案。</p>
<img src="\img\赔偿记录\申请专员处理.jpg" alt="申请专员处理" style="zoom: 50%;" />

<h2 id="2021-5-24-一天无事发生，未得到美团专员客服联系"><a href="#2021-5-24-一天无事发生，未得到美团专员客服联系" class="headerlink" title="2021/5/24 一天无事发生，未得到美团专员客服联系"></a>2021/5/24 一天无事发生，未得到美团专员客服联系</h2><h2 id="2021-5-24-22-20-12315-APP进行投诉"><a href="#2021-5-24-22-20-12315-APP进行投诉" class="headerlink" title="2021/5/24 22:20 12315 APP进行投诉"></a>2021/5/24 22:20 12315 APP进行投诉</h2><ul>
<li>投诉内容（详细时间，地点，事情经过，基本诉求）</li>
</ul>
<p>本人于2021年5月23日17:12分在尚食客大食堂定了一份外卖（包含一份炒豆芽，一份鸡块和一份米饭），外卖于17:50分左右送达并打开准备食用，发现鸡块上粘着异物（初步判断为苍蝇），个人认为改商家“生产了不符合食品安全标准的食品”遂进行投诉：个人诉求为：希望商家对我的商品进行退款并对我支付价款十倍的赔偿金，商品订单实付价格为12.76元，但是由于使用了5元的会员红包且该红包为本人花钱购买，即总共实际付款为17.76，商家应退款17.76元并应赔偿177.6元。</p>
<img src="\img\赔偿记录\投诉.png" alt="投诉" style="zoom: 50%;" />

<img src="\img\赔偿记录\投诉2.png" alt="投诉2" style="zoom: 50%;" />



<h2 id="2021-5-25-13-44-美团客服处理状态更新显示未打通我的电话，但是并未接到电话"><a href="#2021-5-25-13-44-美团客服处理状态更新显示未打通我的电话，但是并未接到电话" class="headerlink" title="2021/5/25 13:44 美团客服处理状态更新显示未打通我的电话，但是并未接到电话"></a>2021/5/25 13:44 美团客服处理状态更新显示未打通我的电话，但是并未接到电话</h2><img src="\img\赔偿记录\专员电话未呼通.jpg" alt="专员电话未呼通" style="zoom: 50%;" />



<h2 id="2021-5-25-14-54-接到专员客服电话，客服表示已对该店铺进行监管并对我退款进行十倍支付款赔偿"><a href="#2021-5-25-14-54-接到专员客服电话，客服表示已对该店铺进行监管并对我退款进行十倍支付款赔偿" class="headerlink" title="2021/5/25 14:54 接到专员客服电话，客服表示已对该店铺进行监管并对我退款进行十倍支付款赔偿"></a>2021/5/25 14:54 接到专员客服电话，客服表示已对该店铺进行监管并对我退款进行十倍支付款赔偿</h2><ul>
<li>本来算的实付款应该为17.76的，其中包含一张会员红包，但是这个会员红包是我花了3.3开的，所以一张会员券并不值什么钱，所以实付就算12.76算了。赔偿金额为127.6元。</li>
</ul>
<img src="\img\赔偿记录\赔偿记录.jpg" alt="赔偿记录" style="zoom: 50%;" />



<h2 id="2021-5-25-14-55-问题解决"><a href="#2021-5-25-14-55-问题解决" class="headerlink" title="2021/5/25 14:55 问题解决"></a>2021/5/25 14:55 问题解决</h2><h2 id="2021-5-25-14-56-撤销12315投诉"><a href="#2021-5-25-14-56-撤销12315投诉" class="headerlink" title="2021/5/25 14:56 撤销12315投诉"></a>2021/5/25 14:56 撤销12315投诉</h2>]]></content>
      <categories>
        <category>生活其他</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>维权</tag>
      </tags>
  </entry>
  <entry>
    <title>保险</title>
    <url>/2021/06/29/%E7%94%9F%E6%B4%BB%E5%85%B6%E4%BB%96/%E4%BF%9D%E9%99%A9/</url>
    <content><![CDATA[<h1 id="保险"><a href="#保险" class="headerlink" title="保险"></a>保险</h1><ul>
<li><p>风险对抗</p>
</li>
<li><p>风险只能转移</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>通过scala调用python的两种方式</title>
    <url>/2019/10/18/spark/%E9%80%9A%E8%BF%87scala%E8%B0%83%E7%94%A8python%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="1-模仿cmd命令方式"><a href="#1-模仿cmd命令方式" class="headerlink" title="1. 模仿cmd命令方式"></a>1. 模仿cmd命令方式</h1><p>使用“Runtime.getRuntime.exec(exeStr)”方法，传入要执行的cmd命令就可以了。</p>
<pre><code class="hljs stata">def TestCmdExec(<span class="hljs-keyword">args</span>: Array[String]) &#123;
  <span class="hljs-keyword">var</span> exeStr = <span class="hljs-string">&quot;python D:/ckk_software/BDZbiandianzhan_py/scalaExcute.py &quot;</span>
  exeStr += <span class="hljs-string">&quot; 李庄10 &quot;</span> + <span class="hljs-string">&quot; 0130343451706 &quot;</span>
  <span class="hljs-keyword">var</span> proc = Runtime.getRuntime.exec(exeStr)
  <span class="hljs-keyword">var</span> <span class="hljs-keyword">ir</span> = new InputStreamReader(proc.getInputStream, <span class="hljs-string">&quot;GBK&quot;</span>)
  <span class="hljs-keyword">var</span> <span class="hljs-keyword">input</span> = new LineNumberReader(<span class="hljs-keyword">ir</span>)
  <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">input</span>.readLine()
  <span class="hljs-keyword">while</span> (result != <span class="hljs-string">&quot;match fail&quot;</span> &amp;&amp; result != null) &#123;
    println(result)
    result = <span class="hljs-keyword">input</span>.readLine()
  &#125;
  <span class="hljs-keyword">input</span>.<span class="hljs-keyword">close</span>()
  <span class="hljs-keyword">ir</span>.<span class="hljs-keyword">close</span>()
  println(proc.waitFor())
  proc.waitFor()
&#125;</code></pre>
<ul>
<li>优点：操作简单，对于简单的命令什么的可以直接使用</li>
<li>缺点：对于批量调用python程序比较复杂，也比较愚蠢，关于路径什么的都需要修改，不建议使用。</li>
</ul>
<h2 id="2-编写restful接口，在scala内部发送http请求来调用"><a href="#2-编写restful接口，在scala内部发送http请求来调用" class="headerlink" title="2. 编写restful接口，在scala内部发送http请求来调用"></a>2. 编写restful接口，在scala内部发送http请求来调用</h2><p>restful服务：URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</p>
<h3 id="1-编写接口"><a href="#1-编写接口" class="headerlink" title="1. 编写接口"></a>1. 编写接口</h3><blockquote>
<p>因为要调用的程序是python程序，所以要使用python的flask来编写接口。</p>
</blockquote>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> function <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,url_for,request
<span class="hljs-keyword">import</span> json

data = pd.ExcelFile(<span class="hljs-string">&quot;cidain2.xlsx&quot;</span>)
data = data.parse(<span class="hljs-string">&quot;Sheet1&quot;</span>)
cidian = data[<span class="hljs-string">&#x27;PMS_LINE_NAME&#x27;</span>].values.tolist()
org_no = data[<span class="hljs-string">&#x27;PI_ORG_NO&#x27;</span>].values.tolist()
id = data[<span class="hljs-string">&#x27;PMS_LINE_ID&#x27;</span>].values.tolist()
<span class="hljs-comment"># go方法为需要scala端调用的程序</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">go</span>(<span class="hljs-params">text,org_id,cidian,org_no,id</span>):</span>
    <span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">    :param text: &quot;高庄10&quot;</span>
<span class="hljs-string">    :param org: 130343451706</span>
<span class="hljs-string">    :return:</span>
<span class="hljs-string">    &#x27;&#x27;&#x27;</span>
    org_type = <span class="hljs-string">&quot;04&quot;</span>
    <span class="hljs-keyword">if</span> org_type == <span class="hljs-number">3</span>:
        org = str(org_id)[:<span class="hljs-number">-2</span>]
    <span class="hljs-keyword">else</span>:
        org = str(org_id)
    label, cidian, id = fun(org, text, cidian, org_no, id)
    label, id = filt(label, cidian, id)
    <span class="hljs-keyword">if</span> len(label) &gt; <span class="hljs-number">0</span> :
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(label)):    
            print(label[i]+<span class="hljs-string">&quot;\t&quot;</span>+id[i])
    <span class="hljs-keyword">else</span> :
        print(<span class="hljs-string">&quot;match fail&quot;</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\t&quot;</span>.join(label)+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>.join (id)
<span class="hljs-comment"># 注册flaskapp,接收get请求进行处理</span>
app = Flask(__name__)
<span class="hljs-comment"># get请求参数在url中，访问“http：//127.0.0.1：5000/reason/orgId”</span>
<span class="hljs-meta">@app.route(&quot;/&lt;reason&gt;/&lt;orgId&gt;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exeFlask</span>(<span class="hljs-params">reason,orgId</span>):</span> 
    preResult = go(reason,orgId)
    <span class="hljs-keyword">return</span> str(preResult)
<span class="hljs-comment"># 接收post请求，请求参数封装在客户端的request中请求中</span>
<span class="hljs-comment"># 访问“http：//127.0.0.1：5000/”</span>
<span class="hljs-meta">@app.route(&#x27;/&#x27;,methods=[&#x27;POST&#x27;])</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">postRestful</span>():</span>
    data = json.loads(str(request.data,<span class="hljs-string">&#x27;utf-8&#x27;</span>))
    reason = data[<span class="hljs-string">&#x27;reason&#x27;</span>]
    orgId =data[<span class="hljs-string">&#x27;orgId&#x27;</span>] 
    print(<span class="hljs-string">&quot;reason: &quot;</span> + reason + <span class="hljs-string">&quot;\torgId:\t&quot;</span> + orgId)
    preResult = go(reason,orgId,cidian,org_no,id)
    <span class="hljs-keyword">return</span> str(preResult)
<span class="hljs-comment"># 启动接口，run方法内可以不设参数，默认本地的5000端口</span>
<span class="hljs-comment"># 如果要允许同内网访问的话要把host设置为“0.0.0.0”</span>
app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,port=<span class="hljs-string">&quot;5000&quot;</span>)</code></pre>
<h3 id="2-scala端发送请求（httpclient4-5-5和httpclient3-0-1两种版本）"><a href="#2-scala端发送请求（httpclient4-5-5和httpclient3-0-1两种版本）" class="headerlink" title="2. scala端发送请求（httpclient4.5.5和httpclient3.0.1两种版本）"></a>2. scala端发送请求（httpclient4.5.5和httpclient3.0.1两种版本）</h3><ul>
<li>前言：httpclient4和httpclient3的差别还是蛮大的，所以使用需要注意版本的问题，而且就网上查阅的资料来看httpclient和httpcore的版本冲突还是蛮多的，还有和spark的版本兼容性问题也是。<h4 id="1-httpclient4-5-5"><a href="#1-httpclient4-5-5" class="headerlink" title="1. httpclient4.5.5"></a>1. httpclient4.5.5</h4></li>
<li>httpclient4.5.5是用在spark2.3上面的，maven添加依赖方法略<blockquote>
<p>get请求示例</p>
</blockquote>
</li>
</ul>
<pre><code class="hljs properties"><span class="hljs-attr">def</span> <span class="hljs-string">TestHttpGet(url: String): String = &#123;</span>
   <span class="hljs-attr">import</span> <span class="hljs-string">org.apache.http.client.methods.&#123; HttpGet &#125;</span>
   <span class="hljs-attr">import</span> <span class="hljs-string">org.apache.http.impl.client.HttpClients</span>
   <span class="hljs-attr">import</span> <span class="hljs-string">org.apache.http.util.EntityUtils</span>

   <span class="hljs-attr">var</span> <span class="hljs-string">host = &quot;http://10.138.72.199:5000/&quot;</span>
   <span class="hljs-attr">var</span> <span class="hljs-string">orgId = &quot;/0130343451006&quot;</span>
   <span class="hljs-attr">var</span> <span class="hljs-string">rawText = &quot;_霍邱县开发区杭庙村石船 </span>
   <span class="hljs-attr">var</span> <span class="hljs-string">url = host + rawText + orgId</span>
   <span class="hljs-attr">var</span> <span class="hljs-string">HttpClient = HttpClients.createDefault()</span>
   <span class="hljs-attr">val</span> <span class="hljs-string">get = new HttpGet(url)</span>
   <span class="hljs-attr">var</span> <span class="hljs-string">response = HttpClient.execute(get)</span>
   <span class="hljs-attr">EntityUtils.toString(response.getEntity)</span>
 <span class="hljs-attr">&#125;</span></code></pre>
<blockquote>
<p>post请求示例</p>
</blockquote>
<pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restful</span></span>()&#123;
    <span class="hljs-keyword">import</span> org.apache.http.&#123; <span class="hljs-type">HttpEntity</span>, <span class="hljs-type">HttpResponse</span> &#125;
    <span class="hljs-keyword">import</span> org.apache.http.client.methods.<span class="hljs-type">HttpPost</span>
    <span class="hljs-keyword">import</span> org.apache.http.entity.<span class="hljs-type">StringEntity</span>
    <span class="hljs-keyword">import</span> org.apache.http.impl.client.<span class="hljs-type">DefaultHttpClient</span>
    <span class="hljs-keyword">import</span> org.apache.http.protocol.<span class="hljs-type">HTTP</span>
    <span class="hljs-keyword">import</span> org.apache.http.util.<span class="hljs-type">EntityUtils</span>
    <span class="hljs-keyword">val</span> httpclient = <span class="hljs-keyword">new</span> <span class="hljs-type">DefaultHttpClient</span>
    <span class="hljs-keyword">try</span> &#123;
      <span class="hljs-keyword">val</span> url = <span class="hljs-string">&quot;http://10.138.72.199:5000&quot;</span>
      <span class="hljs-keyword">val</span> reason = <span class="hljs-string">&quot;_池河大道交警队处_交警队外台区新架设低压电缆释放&quot;</span>
      <span class="hljs-keyword">val</span> orgId = <span class="hljs-string">&quot;0130343451304&quot;</span> <span class="hljs-comment">//经度</span>
      <span class="hljs-keyword">val</span> dtype = <span class="hljs-string">&quot;json&quot;</span> <span class="hljs-comment">//返回数据的格式,xml或json，默认json</span>
      <span class="hljs-keyword">val</span> jsonParams = <span class="hljs-string">&quot;&#123;\&quot;reason\&quot;:\&quot;&quot;</span> + reason + <span class="hljs-string">&quot;\&quot;,\&quot;orgId\&quot;: \&quot;&quot;</span> +orgId + <span class="hljs-string">&quot;\&quot;,\&quot;dtype\&quot;:\&quot;&quot;</span> + dtype + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>
     
      <span class="hljs-comment">//创建</span>
      <span class="hljs-keyword">val</span> httpost = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpPost</span>(url)
      println(<span class="hljs-string">&quot;参数：&quot;</span> + jsonParams)
      <span class="hljs-comment">//json字符串,准备发送</span>

      <span class="hljs-keyword">try</span> &#123;
        <span class="hljs-keyword">val</span> stringEntity = <span class="hljs-keyword">new</span> <span class="hljs-type">StringEntity</span>(jsonParams, <span class="hljs-type">HTTP</span>.<span class="hljs-type">UTF_8</span>)
        stringEntity.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>)
        httpost.setEntity(stringEntity)
        <span class="hljs-keyword">var</span> response: <span class="hljs-type">HttpResponse</span> = <span class="hljs-literal">null</span>
        response = httpclient.execute(httpost)
        <span class="hljs-keyword">val</span> entity: <span class="hljs-type">HttpEntity</span> = response.getEntity
        <span class="hljs-keyword">try</span> &#123;
          <span class="hljs-comment">//必需触发</span>
          println(<span class="hljs-type">EntityUtils</span>.toString(entity))
        &#125; <span class="hljs-keyword">catch</span> &#123;
          <span class="hljs-keyword">case</span> appleException: <span class="hljs-type">Exception</span> =&gt; println(appleException.toString)
        &#125;
      &#125; <span class="hljs-keyword">catch</span> &#123;
        <span class="hljs-keyword">case</span> e: <span class="hljs-type">Exception</span> =&gt; &#123;
          println(<span class="hljs-string">&quot;Exception is &quot;</span> + e.toString)
        &#125;
      &#125;
    &#125; <span class="hljs-keyword">catch</span> &#123;
      <span class="hljs-keyword">case</span> sendE: <span class="hljs-type">Exception</span> =&gt; &#123; <span class="hljs-keyword">throw</span> sendE &#125;
    &#125; <span class="hljs-keyword">finally</span> &#123;
      <span class="hljs-comment">//关闭</span>
      httpclient.getConnectionManager.shutdown
    &#125;
  &#125;</code></pre>
<h4 id="2-httpclient3-0-1"><a href="#2-httpclient3-0-1" class="headerlink" title="2.httpclient3.0.1"></a>2.httpclient3.0.1</h4><ul>
<li>httpclient3主要是支持spark1.6使用的，但是在spark2.3上面也同样兼容，但是httpclient4不支持spark1.6，因为手上的项目是spark1.6的，所以需要使用httpclient3。而且httpclient3的版本也比较古老，所以网上很少可以用的参考资料。这里是参考java版本写的scala版本的调用接口。<blockquote>
<p>依赖</p>
</blockquote>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
	<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
<blockquote>
<p>post客户请求方法（这里因为只需要用到post方法就只写了这个版本的）</p>
</blockquote>
<pre><code class="hljs reasonml">def <span class="hljs-constructor">TestHttpClient3()</span>&#123;
      import org.apache.commons.httpclient._
      import org.apache.commons.httpclient.methods._
   
      <span class="hljs-keyword">val</span> client = <span class="hljs-keyword">new</span> HttpClient
<span class="hljs-comment">//      val method = new PostMethod(&quot;http://10.138.72.199:5000&quot;)</span>
      <span class="hljs-keyword">val</span> <span class="hljs-keyword">method</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PostMethod(<span class="hljs-string">&quot;http://127.0.0.1:5000&quot;</span>)</span>
      <span class="hljs-keyword">val</span> reason = <span class="hljs-string">&quot;_徽州区富溪乡_田里3817台区改造：横担金具安装、拉线制作，低压导线展放等。&quot;</span>
      <span class="hljs-keyword">val</span> orgId = <span class="hljs-string">&quot;01303434512&quot;</span> <span class="hljs-comment">//orgId</span>
      <span class="hljs-keyword">val</span> dtype = <span class="hljs-string">&quot;json&quot;</span> <span class="hljs-comment">//返回数据的格式,xml或json，默认json</span>
      <span class="hljs-keyword">val</span> jsonParams = <span class="hljs-string">&quot;&#123;\&quot;reason\&quot;:\&quot;&quot;</span> + reason + <span class="hljs-string">&quot;\&quot;,\&quot;orgId\&quot;: \&quot;&quot;</span> + orgId + <span class="hljs-string">&quot;\&quot;,\&quot;dtype\&quot;:\&quot;&quot;</span> + dtype + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>
      <span class="hljs-comment">//设置传输头文件和json参数</span>
      println(jsonParams)
      <span class="hljs-keyword">method</span>.set<span class="hljs-constructor">RequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/json&quot;</span>)</span>
      <span class="hljs-keyword">method</span>.set<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;requestdata&quot;</span>, <span class="hljs-params">jsonParams</span>)</span>
      <span class="hljs-keyword">val</span> se = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringRequestEntity(<span class="hljs-params">jsonParams</span>,<span class="hljs-string">&quot;application/json&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>
      <span class="hljs-keyword">method</span>.set<span class="hljs-constructor">RequestEntity(<span class="hljs-params">se</span>)</span>
      <span class="hljs-comment">//执行请求</span>
      <span class="hljs-keyword">val</span> statusCode = client.execute<span class="hljs-constructor">Method(<span class="hljs-params">method</span>)</span>
      print(statusCode)
      <span class="hljs-comment">//获取返回的结果</span>
      <span class="hljs-keyword">val</span> responseBody = <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">ResponseBodyAsStream()</span>
      <span class="hljs-keyword">val</span> resp = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IOUtils</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">responseBody</span>,<span class="hljs-string">&quot;utf8&quot;</span>)</span>
      println(resp)
      <span class="hljs-comment">//关闭连接</span>
      <span class="hljs-keyword">method</span>.release<span class="hljs-constructor">Connection()</span>
    &#125;</code></pre>
<blockquote>
<p>python服务器端</p>
</blockquote>
<pre><code class="hljs vala"><span class="hljs-comment">//创建连接</span>
<span class="hljs-meta">#app = Flask(__name__)</span>
<span class="hljs-meta">#@app.route(&#x27;/&#x27;,methods=[&#x27;POST&#x27;])</span>
<span class="hljs-meta">#def postRestful():</span>
<span class="hljs-meta">#   。。。。。。</span>
<span class="hljs-meta">#  此处为要执行的python程序体</span>
<span class="hljs-meta">#</span>
<span class="hljs-comment">//开启服务，0.0.0.0表示允许局域网访问，5000是端口</span>
<span class="hljs-meta">#app.run(host=&quot;0.0.0.0&quot;,port=&quot;5000&quot;)</span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scala</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>spark三种join方法对比及应用场景</title>
    <url>/2021/07/08/spark%E4%B8%89%E7%A7%8Djoin%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h1><p>前几天在跑一个程序的时候遇到了一个很诡异的事情，在dolphinSchedule上面上线了几天的一个程序突然挂掉了，查看问题原因总是报连接超时。无从下手，然后查看代码发现是同事写的代码有一个分区的bug，改掉了但是运行到程序的一个关联操作的地方还是连接超时，然后直接就死掉了。感觉很诡异，因为程序运行了几天没问题，说明代码可能是没问题的，然后计算的数据是一年的数据，猜想可能是数据量的变化出现的问题。</p>
<h1 id="2-问题详情"><a href="#2-问题详情" class="headerlink" title="2 问题详情"></a>2 问题详情</h1><h2 id="2-1-报错信息"><a href="#2-1-报错信息" class="headerlink" title="2.1 报错信息"></a>2.1 报错信息</h2><ul>
<li>具体信息</li>
</ul>
<pre><code class="hljs stylus">Traceback (most recent call last):
  File <span class="hljs-string">&quot;LineLossRate.py&quot;</span>, line <span class="hljs-number">237</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    dfjoin.show(<span class="hljs-number">5</span>)
  File <span class="hljs-string">&quot;/opt/cloudera/parcels/SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012/lib/spark2/python/lib/pyspark.zip/pyspark/sql/dataframe.py&quot;</span>, line <span class="hljs-number">378</span>, <span class="hljs-keyword">in</span> show
  File <span class="hljs-string">&quot;/opt/cloudera/parcels/SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012/lib/spark2/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py&quot;</span>, line <span class="hljs-number">1257</span>, <span class="hljs-keyword">in</span> __call__
  File <span class="hljs-string">&quot;/opt/cloudera/parcels/SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012/lib/spark2/python/lib/pyspark.zip/pyspark/sql/utils.py&quot;</span>, line <span class="hljs-number">63</span>, <span class="hljs-keyword">in</span> deco
  File <span class="hljs-string">&quot;/opt/cloudera/parcels/SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012/lib/spark2/python/lib/py4j-0.10.7-src.zip/py4j/protocol.py&quot;</span>, line <span class="hljs-number">328</span>, <span class="hljs-keyword">in</span> get_return_value
py4j<span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.Py4JJavaError</span>: An error occurred while calling o409<span class="hljs-selector-class">.showString</span>.
: org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.SparkException</span>: Could not execute broadcast <span class="hljs-keyword">in</span> <span class="hljs-number">1800</span> secs. You can increase the timeout <span class="hljs-keyword">for</span> broadcasts via spark<span class="hljs-selector-class">.sql</span><span class="hljs-selector-class">.broadcastTimeout</span> or disable broadcast join by setting spark<span class="hljs-selector-class">.sql</span><span class="hljs-selector-class">.autoBroadcastJoinThreshold</span> to -<span class="hljs-number">1</span>
at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.sql</span><span class="hljs-selector-class">.execution</span><span class="hljs-selector-class">.exchange</span><span class="hljs-selector-class">.BroadcastExchangeExec</span>.doExecuteBroadcast(BroadcastExchangeExec<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">150</span>)
	at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.sql</span><span class="hljs-selector-class">.execution</span><span class="hljs-selector-class">.InputAdapter</span>.doExecuteBroadcast(WholeStageCodegenExec<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">387</span>)
	at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.sql</span><span class="hljs-selector-class">.execution</span>.SparkPlan$<span class="hljs-variable">$anonfun</span><span class="hljs-variable">$executeBroadcast</span>$<span class="hljs-number">1</span>.apply(SparkPlan<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">144</span>)</code></pre>

<p>在其他节点上显示有一些重复连接超时的警告：</p>
<pre><code class="hljs stylus"><span class="hljs-number">21</span>/<span class="hljs-number">07</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">42</span> WARN scheduler<span class="hljs-selector-class">.TaskSetManager</span>: Lost task <span class="hljs-number">9.0</span> <span class="hljs-keyword">in</span> stage <span class="hljs-number">70.0</span> (TID <span class="hljs-number">5771</span>, cdh06<span class="hljs-selector-class">.nari</span><span class="hljs-selector-class">.com</span>, executor <span class="hljs-number">12</span>): java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.ConnectException</span>: Connection timed out (Connection timed out)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.PlainSocketImpl</span>.socketConnect(Native Method)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.AbstractPlainSocketImpl</span>.doConnect(AbstractPlainSocketImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">350</span>)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.AbstractPlainSocketImpl</span>.connectToAddress(AbstractPlainSocketImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">206</span>)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.AbstractPlainSocketImpl</span>.connect(AbstractPlainSocketImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">188</span>)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.SocksSocketImpl</span>.connect(SocksSocketImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">392</span>)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.Socket</span>.connect(Socket<span class="hljs-selector-class">.java</span>:<span class="hljs-number">589</span>)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.Socket</span>.connect(Socket<span class="hljs-selector-class">.java</span>:<span class="hljs-number">538</span>)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.Socket</span>.&lt;init&gt;(Socket<span class="hljs-selector-class">.java</span>:<span class="hljs-number">434</span>)
	at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.Socket</span>.&lt;init&gt;(Socket<span class="hljs-selector-class">.java</span>:<span class="hljs-number">244</span>)
	at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.python</span>.PythonWorkerFact</code></pre>

<h2 id="2-2-报错代码"><a href="#2-2-报错代码" class="headerlink" title="2.2 报错代码"></a>2.2 报错代码</h2><pre><code class="hljs pgsql">dfjoin=df365.<span class="hljs-keyword">join</span>(resDf3,<span class="hljs-keyword">on</span>=[&quot;xx&quot;]).\
    withColumn(&quot;xx&quot;,F.lit(dateMyes)). \
    withColumn(&quot;xx&quot;, F.expr(&quot;cast(`xx` as string)&quot;)).<span class="hljs-keyword">join</span>(tg_id,<span class="hljs-keyword">on</span>=[&quot;xx&quot;]).\
    withColumnRenamed(&quot;xx&quot;,&quot;xx&quot;).\
    <span class="hljs-keyword">select</span>(&quot;xx&quot;,&quot;xx&quot;,&quot;xx&quot;&quot;xx&quot;&quot;xx&quot;&quot;xx&quot;&quot;xx&quot;).persist()

dfjoin.<span class="hljs-keyword">show</span>(<span class="hljs-number">5</span>)
dfjoin.coalesce(<span class="hljs-number">128</span>).<span class="hljs-keyword">write</span>.mode(&quot;append&quot;).partitionBy(&quot;XXX&quot;).format(&quot;parquet&quot;).saveAsTable(&quot;tableName&quot;)</code></pre>

<h1 id="3-问题刨析"><a href="#3-问题刨析" class="headerlink" title="3 问题刨析"></a>3 问题刨析</h1><p>从报错的信息中基本可以定位问题出现在数据join的位置，但是其中的两个dataframe，resDf3和df365数据量都在十几万也并不是很大。但是从这句话中可以看出也是join的问题，建议我们关闭BroadcastJoin。然后大致可以清楚了，BroadcastJoin是关联一个大表和一个小表的方法，但是这里关联的两个表数据量基本相同，如果使用BroadcastJoin的话就可能导致广播时间过长而连接超时，初步猜想问题的原因就在于此。</p>
<pre><code class="hljs mipsasm">You can increase the timeout for <span class="hljs-keyword">broadcasts </span>via spark.sql.<span class="hljs-keyword">broadcastTimeout </span><span class="hljs-keyword">or </span><span class="hljs-keyword">disable </span><span class="hljs-keyword">broadcast </span><span class="hljs-keyword">join </span><span class="hljs-keyword">by </span>setting spark.sql.autoBroadcastJoinThreshold to -<span class="hljs-number">1</span></code></pre>

<p>于是添加了spark.sql.autoBroadcastJoinThreshold参数为-1，程序正常运行，问题解决。</p>
<h1 id="4-扩展延伸：spark的三种join方式"><a href="#4-扩展延伸：spark的三种join方式" class="headerlink" title="4  扩展延伸：spark的三种join方式"></a>4  扩展延伸：spark的三种join方式</h1><p>文章参考链接：<a href="http://hbasefly.com/2017/03/19/sparksql-basic-join/">SparkSQL – 有必要坐下来聊聊Join – 有态度的HBase/Spark/BigData (hbasefly.com)</a></p>
<p>这里是对该文章内的信息转载并做一个简要的摘录：</p>
<p>当前SparkSQL支持三种Join算法－shuffle hash join、broadcast hash join以及sort merge join。其中前两者归根到底都属于hash join，只不过在hash join之前需要先shuffle还是先broadcast。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>所属类别</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>shuffle hash join</td>
<td>hash join</td>
<td>一张大表join一张小表</td>
</tr>
<tr>
<td>broadcast hash join</td>
<td>hash join</td>
<td>一张大表join一张极小表</td>
</tr>
<tr>
<td>sort merge join</td>
<td>merge join</td>
<td>两张大表join</td>
</tr>
</tbody></table>
<h2 id="4-1-Hash-Join"><a href="#4-1-Hash-Join" class="headerlink" title="4.1 Hash Join"></a>4.1 <strong>Hash Join</strong></h2><p>先来看看这样一条SQL语句：select * from order,item where item.id = order.i_id，很简单一个Join节点，参与join的两张表是item和order，join key分别是item.id以及order.i_id。现在假设这个Join采用的是hash join算法，整个过程会经历三步：</p>
<ol>
<li><p>确定Build Table以及Probe Table：这个概念比较重要，Build Table使用join key构建Hash Table，而Probe Table使用join key进行探测，探测成功就可以join在一起。通常情况下，小表会作为Build Table，大表作为Probe Table。此事例中item为Build Table，order为Probe Table。</p>
</li>
<li><p>构建Hash Table：依次读取Build Table（item）的数据，对于每一行数据根据join key（item.id）进行hash，hash到对应的Bucket，生成hash table中的一条记录。数据缓存在内存中，如果内存放不下需要dump到外存。</p>
</li>
<li><p>探测：再依次扫描Probe Table（order）的数据，使用相同的hash函数映射Hash Table中的记录，映射成功之后再检查join条件（item.id = order.i_id），如果匹配成功就可以将两者join在一起 </p>
</li>
</ol>
<blockquote>
<p> 这里可能存在的疑问：</p>
<ol>
<li><p>hash join性能如何？hash join基本都只扫描两表一次，可以认为o(a+b)</p>
</li>
<li><p>为什么Build Table选择小表？因为构建的Hash Table最好能全部加载在内存，效率最高；这也决定了<strong>hash join算法只适合至少一个小表的join场景，对于两个大表的join场景并不适用</strong>；</p>
</li>
</ol>
</blockquote>
<h2 id="4-1-1-Broadcast-Hash-Join"><a href="#4-1-1-Broadcast-Hash-Join" class="headerlink" title="4.1.1 Broadcast Hash Join"></a>4.1.1 <strong>Broadcast Hash Join</strong></h2><p>Broadcast Hash Join一般分为两步：</p>
<ol>
<li><p>broadcast阶段：将小表广播分发到大表所在的所有主机。广播算法可以有很多，最简单的是先发给driver，driver再统一分发给所有executor；要不就是基于bittorrete的p2p思路；</p>
</li>
<li><p>hash join阶段：在每个executor上执行单机版hash join，小表映射，大表试探</p>
</li>
</ol>
<blockquote>
<p>SparkSQL规定broadcast hash join执行的基本条件为被广播小表必须小于参数spark.sql.autoBroadcastJoinThreshold，默认为10M</p>
</blockquote>
<h2 id="4-1-2-Shuffle-Hash-Join"><a href="#4-1-2-Shuffle-Hash-Join" class="headerlink" title="4.1.2 Shuffle Hash Join"></a>4.1.2 <strong>Shuffle Hash Join</strong></h2><p>在大数据条件下如果一张表很小，执行join操作最优的选择无疑是broadcast hash join，效率最高。但是一旦小表数据量增大，广播所需内存、带宽等资源必然就会太大，broadcast hash join就不再是最优方案。此时可以按照join key进行分区，根据key相同必然分区相同的原理，就可以将大表join分而治之，划分为很多小表的join，充分利用集群资源并行化。如下图所示，shuffle hash join也可以分为两步：</p>
<ol>
<li><p>shuffle阶段：分别将两个表按照join key进行分区，将相同join key的记录重分布到同一节点，两张表的数据会被重分布到集群中所有节点。这个过程称为shuffle</p>
</li>
<li><p>hash join阶段：每个分区节点上的数据单独执行单机hash join算法。</p>
</li>
</ol>
<h1 id="4-2-Sort-Merge-Join"><a href="#4-2-Sort-Merge-Join" class="headerlink" title="4.2 Sort-Merge Join"></a>4.2 <strong>Sort-Merge Join</strong></h1><p>sort merge join 一般分为三个步骤：</p>
<ol>
<li><p>shuffle阶段：将两张大表根据join key进行重新分区，两张表数据会分布到整个集群，以便分布式并行处理</p>
</li>
<li><p>sort阶段：对单个分区节点的两表数据，分别进行排序</p>
</li>
<li><p>merge阶段：对排好序的两张分区表数据执行join操作。join操作很简单，分别遍历两个有序序列，碰到相同join key就merge输出，否则取更小一边</p>
</li>
</ol>
<h1 id="5-再次回到问题"><a href="#5-再次回到问题" class="headerlink" title="5. 再次回到问题"></a>5. 再次回到问题</h1><p>从上面介绍的三种join的原理可以基本确定各自所对应的应用场景，这次遇到的问题就是由于spark默认使用了broadcast join方法，然后两个join的表的数据量基本相似，所以遇到了broadcast join乱广播导致程序超时的现象。所以手动禁止该方法解决了问题。</p>
]]></content>
      <categories>
        <category>spark学习</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
</search>
